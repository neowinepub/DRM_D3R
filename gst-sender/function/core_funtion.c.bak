#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/time.h>

#include "dorca30_function.h"
#include "dorca30_api.h"
#include "dorca30_api_inside.h"
#include "dorca.h"
#include "define.h"
#include "global.h"
#include "include/aes.h"
#include "include/aes_locl.h"
#define ARM7 
#define DelayMS 30
//#define KEY_SET(x) (void)0
#define CODE_DOWNLOAD
//#define DEBUG_DELAY
#if 1
#define PRINTLOG(...) printf(__VA_ARGS__)
#else
#define PRINTLOG(...) (void)0
#endif
int SPEED = 0;
int cs = 0;
int fd0;
int fd1;
void KEY_SET(unsigned char *KEY)
{		
	KeyLoad(0,0,0,0,KEY,MODE256);

}
void printbyte(unsigned char *pData,int size )
{
	int i = 0;
	printf("\r\n");
	for(i = 0; i < size; i++)
	{
		if( i % 4 == 0)
			PRINTLOG("|");
		PRINTLOG("%02x,",pData[i]);
	}

}
unsigned char tspi_interface(unsigned int cs, unsigned char inst, unsigned char *addr,unsigned char count, unsigned char opcode,unsigned char param0, unsigned char param1, unsigned char *tx_data, unsigned char *rx_data, int Byte_num)
{
	int addr_temp = 0;
	addr_temp = (addr[0] << 8) | addr[1]; 
	if(inst == 0x31 || inst == 0x30){// write
		spi_write(fd0,inst,addr_temp,Byte_num,tx_data);
		//printf("\r\n spi_write(fd,inst,addr_temp,Byte_num,tx_data)");
	}
	else{//read
		spi_read(fd0,inst,addr_temp,Byte_num,rx_data);
		//printf("\r\n spi_read(fd,inst,addr_temp,Byte_num,rx_data)");    	
	}	
}

void hexstr2bytes( char * str, uint8_t * result) {
	int i, n;
	char tmp[3] = "00";

	n=strlen(str)/2;
	for(i=0; i<n; i++)
	{
		memcpy(tmp, &str[i*2], 2);
		result[i] = (uint8_t) strtoul(tmp, NULL, 16);
	}
}




void delay_us(unsigned int us)	
{
	//printf("\r\n Delay");
	//usleep(us*2);
	usleep(us);
}
void Delay_us(unsigned int us)	
{
	//printf("\r\n Delay");
	//usleep(us*2);
	usleep(us);
}
void Delay_ms(unsigned int us)	
{
	//printf("\r\n Delay");
	//usleep(us*1000*2);
	usleep(us*1000);
}

void delay_ms(unsigned int i)
{
	//	Delay_ms(i*2);
	Delay_ms(i);
}


char get_char() 
{
	return getchar();
}

char _uart_get_char()
{
	return getchar();

}
void endOP(void)
{

	int i;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	int j = 0;


	tx_data[0] = 0x01;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	Delay_ms(2);
	tx_data[0] = 0x00;	
	tspi_interface(cs, ADDR_NOR_W, RG_ACCESS, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);


#if PRINTFMODE
	// PRINTLOG("\r\n=========================================================================");
	//PRINTLOG("\r\n==		 RG_ACCESS SET=> 0x00							   ==");
	// PRINTLOG("\r\n=========================================================================");
#endif	 
}

#define DelayMS 30

int _ecdh_gen_pub_key_puf(point *p1)
{

	unsigned char buffer_ecdh[256];
	unsigned char buffer_receive[256];

	int i = 0;	

	for(i = 0; i < 256; i++)
		buffer_ecdh[i] = i;
	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = SIZE_ECDH_256;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;

	send_data_arm7(buffer_ecdh,5);


	//printf("\r\n read write test");
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	
	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Set_ECDH_PrivateKey_PUF;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;
	send_data_arm7(buffer_ecdh,5);


	delay_ms(200);
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY
	delay_ms(4000);
#endif

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Create_ECHD_PublicKey;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;
	send_data_arm7(buffer_ecdh,5);

	delay_ms(200);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif
	buffer_ecdh[0] = SPI1_READ_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Get_ECDH_PublicKey_X;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;

	read_data_arm7(buffer_ecdh,buffer_receive,32);

	memcpy(p1->x,buffer_receive,32);

	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	
	buffer_ecdh[0] = SPI1_READ_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Get_ECDH_PublicKey_Y;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;

	read_data_arm7(buffer_ecdh,buffer_receive,32);
	memcpy(p1->y,buffer_receive,32);




}


#define DelayMS 30

int _ecdh_gen_pub_key(uint8_t* sk,point *p1)
{

	unsigned char buffer_ecdh[256];
	unsigned char buffer_receive[256];

	int i = 0;	

	for(i = 0; i < 256; i++)
		buffer_ecdh[i] = i;

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = SIZE_ECDH_256;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;

	send_data_arm7(buffer_ecdh,5);


	//printf("\r\n read write test");
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	
	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Set_ECDH_PrivateKey;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;
	memcpy(&buffer_ecdh[5],sk,32);

	send_data_arm7(buffer_ecdh,37);

	//	write_spi_data(buffer_ecdh,37);


	delay_ms(DelayMS);
#ifdef DEBUG_DELAY
	delay_ms(4000);
#endif

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Create_ECHD_PublicKey;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;

	send_data_arm7(buffer_ecdh,5);


	delay_ms(200);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif
	buffer_ecdh[0] = SPI1_READ_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Get_ECDH_PublicKey_X;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;

	read_data_arm7(buffer_ecdh,buffer_receive,32);

	memcpy(p1->x,buffer_receive,32);

	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	
	buffer_ecdh[0] = SPI1_READ_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Get_ECDH_PublicKey_Y;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;
	read_data_arm7(buffer_ecdh,buffer_receive,32);

	memcpy(p1->y,buffer_receive,32);




}

#define ECDH_SESSION_KEY_GEN_PRINT
int _ecdh_gen_session_key_puf(point *p1, uint8_t *key,size_t* key_length)
{
	unsigned char buffer_ecdh[256];
	unsigned char buffer_receive[256];
	unsigned char XofKey[32];
	int i = 0;	

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = SIZE_ECDH_256;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;
	send_data_arm7(buffer_ecdh,5);
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	

	delay_ms(DelayMS);
	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Set_ECDH_PublicKey_X;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;
	memcpy(&buffer_ecdh[5],p1->x,32);
	send_data_arm7(buffer_ecdh,37);
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Set_ECDH_PublicKey_Y;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;
	memcpy(&buffer_ecdh[5],p1->y,32);
	send_data_arm7(buffer_ecdh,37);

	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Create_ECHD_KEY;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;
	send_data_arm7(buffer_ecdh,5);
	delay_ms(200);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	



#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	

	buffer_ecdh[0] = SPI1_READ_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Get_ECDH_KEY_X;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;
	read_data_arm7(buffer_ecdh,buffer_receive,32);
	memcpy(key,buffer_receive,32);
	delay_ms(DelayMS);

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = SET_EEPROM_BY_KEY;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;	

	send_data_arm7(buffer_ecdh,5);
	delay_ms(DelayMS);

}

int _ecdh_gen_session_key(uint8_t* sk,point *p1, uint8_t *key,size_t* key_length)
{
	unsigned char buffer_ecdh[256];
	unsigned char buffer_receive[256];
	unsigned char XofKey[32];
	int i = 0;	
	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = SIZE_ECDH_256;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;
	send_data_arm7(buffer_ecdh,5);
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	
	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Set_ECDH_PrivateKey;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;
	memcpy(&buffer_ecdh[5],sk,32);

	send_data_arm7(buffer_ecdh,37);


	delay_ms(DelayMS);
	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Set_ECDH_PublicKey_X;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;

	memcpy(&buffer_ecdh[5],p1->x,32);


	send_data_arm7(buffer_ecdh,37);
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Set_ECDH_PublicKey_Y;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;

	memcpy(&buffer_ecdh[5],p1->y,32);
	send_data_arm7(buffer_ecdh,37);
	delay_ms(DelayMS);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Create_ECHD_KEY;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;

	send_data_arm7(buffer_ecdh,5);
	delay_ms(200);
#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	



#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif	

	buffer_ecdh[0] = SPI1_READ_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = Get_ECDH_KEY_X;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 32;
	read_data_arm7(buffer_ecdh,buffer_receive,32);
	memcpy(key,buffer_receive,32);
	delay_ms(DelayMS);

	buffer_ecdh[0] = SPI1_WRITE_DATA;
	buffer_ecdh[1] = 0;
	buffer_ecdh[2] = SET_EEPROM_BY_KEY;
	buffer_ecdh[3] = 0;
	buffer_ecdh[4] = 0;	

	send_data_arm7(buffer_ecdh,5);
	delay_ms(DelayMS);
}



void TEST_ECDH_SESSION(void)
{
	uint8_t sk[32];
	uint8_t common_key[32];	
	uint8_t temp_buffer[32];
	size_t  key_length;
	point p1;
	printf("\r\n TEST _ecdh_gen_session_key");
	hexstr2bytes("c64d654e263cda95d6dc719d3cfd6c3b932b1fea6021b9e2ac36995c4d96ae3d",sk);
	hexstr2bytes("fb526fbfae10d2a0d8fab4d4bdcc883bbfadee2a73ea66a1a1fe816c282d2ce9",p1.y);
	hexstr2bytes("764ea0ef1a596b196e8b7316e60de4edccbae87821e767b50f6f36656e7ebe2a",p1.x);
	key_length = 32;
	ecdh_gen_session_key(sk,&p1,common_key,&key_length);


	hexstr2bytes("9e29727653fe830e9709045ead243fa44acec4efb7322048894c4d06b484ce58",temp_buffer);
	if(0 != memcmp(temp_buffer,common_key,32) )
		printf("TEST_ECDH_SESSION COMPARE FAIL");
	else
		printf("TEST_ECDH_SESSION COMPARE PASS");

	printbyte(common_key,key_length);


}
void TEST_ECDH_SESSION_PUF()
{
	uint8_t sk[32];
	uint8_t common_key[32];	
	uint8_t temp_buffer[32];
	size_t  key_length;
	point p1;
	printf("\r\n TEST _ecdh_gen_session_key");
	hexstr2bytes("fb526fbfae10d2a0d8fab4d4bdcc883bbfadee2a73ea66a1a1fe816c282d2ce9",p1.y);
	hexstr2bytes("764ea0ef1a596b196e8b7316e60de4edccbae87821e767b50f6f36656e7ebe2a",p1.x);
			    //764ea0ef1a596b196100150020fb526fbfae10d2a0d8fab4d4bdcc883bbfadee
	ecdh_gen_session_key_puf(&p1,common_key,&key_length);
	printf("\r\n Common key:");
	printbyte(common_key,32);



}

void TEST_ECDH_PUB_PUF(void)
{
	uint8_t sk[32];
	uint8_t common_key[32];	
	uint8_t temp_buffer[32];
	size_t  key_length;
	point p1;
	printf("\r\n TEST ecdh_gen_pub_key");
	ecdh_gen_pub_key_puf(&p1);
	printf("\r\n Public key:");
	printbyte(p1.x,32);
}

void TEST_ECDH_PUB(void)
{
	uint8_t sk[32];
	uint8_t common_key[32];	
	uint8_t temp_buffer[32];
	size_t  key_length;
	point p1;
	printf("\r\n TEST ecdh_gen_pub_key");
	hexstr2bytes("c64d654e263cda95d6dc719d3cfd6c3b932b1fea6021b9e2ac36995c4d96ae3d",sk);
	ecdh_gen_pub_key(sk,&p1);
	printf("\r\nGet_ECDH_PublicKey_X\r\n");
	printbyte(p1.x,32);

	printf("\r\n Expected ECDH_PublicKey_X\r\n");
	printf("\r\nefb50f68f26558c1d42847e82dc552607965049cc6f65d7ed8b8d02a1d8825f9");
	hexstr2bytes("efb50f68f26558c1d42847e82dc552607965049cc6f65d7ed8b8d02a1d8825f9",temp_buffer);
	if(memcmp(p1.x,temp_buffer,32) == 0)
		printf("\r\n PASS");
	else
		printf("\r\n FAIL");

	printf("\r\nGet_ECDH_PublicKey_Y\r\n");
	printbyte(p1.y,32);

	printf("\r\n Expected ECDH_PublicKey_Y\r\n");
	printf("\r\n3ca531980f67c4843db00419470860d736577867c5eab3e3ed304fd253949202");

	hexstr2bytes("3ca531980f67c4843db00419470860d736577867c5eab3e3ed304fd253949202",temp_buffer);

	if(memcmp(p1.y,temp_buffer,32) == 0)
		printf("\r\n PASS");
	else
		printf("\r\n FAIL");	



}

void reversebuffer(unsigned char *dest,unsigned char *org,int count)
{
	int i;
	int j;
	j = count -1;
	for(i = 0; i < count; i++) {
		dest[i] = org[j--];
	}


}


int AES_ARIA_INIT_KEY_IDX(int Index,int RG_128_256,int AES_ARIA,unsigned char *AES_ARIA_KEY,int RG_TWO_FRAME)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	unsigned char KEY_BUFFER[32];

	tx_data[0] = Index;// KEY_0
	tspi_interface(cs, ADDR_NOR_W, RG_EE_KEY_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 
		(RG_TWO_FRAME<<3)|
		(RG_128_256<<1)|
		AES_ARIA;
	tspi_interface(cs, ADDR_NOR_W, RG_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x9;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x2;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 0x3;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	delay_us(30);
	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 0x4;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	return 0;
}


int AES_ARIA_INIT(int RG_128_256,int AES_ARIA,unsigned char *AES_ARIA_KEY,int RG_TWO_FRAME)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	unsigned char KEY_BUFFER[32];
	// INIT KEY
#if 0
	if(RG_128_256 == RG_256)
	{
		for(i = 0; i < 32; i++)
		{
			AES_ARIA_KEY[i] = i;
		}
	}	
	else
	{
		for(i =0; i <16; i++)
		{
			AES_ARIA_KEY[i] = i;
		}
		for(i = 16; i < 32; i++)
			AES_ARIA_KEY[i] = 0;
	}
#endif

	if(RG_128_256 == RG_256)
	{
		memcpy(KEY_BUFFER,AES_ARIA_KEY+16,16);
		memcpy(KEY_BUFFER+16,AES_ARIA_KEY,16);		
		KEY_SET(KEY_BUFFER);
#ifdef DEBUG_API			
		printf("\r\n RG_256");
		printbyte(AES_ARIA_KEY,32);

#endif
	}
	else
	{
		memcpy(KEY_BUFFER+16,AES_ARIA_KEY,16);
		KEY_SET(KEY_BUFFER);	
#ifdef DEBUG_API				
		printf("\r\n RG_128");		
		printbyte(AES_ARIA_KEY,16);

#endif
	}
#ifdef DEBUG_API		

	printf("\r\n RG_128_256 %d",RG_128_256);
	printf("\r\n AES_ARIA %d",AES_ARIA);	
	printf("\r\n RG_TWO_FRAME %d",RG_TWO_FRAME);
#endif	
	tx_data[0] = 0x0;// KEY_0
	tspi_interface(cs, ADDR_NOR_W, RG_EE_KEY_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 
		(RG_TWO_FRAME<<3)|
		(RG_128_256<<1)|
		AES_ARIA;
	tspi_interface(cs, ADDR_NOR_W, RG_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x9;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x2;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 0x3;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	delay_us(30);
	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 0x4;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	return 0;
}

void AES_ARIA_Encrypt32(unsigned char *pInput,unsigned char *pOutput)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
#ifdef DEBUG_API		
	printf("\r\n AES_ARIA_Encrypt32 input");
	printbyte(pInput,32);
#endif

	reversebuffer(tx_data, pInput, 16);
	reversebuffer(tx_data+16,pInput+16,16);
	tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300                   , NULL, NULL, NULL, NULL, tx_data, rx_data, 32);	
	Delay_us(2);

	tspi_interface(cs, ADDR_NOR_R,RG_EEBUF320                   , NULL, NULL, NULL, NULL, tx_data, rx_data, 32);	

	reversebuffer(pOutput, rx_data, 16);
	reversebuffer(pOutput+16,rx_data+16,16);	
#ifdef DEBUG_API		
	printf("\r\n AES_ARIA_Encrypt32 pOutput");
	printbyte(pOutput,32);
#endif	

}
void AES_ARIA_Decrypt32(unsigned char *pInput,unsigned  char *pOutput)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];

	reversebuffer(tx_data, pInput, 16);
	reversebuffer(tx_data+16,pInput+16,16);
#ifdef DEBUG_API	
	printf("\r\n AES_ARIA_Decrypt32 input");
	printbyte(pInput,32);
#endif	
	tspi_interface(cs, ADDR_NOR_W, RG_EEBUF400      , NULL, NULL, NULL, NULL, tx_data, rx_data, 32);	
	delay_us(2);
	tspi_interface(cs, ADDR_NOR_R, RG_EEBUF420      , NULL, NULL, NULL, NULL, tx_data, rx_data, 32);		
	//iEnd = pRSTC->RTTC_RTVR;
	reversebuffer(pOutput, rx_data, 16);
	reversebuffer(pOutput+16,rx_data+16,16);
#ifdef DEBUG_API		
	printf("\r\nAES_ARIA_Decrypt32 pOutput");
	printbyte(pOutput,32);	
#endif	

}


void AES_ARIA_Encrypt(unsigned char *pInput,unsigned char *pOutput)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	reversebuffer(tx_data, pInput, 16);
	tspi_interface(cs, ADDR_NOR_W, RG_EEBUF300      , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);	
	delay_us(2);
	tspi_interface(cs, ADDR_NOR_R, RG_EEBUF320      , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);		
	//iEnd = pRSTC->RTTC_RTVR;
	reversebuffer(pOutput, rx_data, 16);	


}
void AES_ARIA_Decrypt(unsigned char *pInput,unsigned  char *pOutput)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];

	reversebuffer(tx_data, pInput, 16);
	tspi_interface(cs, ADDR_NOR_W, RG_EEBUF400      , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);	
	delay_us(2);
	tspi_interface(cs, ADDR_NOR_R, RG_EEBUF420      , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);		
	//iEnd = pRSTC->RTTC_RTVR;
	reversebuffer(pOutput, rx_data, 16);	

}
void AES_ARIA_CLOSE()
{

	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];

	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE    , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	  


	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_SYMCIP_OPMODE    , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	  


	endOP();				

}

void SET_IV_KEY_IDX(int Index,unsigned char *IV,int AES_OPMODE,int RG_128_256,int AES_ARIA,unsigned char *AES_ARIA_KEY, int RG_TWO_FRAME)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];	   
	int success = 1;
	unsigned char KEY_BUFFER[32];

	tx_data[0] = Index;// KEY_0
	tspi_interface(cs, ADDR_NOR_W, RG_EE_KEY_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 
		(AES_OPMODE<<4)|
		(RG_TWO_FRAME<<3)|
		(RG_128_256<<1)|
		AES_ARIA;
	tspi_interface(cs, ADDR_NOR_W, RG_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x9;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x2;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	tx_data[0] = 0x2;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	reversebuffer(tx_data,IV,16);
	tspi_interface(cs, ADDR_NOR_W, RG_EEBUF300      , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);	
	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	tx_data[0] = 0x3;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	delay_us(30);
	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 0x4;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

void SET_IV(unsigned char *IV,int AES_OPMODE,int RG_128_256,int AES_ARIA,unsigned char *AES_ARIA_KEY, int RG_TWO_FRAME)
{
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];	   
	int success = 1;
	unsigned char KEY_BUFFER[32];
	memset(KEY_BUFFER,0,32);
	//printf("\r\n -----------------START OF SET IV-----------------");
	if(NULL != AES_ARIA_KEY) {

		if(RG_128_256 == RG_256){		

			memcpy(KEY_BUFFER,AES_ARIA_KEY+16,16);
			memcpy(KEY_BUFFER+16,AES_ARIA_KEY,16);		
			KEY_SET(KEY_BUFFER);
		}
		else{

			memcpy(KEY_BUFFER+16,AES_ARIA_KEY,16);
			KEY_SET(KEY_BUFFER);	
		}
	}
	//else
	//	printf("\r\nKEY IS NULL");
	//if(NULL == IV)
	//	printf("\r\n IV IS NULL");
	//else{
	//	printf("\r\nIV:");
	//	printbyte(IV,16);
	//}

	tx_data[0] = 0x0;// KEY_0
	tspi_interface(cs, ADDR_NOR_W, RG_EE_KEY_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 
		(AES_OPMODE<<4)|
		(RG_TWO_FRAME<<3)|
		(RG_128_256<<1)|
		AES_ARIA;
	tspi_interface(cs, ADDR_NOR_W, RG_AES_CTRL      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x9;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x2;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	tx_data[0] = 0x2;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	reversebuffer(tx_data,IV,16);
	tspi_interface(cs, ADDR_NOR_W, RG_EEBUF300      , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);	
	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	tx_data[0] = 0x3;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	delay_us(30);
	tx_data[0] = 0x1;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 0x4;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
int KeyLoad(int KeyAseCtrl,int TextSel,int KeySel, int KeySaveSel, unsigned char *LoadKEY ,int mode)
//int KeyLoadDemo(int KeyAseCtrl,int TextSel,int KeySel, int KeySaveSel)
{
	int i;
	int j;
	unsigned int inst = 0;
	int pass = 1;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	unsigned char temp ;
	unsigned char buf_data[64];
	int success = 1;
	unsigned char AES_KEY_X3[16] = {0x05,0x0C,0xDA,0xDE,0xE1,0x56,0x41,0x13,0xA0,0x3F,0x86,0xA6,0x6E,0xC2,0x47,0xBC};//all 0405060708090A0B0C0D0E0F10111213		
	unsigned char AES_KEY_X2[16] = {0xB8,0x59,0xE9,0x66,0xDE,0xF9,0x7D,0x89,0x3D,0x7C,0x32,0x54,0x12,0x31,0x76,0xE6};//all 030405060708090A0B0C0D0E0F101112	
	unsigned char AES_KEY_X1[16] = {0xA9,0x2F,0x2B,0xE7,0xA9,0x76,0xA1,0x23,0x96,0xCB,0x5A,0xCC,0xE9,0xE4,0xA0,0xBD};//all 02030405060708090A0B0C0D0E0F1011
	unsigned char AES_KEY_X0[16]=  {0x02,0x8D,0xBD,0xE3,0x74,0x58,0x62,0xBF,0xA1,0xD4,0x57,0x37,0x07,0xB7,0xE4,0x9A};//    0102030405060708090A0B0C0D0E0F10 with seed key which are all 0x11
	unsigned char *CYPKEY;
	unsigned char CIPHERED_KEY[32];

	switch(KeySel)
	{
	case 0:
		CYPKEY = AES_KEY_X0;	
		break;
	case 1:
		CYPKEY = AES_KEY_X1;
		break;
	case 2:
		CYPKEY = AES_KEY_X2;
		break;
	case 3:
		CYPKEY = AES_KEY_X3;
		break;

	}
	for(i = 0; i < 64; i++)
	{
		tx_data[i] = 0;
		rx_data[i] = 0;
		buf_data[i] = 0x11;
	}

	if(LoadKEY != NULL)
	{
		AES_KEY aes256_ekey,aes256_dkey;


		AES_set_encrypt_key(buf_data, 256, &aes256_ekey);
		AES_set_decrypt_key(buf_data, 256, &aes256_dkey);

		AES_ecb_encrypt(LoadKEY, CIPHERED_KEY, &aes256_ekey, AES_ENCRYPT);
		if(mode == MODE256)		
			AES_ecb_encrypt(LoadKEY+16, CIPHERED_KEY+16, &aes256_ekey, AES_ENCRYPT);		

	}

	delay_ms(10);

	tx_data[0] = KeyAseCtrl;// EE_KEY_AES_x0
	tspi_interface(cs, ADDR_NOR_W, RG_EE_KEY_AES_CTRL  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] =  (KeySaveSel<<4)//KL_KeySaveSel
		|(TextSel<<2)
		|(KeySel); //KL_KEYSEL
	PRINTLOG("RG_KL_CTRL 0x%02x",tx_data[0]);
	tspi_interface(cs, ADDR_NOR_W, RG_KL_CTRL   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	/*
	if(TextSel == 2)
	{
	for( i = 0; i < 64; i++)
	tx_data[i] = i;
	WriteRGEBUF(tx_data);
	}
	*/
	tx_data[0] = 0x01;// AES_256
	tspi_interface(cs, ADDR_NOR_W, RG_AES_CTRL  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);


	tx_data[0] = 0x09;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x06;
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_SYMCIP_OPMODE  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x03;
	tspi_interface(cs, ADDR_NOR_W, RG_ST2_SYMCIP_OPMODE   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	delay_us(30);

	tx_data[0] = 0x01;
	tspi_interface(cs, ADDR_NOR_W,  RG_ST2_SYMCIP_OPMODE   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x09;
	tspi_interface(cs, ADDR_NOR_W,  RG_ST2_SYMCIP_OPMODE   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x02;
	tspi_interface(cs, ADDR_NOR_W,  RG_ST3_SYMCIP_KEYLOAD_OPMODE   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x00;
	tspi_interface(cs, ADDR_NOR_W,  RG_ACCESS    , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	j = 15;
#if 1
	if(TextSel == 0)
	{
		for(i = 0; i < 16; i++)
			tx_data[i] = CYPKEY[j--];


		if(LoadKEY != NULL)
		{
			j = 31;
			for(i = 0; i < 16; i++)
				tx_data[i] = CIPHERED_KEY[j--];
		}
		tspi_interface(cs, ADDR_NOR_W, RG_EEBUF400   , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);
	}
#else
	if(TextSel == 0)
	{
		memset(tx_data,0,64);
		for(i = 16; i < 32; i++)
			tx_data[i] = CYPKEY[j--];
		tspi_interface(cs, ADDR_NOR_W, RG_EEBUF400   , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);
	}

#endif
	//	delay_us(70);
	delay_us(70*2);

	tx_data[0] = 0x03;
	tspi_interface(cs, ADDR_NOR_W,  	RG_ST3_SYMCIP_KEYLOAD_OPMODE     , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x00;
	tspi_interface(cs, ADDR_NOR_W,  RG_ACCESS    , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	if(TextSel == 0)
	{


		if(LoadKEY != NULL)
		{
			if(mode == MODE256)
			{
				j = 15;
				for(i = 0; i < 16; i++)
					tx_data[i] = CIPHERED_KEY[j--];
				tspi_interface(cs, ADDR_NOR_W, RG_EEBUF400   , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);				
			}
		}
		else
		{
			j = 15;
			for(i = 0; i < 16; i++)
				tx_data[i] = CYPKEY[j--];
			tspi_interface(cs, ADDR_NOR_W, RG_EEBUF400   , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);
		}
	}
	//	delay_us(100);
	delay_ms(16);

	if(TextSel == 2)
	{
		tx_data[0] = 0x01;
		tspi_interface(cs, ADDR_NOR_W, RG_ST1_OKA_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	}
	tx_data[0] = 0x01;
	tspi_interface(cs, ADDR_NOR_W,  RG_ST3_SYMCIP_KEYLOAD_OPMODE      , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x01;
	tspi_interface(cs, ADDR_NOR_W,  RG_ST2_SYMCIP_OPMODE     , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x01;
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_SYMCIP_OPMODE   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = 0x01;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);


	//gPrintOut = 0;
	delay_ms(16);
	endOP();
	return success;
	//ReleasePermision();
	//gPrintOut = 1;	
}
void _rand_pseudorand(unsigned char *out)
{

	unsigned char buffer[256];
	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = MAKE_RAND;
	buffer[3] = 0;
	buffer[4] = 0;
	send_data_arm7(buffer,5);

#ifdef DEBUG_DELAY	
	delay_ms(4000);
#endif
	delay_ms(200);

	buffer[0] = SPI1_READ_DATA;
	buffer[1] = 0;
	buffer[2] = Get_RAND;
	buffer[3] = 0;
	buffer[4] = 16;
	read_data_arm7(buffer,out,16);


}

void _rand_pseudorand_get(unsigned char *out)
{
	unsigned char buffer[256];
	delay_ms(300);

	buffer[0] = SPI1_READ_DATA;
	buffer[1] = 0;
	buffer[2] = Get_RAND;
	buffer[3] = 0;
	buffer[4] = 16;
	read_data_arm7(buffer,out,16);


}



void SetZero_RG_SLEEP_TIMER()
{
	unsigned int i;
	unsigned char inst = 0x00;
	unsigned char addr[2] = { 0x06, 0x04};
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	unsigned char value0 = 0; 
	unsigned char value1 = 1; 
	for( i=0; i<64; i++)
	{
		tx_data[i] = 0x00;
		rx_data[i] = 0x00;
	}

	inst = 0x31;
	tx_data[0] = 0;
	tspi_interface(cs, inst, RG_SLEEP_TIMER_MSB, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	inst = 0x31;
	tx_data[0] = 0;
	tspi_interface(cs, inst, RG_SLEEP_TIMER_LSB, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);


}


void SET_SPI0()
{

	unsigned int i;
	unsigned int inst = 0x00;
	unsigned char addr[2] = { 0x06, 0x04};
	unsigned int tx_data[64];
	unsigned char rx_data[64];


	tx_data[0] = 0x00;
	tspi_interface(cs, ADDR_NOR_W, RG_AES_CTRL, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	//	printf("\r\n Set RG_ST0_OPMODE Start"); 
	tx_data[0] = 1;
	tspi_interface(cs, ADDR_NOR_W,RG_ST1_STDSPI_OPMODE 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	endOP();	
	//	printf("\r\n SET SPI 0");

}

unsigned char WRITE_TEST_5()
{

	unsigned int i;
	unsigned char inst = 0x00;
	unsigned char addr[2] = { 0x06, 0x04};
	unsigned char tx_data[64];
	unsigned char rx_data[64];

	for( i=0; i<64; i++)
	{
		tx_data[i] = 0x00;
		rx_data[i] = 0x00;
	}
	//SetZero_RG_SLEEP_TIMER();
	//printf("\r\n Set RG_AES_CTRL Start"); 

	tx_data[0] = 0x03;
	tspi_interface(cs, ADDR_NOR_W, RG_AES_CTRL, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	//tspi_interface(cs, ADDR_NOR_R, RG_AES_CTRL, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	//printf("\r\n Set RG_ST0_OPMODE Start"); 

	tx_data[0] = 0x05;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	//tspi_interface(cs, ADDR_NOR_R, RG_ST0_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	//printf("\r\n RG_RNDGEN_USER");

	tx_data[0] = 0x00;		  
	tspi_interface(cs, ADDR_NOR_W, RG_RNDGEN_USER, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	//tspi_interface(cs, ADDR_NOR_R, RG_RNDGEN_USER, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	//PRINTLOG("\r\n spi_rx_data    :"); for ( i=0; i<1; i++ ){ if ( ( i !=0 ) & ( i % 16 == 0 ) ) PRINTLOG("\n                 "); PRINTLOG(" 0x%02x", rx_data[i]); }


	//PRINTLOG("\r\n Set RG_ST0_OPMODE End"); 


	return 0;
}


void _key_from_ecdh(void)
{
	KeyLoad(0/*KeyAseCtrl*/,1/*TextSel*/,0/*KeySel*/,1/*KeySaveSel*/,0/*KeyAseCtrl*/,0/*KeyAseCtrl*/);
	printf("\r\n after void _key_from_ecdh(void)");	
	//	ReadStatusRegister();
	//int KeyLoadDemo(int KeyAseCtrl,int TextSel,int KeySel, int KeySaveSel, unsigned char *LoadKEY ,int mode)	
}

unsigned char SPI_SPEED_SET(void)
{
	unsigned char temp = 0;
	while(1)
	{
		printf("\r\n\n");
		printf("\r\n  *****************************************************");
		printf("\r\n  *                 SPI_SPEED_SET                     *");
		printf("\r\n  *****************************************************");
		printf("\r\n  * 0. 1.9MHz                                           *");
		printf("\r\n  * 1. 3.9MHz                                           *");
		printf("\r\n  * 2. 7.8MHz                                           *");
		printf("\r\n  * 3. 15.6MHz                                           *");
		printf("\r\n  * 4. 31.25MHz                                           *");
		printf("\r\n  * 5. 62.5MHz                                           *");
		printf("\r\n  * 6. 62.5MHz                                           *");		
		printf("\r\n  * m return to top menu                                          *");	

		printf("\r\n  *****************************************************");
		{
			if(SPEED == 0)
				printf("\r\n  Current Speed. 1.9MHz                                           *");
			if(SPEED == 1)
				printf("\r\n  Current Speed. 3.9MHz                                           *");
			if(SPEED == 2)
				printf("\r\n  Current Speed. 7.8MHz                                           *");
			if(SPEED == 3)
				printf("\r\n  Current Speed. 15.6MHz                                           *");
			if(SPEED == 4)
				printf("\r\n  Current Speed. 32.2MHz                                           *");
			if(SPEED == 5)
				printf("\r\n  Current Speed. 62.5MHz                                           *");
			if(SPEED == 6)
				printf("\r\n  Current Speed. 122Khz");

		}
		printf("\r\n");
		printf("\r\n  * Select : ");


		temp = 'z' ;

		while(temp == 'z')
		{
			temp = _uart_get_char();
			if(temp == 0x0d)
				break;
			if(temp != 'z') printf("%c\n", temp);

			switch(temp)
			{
			case '0' : Dorca3_Close();Dorca3_SPI_Init(0);SPEED = 0; break ;
			case '1' : Dorca3_Close();Dorca3_SPI_Init(1);SPEED = 1; break ;
			case '2' : Dorca3_Close();Dorca3_SPI_Init(2);SPEED = 2; break ;
			case '3' : Dorca3_Close();Dorca3_SPI_Init(3);SPEED = 3; break ;
			case '4' : Dorca3_Close();Dorca3_SPI_Init(4);SPEED = 4; break ;
			case '5' : Dorca3_Close();Dorca3_SPI_Init(5);SPEED = 5; break ;			
			case '6' : Dorca3_Close();Dorca3_SPI_Init(6);SPEED = 6; break ;			
			}
			if(temp == 'm')
				return 0;
		}

	}   
	return 0;
}

void Reset(void)
{
	int i = 0;
	int j = 0;
	unsigned int inst = 0;
	int success =  1;
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	tx_data[0] = 0x1;
	tspi_interface(cs, ADDR_NOR_W,RG_SOFT_RESET                   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	Delay_ms(16);
	tx_data[0] = 0x00;
	tspi_interface(cs, ADDR_NOR_W,RG_SOFT_RESET                   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);		
	Delay_ms(16);
	Delay_us(5);
	Delay_ms(16);
	printf("\r\n RESET");

}



int _rsa_pub_dec_2048(unsigned char * priv_key,unsigned char * pub_key_n,unsigned char * out, unsigned char *in, size_t len,int padding)
{

	unsigned char buffer[512];
	unsigned char buffer_receive[256];

	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = SIZE_RSA_2048;
	buffer[3] = 0;
	buffer[4] = 0;
	send_data_arm7(buffer,5);
	delay_ms(DelayMS);

	memcpy(buffer+5,in,256);	
	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Set_RSA_CipherText_C;
	buffer[3] = 0x01;
	buffer[4] = 00;
	send_data_arm7(buffer,256+5);
	delay_ms(DelayMS);

	memcpy(buffer+5,pub_key_n,256);	
	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Set_RSA_Modulus_n;
	buffer[3] = 0x01;
	buffer[4] = 00;
	send_data_arm7(buffer,256+5);
	delay_ms(DelayMS);

	memcpy(buffer+5,priv_key,256);	
	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Set_RSA_PrivateKey_d;
	buffer[3] = 0x01;
	buffer[4] = 00;
	send_data_arm7(buffer,256+5);
	delay_ms(DelayMS);

	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Decrypt_RSA;
	buffer[3] = 0;
	buffer[4] = 0;
	send_data_arm7(buffer,5);
	delay_ms(5500);

	buffer[0] = SPI1_READ_DATA;
	buffer[1] = 0;
	buffer[2] = Get_RSA_PlainText_M;
	buffer[3] = 0x01;
	buffer[4] = 0;
	read_data_arm7(buffer,buffer_receive,256);

	memcpy(out,buffer_receive,256);	
}

int _rsa_pub_enc_2048(unsigned char * pub_key_n,unsigned char * pub_key_e,unsigned char * out, unsigned char *in, size_t len,int padding)
{

	unsigned char buffer[512];
	unsigned char buffer_receive[256];

	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = SIZE_RSA_2048;
	buffer[3] = 0;
	buffer[4] = 0;
	send_data_arm7(buffer,5);
	delay_ms(DelayMS);

	memcpy(buffer+5,in,256);	
	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Set_RSA_PlainText_M;
	buffer[3] = 0x01;
	buffer[4] = 00;
	send_data_arm7(buffer,256+5);
	delay_ms(DelayMS);

	memcpy(buffer+5,pub_key_n,256);	
	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Set_RSA_Modulus_n;
	buffer[3] = 0x01;
	buffer[4] = 00;
	send_data_arm7(buffer,256+5);
	delay_ms(DelayMS);

	memcpy(buffer+5,pub_key_e,256);	
	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Set_RSA_PublicExpo;
	buffer[3] = 0x01;
	buffer[4] = 00;
	send_data_arm7(buffer,256+5);
	delay_ms(DelayMS);

	buffer[0] = SPI1_WRITE_DATA;
	buffer[1] = 0;
	buffer[2] = Encrypt_RSA;
	buffer[3] = 0;
	buffer[4] = 0;
	send_data_arm7(buffer,5);
	delay_ms(64);
	delay_ms(64);

	buffer[0] = SPI1_READ_DATA;
	buffer[1] = 0;
	buffer[2] = Get_RSA_CipherText_C;
	buffer[3] = 0x01;
	buffer[4] = 0;
	read_data_arm7(buffer,buffer_receive,256);

	memcpy(out,buffer_receive,256);	
}


void TEST_RSA_ENCRYPT()
{
	unsigned char PlainText[256];
	unsigned char ModulusN[256];
	unsigned char PrivateKeyD[256];
	unsigned char CypherText[256];
	unsigned char PublicExpo[256];

	unsigned char ExpectedResult[256];	
	//PlainText
	hexstr2bytes("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011223344", PlainText);//RSA_msg
	//ModulusN
	hexstr2bytes("F748D8D98ED057CF398C437FEFC615D757D3F8ECE6F2C580AE0780768F9EC83AAA081FF09E5317ED6099C63FD15CFE11172F78908CD58C03AEC93A481FF50E172204AFEDFC1F16AFDB990AAB45BE190BC19259BD4A1BFCDFBE2A298B3C0E318F78A33919882328DACAC85CB35A0DE537B16376975217E5A5EAAF98266B588C2DBAFD0BE371C34989CB36E623D75EFFEDBE4A951A6840982BC279B30FCD41DAC87C0074D462F1012900B8973B46ADC7EAC01770DFC632EA967F9471E9789831F3A410730FF914348BE111863C13376301079756A147D80103CE9FA688A338E22B2D916CAD42D673C9D00F08214DE544F5DE812A9A949189078B2BDA14B28CA62F", ModulusN);//Modulus N
	//PulibcExpo
	hexstr2bytes("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001", PublicExpo);//RSA_expo

	rsa_pub_enc_2048(ModulusN,PublicExpo,CypherText,PlainText,256,0);

	hexstr2bytes("EE69099AFD9F99D6065D65E15F90B9237C16987D4872E2B994ED2B9E5685F9BA489AB936CC1E3DFD15B35FEE21536F8C2220AE43217D91D81C9ED01DE5BAEEF4EFC721D70D67B5166E43D82724F39BF0BD197C31E748518DEE63EC10987A08390B15CC4157677C54226A8B04B47684AEDD02B48C8ED48A44BD135397AC2869769B68C7D3BFACDB72AFCD7442C22517E044996CB68E0A311DF5D6D2D286372556F0193166CC364E654EF405DD22FBE584DBF60F0552960668FB69522C1B5264F194FAC9F35622E98227638FF28B910D8CC90E5011021212C96C64C85820877A7D1559235E99C32ABEF33D95E28E18CCA3442E6E3A432FFFEA10104A8EEE94C362", ExpectedResult);	
	if(memcmp(ExpectedResult,CypherText,256) == 0)
		printf("\r\n PASS RSA ENCRYPTION TEST");
	else
		printf("\r\n FAIL RSA ENCRYPTION TEST");
}

void TEST_RSA_DECRYPT()
{

	unsigned char PlainText[256];
	unsigned char ModulusN[256];

	unsigned char CypherText[256];
	unsigned char PrivateKeyD[256];	

	unsigned char ExpectedResult[256];	
	//ModulusN
	hexstr2bytes("AE45ED5601CEC6B8CC05F803935C674DDBE0D75C4C09FD7951FC6B0CAEC313A8DF39970C518BFFBA5ED68F3F0D7F22A4029D413F1AE07E4EBE9E4177CE23E7F5404B569E4EE1BDCF3C1FB03EF113802D4F855EB9B5134B5A7C8085ADCAE6FA2FA1417EC3763BE171B0C62B760EDE23C12AD92B980884C641F5A8FAC26BDAD4A03381A22FE1B754885094C82506D4019A535A286AFEB271BB9BA592DE18DCF600C2AEEAE56E02F7CF79FC14CF3BDC7CD84FEBBBF950CA90304B2219A7AA063AEFA2C3C1980E560CD64AFE779585B6107657B957857EFDE6010988AB7DE417FC88D8F384C4E6E72C3F943E0C31C0C4A5CC36F879D8A3AC9D7D59860EAADA6B83BB", ModulusN);//Modulus N
	//Cypher Text		
	hexstr2bytes("53EA5DC08CD260FB3B858567287FA91552C30B2FEBFBA213F0AE87702D068D19BAB07FE574523DFB42139D68C3C5AFEEE0BFE4CB7969CBF382B804D6E61396144E2D0E60741F8993C3014B58B9B1957A8BABCD23AF854F4C356FB1662AA72BFCC7E586559DC4280D160C126785A723EBEEBEFF71F11594440AAEF87D10793A8774A239D4A04C87FE1467B9DAF85208EC6C7255794A96CC29142F9A8BD418E3C1FD67344B0CD0829DF3B2BEC60253196293C6B34D3F75D32F213DD45C6273D505ADF4CCED1057CB758FC26AEEFA441255ED4E64C199EE075E7F16646182FDB464739B68AB5DAFF0E63E9552016824F054BF4D3C8C90A97BB6B6553284EB429FCC", CypherText);//Cypher Text	
	//PrivateKeyD		
	hexstr2bytes("056B04216FE5F354AC77250A4B6B0C8525A85C59B0BD80C56450A22D5F438E596A333AA875E291DD43F48CB88B9D5FC0D499F9FCD1C397F9AFC070CD9E398C8D19E61DB7C7410A6B2675DFBF5D345B804D201ADD502D5CE2DFCB091CE9997BBEBE57306F383E4D588103F036F7E85D1934D152A323E4A8DB451D6F4A5B1B0F102CC150E02FEEE2B88DEA4AD4C1BACCB24D84072D14E1D24A6771F7408EE30564FB86D4393A34BCF0B788501D193303F13A2284B001F0F649EAF79328D4AC5C430AB4414920A9460ED1B7BC40EC653E876D09ABC509AE45B525190116A0C26101848298509C1C3BF3A483E7274054E15E97075036E989F60932807B5257751E79", PrivateKeyD);//PrivateKeyD
	rsa_pub_dec_2048(PrivateKeyD,ModulusN,PlainText,CypherText,256,0);
	hexstr2bytes("009AEFF546462E50BFEC1DC191D5D0CE459069756F33635AD62317FFA3981D2B674ED6E83547E479CA90CEF1EB74CBA8F36004F73B477B159B4FE4F3B5BDA05E51D7C8C674C2B9BD2060C9574E661311F4AD7FFC4C0373F1D987505DE434A32DB898B0D167D188EB9645219D5222EB107A7FAAE431705E1A3DC8F47CD936B96A02D951E997199635E49B523FD01E1D4C00CBD551F395202F771007505E1DD48B7B04A82B892FE728E190B71E6D4128571C9BED19C06123DB3EEA1A4EC645419FC879B98F82B6563B7A2C6280DB9B0434A756502306E0B244459DD012CA7198A6300058121E70917B49F6402EE738A6C60BFEBD3CD130CDFB11392AB73DA9A8CA", ExpectedResult);//RSA_expo 

	if(memcmp(ExpectedResult,PlainText,256) == 0)
		printf("\r\n PASS RSA DECRYPTION TEST");
	else
		printf("\r\n FAIL RSA DECRYPTION TEST");

}
#ifdef CODE_DOWNLOAD
int GetSuperWirePermission(void)
{
	int i;
	int success = 1;
	unsigned int inst = 0;
	int PERM_TYPE = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	int j = 0;
	unsigned char temp_addr[2];
	int k = 0;
	unsigned char SUPER_WIRE_PW[16]  = { 0xC3,0x95,0xFA,0x2D,0x72,0x31,0x0B,0xE7,0x56,0xA9,0x06,0x18,0x78,0xCA,0x92,0x3F};
	//return;
	for(i = 0; i < 64; i++)
	{
		tx_data[i] = 0;
		rx_data[i] = 0;
	}
	for( k = 0; k < 10 ; k++)
	{
		j = 15;

		for(i = 0; i < 16 ;i++)
			tx_data[i] = SUPER_WIRE_PW[j--];

		//		tx_data[0] = 0x0C;	
		//		tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);		
		//		delay_ms(16);

		tspi_interface(cs, ADDR_NOR_W, RG_SUPER_WIRE_PW0 , NULL, NULL, NULL, NULL, tx_data, rx_data, 16);			

		tx_data[0] = 0x0;	
		tspi_interface(cs, ADDR_NOR_R, RG_PERM_GET_CTRL1 , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
		PRINTLOG("\r\n GetPermResult 0x%02x",rx_data[0]);
		if(rx_data[0] & (1<<6))
			break;
	}
	if(rx_data[0] & (1<<6))
	{
		PRINTLOG("\r\n SUCCESS TO GET RG_SUPER_WIRE_PW0");
	}
	else
	{
		PRINTLOG("\r\n NOT SUCCESS TO GET RG_SUPER_WIRE_PW0");
		success = 0;
	}
	return success;

}
int ReleasePermision()
{
	int success = 1;
	int i;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	int j = 0;
	unsigned char temp_addr[2];
	int k = 0;

	delay_us(5);
	endOP();
	//ReadStatusRegister();

	tx_data[0] = 0x0C;	
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);			

	//tx_data[0] = 0x0;	
	//tspi_interface(cs, ADDR_NOR_W, RG_PERM_GET_EE_RD_PRE_SP , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	//delay_ms(16);


	tx_data[0] = 0x0;	
	tspi_interface(cs, ADDR_NOR_W, RG_PERM_RELEASE , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	endOP();

	delay_us(5);
	tx_data[0] = 0;	
	tspi_interface(cs, ADDR_NOR_R, RG_PERM_GET_CTRL1 , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);			

	if(rx_data[0] != 0 )
	{
		PRINTLOG("\r\n MISS TO RELEASE PERMISSION 0x%02x", rx_data[0]);
		success = 0;

	}
	else
	{
		PRINTLOG("\r\n HIT TO RELEASE PERMISSION");

	}

	return success;

}

int eep_page_write(unsigned int msb, unsigned int lsb, unsigned char *data, unsigned char read_flag)
{
	int i;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	unsigned char rx_temp_buffer[64];	
	int j = 0;
	unsigned char temp_addr[2];
	int success = 1;
	for( i=0; i<64; i++)
	{
		tx_data[i] = 0; rx_data[i] = 0;
	}
	GetSuperWirePermission();


	//   PRINTLOG("\r\n call eep_page_write ");
	//RG_ST0_OPMODE -> ST0_MEM_TEST
	tx_data[0] = 0x0E;
	tspi_interface(cs, ADDR_NOR_W, RG_ST0_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x01;

	tspi_interface(cs, ADDR_NOR_W, RG_EET_CTRL, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);


	//RG_EET_OPMODE -> STEM_WRITE_MAIN_AUTO
	tx_data[0] = STEM_WRITE_MAIN_AUTO;//0xd


	tspi_interface(cs, ADDR_NOR_W, RG_EET_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	//RG_EET_BYOB_LEN -> 64Bytes set
	tx_data[0] = 64;
	tspi_interface(cs, ADDR_NOR_W, RG_EET_BYOB_LEN, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

	tx_data[0] = lsb;
	tx_data[1] = msb;
	tspi_interface(cs, ADDR_NOR_W, RG_EET_BYOB_ADDR_LSB, NULL, NULL, NULL, NULL, tx_data, rx_data, 2);


	//RG_MEM_TEST_OPMODE -> ST1_MEM_TEST_EE_WRRD_EN
#if 0
	tx_data[0] = ST1_MEM_TEST_EE_WRRD_EN;
#else
	tx_data[0] = ST1_MEM_TEST_RG_EEBUF_WR;
#endif
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_MEM_TEST_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);



	//RG_EEBUF100 -> 64bytes 0xff data write
	j = 63;
	//    for( i=0; i<64; i++)tx_data[i] = TV0E0002_PAT0[j--];
	for( i=0; i<64; i++)tx_data[i] = data[i];

	tspi_interface(cs, ADDR_NOR_W, RG_EEBUF100, NULL, NULL, NULL, NULL, tx_data, rx_data, 64);
	//tspi_interface(cs, ADDR_NOR_R, RG_EEBUF100, NULL, NULL, NULL, NULL, tx_data, rx_data, 64);	



	tx_data[0] = ST1_MEM_TEST_EE_WR_EN;
	tspi_interface(cs, ADDR_NOR_W, RG_ST1_MEM_TEST_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);




	delay_ms(8);

	if(read_flag == 1) 
	{

		tx_data[0] = ST1_MEM_TEST_STANDBY;
		tspi_interface(cs, ADDR_NOR_W, RG_ST1_MEM_TEST_OPMODE, NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

		temp_addr[0] = msb;
		temp_addr[1] = lsb;	
		tspi_interface(cs, 0x20, temp_addr, NULL, NULL, NULL, NULL, tx_data, rx_data, 64);
		memcpy(rx_temp_buffer,rx_data,64);
		delay_us(10);


	}
	endOP();
	delay_us(10);

	{
		//#if PRINTFMODE

		//#endif
		if(memcmp(data,rx_temp_buffer,64) != 0)
		{
			int temp2 = (msb << 8) | lsb;
			PRINTLOG("\r\n compare A_EEPROM and data");

			//#if PRINTFMODE
			printf("\r\n memcmp(data,rx_temp_buffer,64)  %d",memcmp(data,rx_temp_buffer,64) );
			PRINTLOG("\r\n FAIL TO WRITE addr %04x page number %d",temp2,temp2/64);

			PRINTLOG("\r\n WRITE DATA\r\n");
			printbyte(data,64);

			PRINTLOG("\r\n READ DATA\r\n");
			printbyte(rx_temp_buffer,64);
			//#endif

			PRINTLOG("\r\n================write data================");
			PRINTLOG("\r\n addr =%02x%02x",msb,lsb);
			PRINTLOG("\r\n spi_tx_data    :"); 
			for ( i=0; i<64; i++ )
			{ 
				if ( ( i !=0 ) & ( i % 16 == 0 ) )
					PRINTLOG("\n                 ");
				if( i % 4 == 0)
					PRINTLOG("|");
				PRINTLOG(" 0x%02x", data[i]); 
			} 	


			PRINTLOG("\r\n================read data================");
			PRINTLOG("\r\n addr =%02x%02x",msb,lsb);
			PRINTLOG("\r\n spi_rx_data    :"); //for ( i=0; i<64; i++ ){ if ( ( i !=0 ) & ( i % 16 == 0 ) ) PRINTLOG("\n                 "); PRINTLOG(" 0x%02x", rx_temp_buffer[i]); } 
			for ( i=0; i<64; i++ )
			{ 
				if ( ( i !=0 ) & ( i % 16 == 0 ) )
					PRINTLOG("\n                 ");
				if( i % 4 == 0)
					PRINTLOG("|");
				PRINTLOG(" 0x%02x", rx_temp_buffer[i] ); 
			} 	



			printf("\r\n=========================================================================");
			printf("\r\n==       FAIL TO WRITE   EEPROM                                 ==");
			printf("\r\n=========================================================================");

			success = 0;
		}
		else
		{
			//						PRINTLOG("\r\n 1.1 EMCU->EEPROM 1.2 EEPROM->RG_EEBUF SUCCESS");
			printf("\r\n=========================================================================");
			printf("\r\n==       SUCCESS TO WRITE   EEPROM                                     ==");
			printf("\r\n=========================================================================");
		}
	}
	ReleasePermision();
	return success;
}

#define CM0CODECNT  1024
void TestCM0Code()
{
const	unsigned int arr[CM0CODECNT][8] = {
	0x2000EB60, 0x00000221, 0x00000249, 0x0000024B, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x0000024F, 0x00000000, 0x00000000, 0x00000251, 0x00000253,
	0x00000229, 0x0000022D, 0x00000235, 0x00000239, 0x0000023D, 0x00000241, 0x00000245, 0x00000255,
	0x00000255, 0x00000255, 0x00000255, 0x00000000, 0x00000255, 0x00000255, 0x00000255, 0x00000255,
	0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255,
	0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255, 0x00000255,
	0xF802F000, 0xF865F000, 0xC830A00C, 0x18243808, 0x46A2182D, 0x46AB1E67, 0x465D4654, 0xD10142AC,
	0xF857F000, 0x3E0F467E, 0x46B6CC0F, 0x42332601, 0x1AFBD000, 0x46AB46A2, 0x47184333, 0x00005500,
	0x00005520, 0xD3023A10, 0xC178C878, 0x0752D8FA, 0xC830D301, 0xD501C130, 0x600C6804, 0x00004770,
	0x24002300, 0x26002500, 0xD3013A10, 0xD8FBC178, 0xD3000752, 0xD500C130, 0x4770600B, 0x2970B510,
	0xF003D102, 0xBD10FAF6, 0xD1022964, 0xFA86F003, 0x2978BD10, 0xF003D102, 0xBD10FADF, 0xD1022963,
	0xFDC3F003, 0x2973BD10, 0xF003D102, 0xBD10FDC6, 0xBD102000, 0xF003B51F, 0xF003FBD7, 0x0004FE43,
	0x21002000, 0xFEEAF003, 0x60601C40, 0xB510BD1F, 0xF003BD10, 0x4611FE62, 0xFFECF7FF, 0xFD01F000,
	0xFE7AF003, 0xF7FFB403, 0xBC03FFF2, 0xF891F000, 0x490CB430, 0x684A680C, 0x68106823, 0x601018C0,
	0x1D121D24, 0xD207428C, 0xD208428A, 0x604A600C, 0x0040BC30, 0x47700840, 0x3CDC000C, 0x000AE7F6,
	0xE7F33ADC, 0x2000C9F4, 0x4605B570, 0x4616460C, 0xCC0FE002, 0x3E10C50F, 0xD2FA2E10, 0xD3022E08,
	0xC503CC03, 0x2E043E08, 0xCC01D307, 0x1F36C501, 0x7821E003, 0x1C647029, 0x1E761C6D, 0xBD70D2F9,
	0x47804810, 0x47004810, 0x47004810, 0x47004810, 0x47004810, 0x47004810, 0x47004810, 0x47004810,
	0x47004810, 0x47004810, 0x4810E7FE, 0xE7FE4700, 0xE7FEE7FE, 0x0000E7FE, 0x490E480D, 0x4B0F4A0E,
	0x00004770, 0x00000CC7, 0x000000C1, 0x00000C21, 0x00000C2B, 0x00000C17, 0x00000C5F, 0x00000C61,
	0x00000CA7, 0x00000CA9, 0x00000CB3, 0x00000CBD, 0x2000CA60, 0x2000EB60, 0x2000CB60, 0x2000CB60,
	0x4604B570, 0xB2E0460D, 0xFD7DF000, 0xB570BD70, 0xF0004605, 0x4604FD82, 0xFD75F000, 0x4601BD70,
	0x43C02000, 0xB5104770, 0xB2E04604, 0xFD6BF000, 0xBF00BD10, 0x0000E7FE, 0x2100B508, 0xE0029100,
	0x1C499900, 0x21149100, 0x9A004341, 0xDCF74291, 0xB500BD08, 0xF7FF2064, 0xBD00FFEF, 0x4605B570,
	0x2006460E, 0x05092101, 0x20026188, 0xF7FF60C8, 0x2001FFF0, 0x18280700, 0x05092101, 0xF7FF6088,
	0x20D3FFE8, 0x05092101, 0xF7FF6048, 0x2400FFE2, 0x00A0E009, 0x08A95830, 0x22010089, 0x18890712,
	0x508800A2, 0x2C101C64, 0xBF00D3F3, 0x05002001, 0x07C06900, 0x28000FC0, 0x2000D0F8, 0x05092101,
	0x20016108, 0x60C86188, 0xE0072400, 0x008008A8, 0x07092101, 0x00A11840, 0x1C645840, 0xD3F52C10,
	0xB570BD70, 0x2400B092, 0xAD022620, 0x21192220, 0xF002A801, 0xBF00FCB8, 0x1E70E005, 0x99014606,
	0x55285C08, 0x2C201C64, 0xA902DBF7, 0x02C0201D, 0xFFA4F7FF, 0xBD70B012, 0x4605B570, 0x4616460C,
	0x46224633, 0xA0DF4629, 0xF8EAF003, 0x680048EA, 0x49E91980, 0x48E96008, 0x19006800, 0x600849E7,
	0x680048E7, 0x49E61940, 0x2C006008, 0xA0E5D103, 0xF8D6F003, 0xA0E5E002, 0xF8D2F003, 0x680148DE,
	0xF003A0E4, 0xA0F1F8CD, 0xF8CAF003, 0x48FBBD70, 0x600849FB, 0x608820A7, 0x68404608, 0x49F84770,
	0x47706848, 0x4605B570, 0x2400460E, 0xE004BF00, 0xA0F45D29, 0xF8B4F003, 0x42B41C64, 0xBD70DBF8,
	0x4605B570, 0x2400460E, 0xE004BF00, 0xA0EF5D29, 0xF8A6F003, 0x42B41C64, 0xBD70DBF8, 0x49EDB510,
	0xBF002000, 0x0082E007, 0x589A4BEB, 0x4CEB0083, 0x601A191B, 0x17CB1C40, 0x185B0F9B, 0x4283109B,
	0xBD10DCF1, 0x4603B5F8, 0x46042000, 0x0FAD17C5, 0x10AD192D, 0x088E00AD, 0x270100B6, 0x19F6073F,
	0x950019AD, 0xE003BF00, 0x5C249C00, 0x1C40541C, 0xDBF94290, 0xB5F0BDF8, 0x2620B0B9, 0x48D84FD8,
	0x90073020, 0x304048D6, 0x48D59006, 0x90053060, 0x308048D3, 0xA8299004, 0xA8219003, 0xAD199002,
	0x9001A811, 0x9000A809, 0x46392220, 0xF0039803, 0x2220FA73, 0x0209217F, 0xF7FF9803, 0x2220FFC3,
	0x980249C8, 0xFFBEF7FF, 0x49C62220, 0x46283120, 0xFFB8F7FF, 0x49C32220, 0x98013140, 0xFFB2F7FF,
	0x21FF2220, 0x980001C9, 0xFFACF7FF, 0xF0022020, 0x7828F88F, 0x404821FF, 0x46327028, 0x9803210A,
	0xF8D4F002, 0x210B4632, 0xF0029802, 0x4632F8CF, 0x4628210C, 0xF8CAF002, 0x21084632, 0xF0029801,
	0x4632F8C5, 0x98002109, 0xF8C0F002, 0x21584632, 0xF002A831, 0x4632FB20, 0xA8082157, 0xFAF2F002,
	0x78009808, 0xD1042800, 0xF003A0A7, 0x2401F809, 0x2400E003, 0xF003A0A9, 0x4620F803, 0xBDF0B039,
	0x4605B570, 0x2400460E, 0xE03CBF00, 0x21012007, 0x61880509, 0xF7FF200A, 0x2003FE8F, 0x05092101,
	0xBF006148, 0x05002001, 0x28016A80, 0x2000D1FA, 0x05092101, 0x499E6288, 0x46206A09, 0x0F9217E2,
	0x10921812, 0x50A90092, 0x6A494999, 0x0F9217E2, 0x10921812, 0x19520092, 0x49956051, 0x17E26A89,
	0x18120F92, 0x00921092, 0x60911952, 0x6AC94990, 0x0F9217E2, 0x10921812, 0x19520092, 0x200160D1,
	0x61480501, 0x42B43410, 0xBD70DBC0, 0xB5104770, 0x7B014888, 0xF002A088, 0x4886FFB3, 0xA08A7C01,
	0xFFAEF002, 0x7D014883, 0xF002A08B, 0x4881FFA9, 0xA08D7E01, 0xFFA4F002, 0x7F01487E, 0xF002A08E,
	0xBD10FF9F, 0x4605B570, 0x24002610, 0x5D29E005, 0xF002A08D, 0x1C60FF95, 0x42B4B2C4, 0xA08CDBF7,
	0xFF8EF002, 0xB510BD70, 0x20074604, 0x05092101, 0x212061C8, 0xF7FF4620, 0x2000FF83, 0x05092101,
	0x48846208, 0xFE18F7FF, 0x21012000, 0x62480509, 0x61882001, 0x61C8201C, 0xB530BD10, 0x20004603,
	0x19544D7D, 0xE002BF00, 0x54255C1D, 0x42881C40, 0xBD30DBFA, 0xB088B570, 0x25004606, 0x20002400,
	0x90059004, 0x90079006, 0x21012007, 0x61C80509, 0x46682110, 0xFF54F7FF, 0xE013BF00, 0xA8042110,
	0xFF4EF7FF, 0xE00A2400, 0x466900A0, 0x00A15808, 0x5851AA04, 0x00A14048, 0x5050466A, 0x2C041C64,
	0x1C6DDBF2, 0xDBE92D0F, 0x21012000, 0x62080509, 0x20016248, 0x22106188, 0x46304669, 0xF94CF003,
	0xBD70B008, 0x49480A0D, 0x6E432054, 0x203A2074, 0x20206425, 0x53494D20, 0x6E432053, 0x203A2074,
	0x20206425, 0x4F542020, 0x204C4154, 0x20746E43, 0x6425203A, 0x00000000, 0x2000C00C, 0x2000C010,
	0x2000C014, 0x50200A0D, 0x00535341, 0x46200A0D, 0x004C4941, 0x2D2D0A0D, 0x2D2D2D2D, 0x2D2D2D2D,
	0x45542D2D, 0x43205453, 0x2520544E, 0x2D2D2D64, 0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D,
	0x2D2D2D2D, 0x2D2D2D2D, 0x00000000, 0x2D2D0A0D, 0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D,
	0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D, 0x2D2D2D2D, 0x002D2D2D, 0x0001E848,
	0x40002400, 0x78323025, 0x00000000, 0x78323025, 0x0000002C, 0x000011FC, 0x00003F88, 0x2000A000,
	0x10007F00, 0x00007F20, 0x45200A0D, 0x41534443, 0x35325020, 0x4B4F2036, 0x00000000, 0x45200A0D,
	0x41534443, 0x35325020, 0x41462036, 0x00004C49, 0x00100300, 0x40002200, 0x53200A0D, 0x52535053,
	0x32302520, 0x00000078, 0x53200A0D, 0x50435053, 0x25205253, 0x00783230, 0x53200A0D, 0x4D495053,
	0x25204353, 0x00783230, 0x53200A0D, 0x49525053, 0x30252053, 0x00007832, 0x53200A0D, 0x494D5053,
	0x30252053, 0x00007832, 0x78322E25, 0x00000000, 0x0000000A, 0x00001DB0, 0x2000BC00, 0x2500B0A8,
	0x2000BF00, 0x26209027, 0xBF002400, 0xBF00BF00, 0xBF00BF00, 0xBF00BF00, 0x2000E11D, 0x2105900A,
	0xF002A825, 0x900AF8B2, 0x2800980A, 0xE112D100, 0x7D84A820, 0x7E007DC7, 0x0239900B, 0x4301980B,
	0x2CA7460E, 0xA80DD103, 0xFEBDF7FF, 0x2CA8E103, 0x2110D112, 0xF002A80D, 0x2064FA11, 0xFCDCF7FF,
	0xF86CF002, 0xF7FF2064, 0x2000FCD7, 0xF826F002, 0xF7FF2064, 0xE0EEFCD1, 0xD1052CA0, 0xF0022020,
	0x2020FB45, 0xE0E69027, 0xD1052CA1, 0xF0022042, 0x2042FB3D, 0xE0DE9027, 0xD1052CA2, 0xF0012020,
	0x2020FE77, 0xE0D69027, 0xD1052CA3, 0xF0012042, 0x2042FE6F, 0xE0CE9027, 0xD1072CA4, 0x300120FF,
	0xFA47F002, 0x300120FF, 0xE0C49027, 0xD11E2C08, 0x900948D1, 0x900848D1, 0x98092100, 0x22AA6001,
	0xA81D2120, 0xF859F003, 0x02A122AA, 0xF0039808, 0xBF30F854, 0xE0002500, 0x2D201C6D, 0x2500DBFC,
	0x1C6DE000, 0x03402001, 0xDBFA4285, 0x2C09BF00, 0x48C1D11F, 0x48C19009, 0x22AA9008, 0xA81D2120,
	0xF83BF003, 0x210122AA, 0x98080349, 0xF835F003, 0x98092104, 0xBF306001, 0xE0002500, 0x2D201C6D,
	0x2500DBFC, 0x1C6DE000, 0x03402001, 0xDBFA4285, 0x2C12BF00, 0xA80DD113, 0xFE35F7FF, 0xA80DE002,
	0xFE31F7FF, 0x49AE2220, 0xF002A80D, 0x2800FF85, 0x2220D0F5, 0xA80D2106, 0xFADCF002, 0x2C23E06B,
	0x2000D126, 0xA9029001, 0xF00148A6, 0x2220FDE3, 0xA80C2119, 0xF957F002, 0xA8022220, 0xF002990C,
	0x2800FF6B, 0x20ABD101, 0x21019001, 0xF002A801, 0x2064F965, 0xFC30F7FF, 0xFFC0F001, 0xF7FF2064,
	0x2000FC2B, 0xFF7AF001, 0xF7FF2064, 0xE042FC25, 0xD1022C1A, 0xFC75F7FF, 0xA820E03D, 0x28617D00,
	0x2001D11A, 0x46319009, 0xF002488F, 0x2064F95F, 0xFC12F7FF, 0xFFA2F001, 0xD1022E00, 0x90092000,
	0x22009E27, 0x48884631, 0xFDF7F7FF, 0x46214632, 0xF0024885, 0xE01DF8FD, 0x7D00A820, 0xD1192871,
	0x900920FF, 0x46214632, 0xF002A80C, 0x4631F90C, 0xF002980C, 0x2064F923, 0xFBEEF7FF, 0xFF7EF001,
	0xF7FF2064, 0x2000FBE9, 0xFF38F001, 0xF7FF2064, 0xBF00FBE3, 0xE6E0BF00, 0x2600B5FE, 0x90012000,
	0x27002500, 0xE020BF00, 0xF947F000, 0x4621B2C4, 0xF002A06E, 0x2C30FD35, 0x2C39DB04, 0x4620DC02,
	0xB2C73830, 0xDB042C41, 0xDC022C46, 0x38374620, 0x2C61B2C7, 0x2C66DB04, 0x4620DC02, 0xB2C73857,
	0x55474668, 0x19C60130, 0x2D021C6D, 0x4630DBDC, 0xB510BDFE, 0x05002001, 0x21026B40, 0x04C94308,
	0x20036348, 0xF8A0F000, 0xF0002004, 0x4858F89D, 0x21206800, 0x49564308, 0x20006008, 0x60080509,
	0xBF00BD10, 0xBF00BF00, 0xBF00BF00, 0xBF00BF00, 0xBF00BF00, 0xBF00BF00, 0x494E2000, 0xF0016008,
	0xF000FEF2, 0x2002F8C5, 0x634804C1, 0x00C0207D, 0xFB82F7FF, 0x49462000, 0x05096008, 0x20016008,
	0x61084943, 0x60082000, 0x0289201C, 0x200161C8, 0xF86AF000, 0xF0002002, 0x2003F867, 0xF864F000,
	0xF0002004, 0xF7FFF861, 0x207DFC29, 0xF7FF00C0, 0xF7FFFB63, 0xB510FE53, 0xF002A037, 0xBD10FCC1,
	0xA039B510, 0xFCBCF002, 0xB500BD10, 0x68004831, 0x40482101, 0x6008492F, 0x68004608, 0xD0062800,
	0xF7FF2064, 0x2004FB49, 0x63480481, 0x2064E006, 0xFB42F7FF, 0x21012000, 0x63480509, 0x4770BD00,
	0x4824B500, 0x21016800, 0x49224048, 0x20206008, 0x6008491F, 0x60080641, 0x6800481E, 0xD0072800,
	0xF7FF2064, 0x2006FB29, 0x05092101, 0xE0056348, 0xF7FF2064, 0x2002FB21, 0x634804C1, 0x21012000,
	0x60080789, 0x4770BD00, 0xA01BB510, 0xFC78F002, 0xB510BD10, 0xF002A01C, 0xBD10FC73, 0xA01EB510,
	0xFC6EF002, 0x4770BD10, 0x0ED206C2, 0x40912101, 0x60114A1E, 0x00004770, 0xE000ED10, 0x20008000,
	0x000054A8, 0x000055B8, 0x2000C034, 0x00006325, 0x40000400, 0x2000C018, 0x65746E49, 0x70757272,
	0x20646574, 0x00000A31, 0x65746E49, 0x70757272, 0x20646574, 0x00000A30, 0x65746E49, 0x70757272,
	0x20646574, 0x00000A35, 0x65746E49, 0x70757272, 0x20646574, 0x00000A36, 0x64726148, 0x6C756146,
	0x63784574, 0x69747065, 0x000A6E6F, 0xE000E100, 0x24E1B5F8, 0x46210364, 0xF0024820, 0x4605FEA7,
	0x481E4621, 0xFEA2F002, 0x00F0460E, 0xF0021121, 0x4604FE9D, 0x07E10860, 0x18470FC9, 0x49182000,
	0x63886308, 0x62886248, 0x630862C8, 0x46086348, 0x62876245, 0x62C82000, 0x62C82070, 0x63084811,
	0x63482002, 0xBF00BDF8, 0x6989490D, 0x40112220, 0xD0F92920, 0x6008490A, 0xBF004770, 0x69804808,
	0x40082110, 0xD0F92810, 0x68004805, 0x4770B2C0, 0x2004B500, 0xFFE7F7FF, 0x0000BD00, 0x01194000,
	0x40002000, 0x00000301, 0x68084601, 0x60014770, 0x47704770, 0x4604B5F8, 0x4616460D, 0x2000461F,
	0x04309000, 0x0409210F, 0x02294008, 0x0212220F, 0x43084011, 0x0F090721, 0x06394308, 0x40110412,
	0x90004308, 0x990048FE, 0xFFE1F7FF, 0xB510BDF8, 0x300C48FB, 0xFFD8F7FF, 0x03E04604, 0xBD100FC0,
	0xB081B5FF, 0x460E4605, 0x24014617, 0x1E7007E4, 0xBF009000, 0xFFEBF7FF, 0xD1FB2800, 0x43284620,
	0x98004604, 0x43040200, 0x218001F8, 0x43044008, 0x0780980A, 0x400805C9, 0x98044304, 0x10490740,
	0x43044008, 0x0640980C, 0x40081109, 0x980D4304, 0x10490600, 0x43044008, 0x0700980B, 0x40080109,
	0x46214304, 0x1D0048DE, 0xFFA1F7FF, 0xBDF0B005, 0x4603B5F7, 0x5D1400DC, 0x462017E1, 0x020C0E06,
	0x02004334, 0x00DC4621, 0x5D141C64, 0x432017E5, 0x0E064329, 0x4334020C, 0x46210200, 0x1CA400DC,
	0x17E55D14, 0x43294320, 0x020C0E06, 0x02004334, 0x00DC4621, 0x5D141CE4, 0x432017E5, 0x0E064329,
	0x4334020C, 0x46210200, 0x1D2400DC, 0x17E55D14, 0x43294320, 0x020C0E06, 0x02004334, 0x00DC4621,
	0x5D141D64, 0x432017E5, 0x0E064329, 0x4334020C, 0x46210200, 0x1DA400DC, 0x17E55D14, 0x43294320,
	0x020C0E06, 0x02004334, 0x00DC4621, 0x5D141DE4, 0x432017E5, 0x00DD4329, 0x19649C01, 0xBDFEC403,
	0xB0FFB5F3, 0x4604B0B8, 0xE0052700, 0x4638A902, 0xF7FF9AB8, 0x1C7FFF9D, 0xDBF72F10, 0xE0042710,
	0x4638A902, 0xFEFAF000, 0x2F501C7F, 0x6861DBF8, 0x91B56820, 0x68E190B4, 0x91B368A0, 0x696190B2,
	0x91B16920, 0x69E190B0, 0x91AF69A0, 0x6A6190AE, 0x91AD6A20, 0x6AE290AC, 0x92AB6AA0, 0x6B6190AA,
	0x91A96B20, 0x6BE190A8, 0x91A76BA0, 0x270090A6, 0x220EE3BB, 0x99AD2300, 0xF00098AC, 0x4605FEB7,
	0x2212460E, 0x99AD2300, 0xF00098AC, 0x4632FEAF, 0x4046462E, 0x404D4615, 0x23002229, 0x98AC99AD,
	0xFEA4F000, 0x404D4046, 0x98A699A7, 0x414D1836, 0x98A899A9, 0x90009101, 0x9AAA9BAB, 0x98AC99AD,
	0xFE61F000, 0x414D1833, 0x4A7E00F9, 0xCA061852, 0x46154628, 0x4168185A, 0xAB0200F9, 0x680B1859,
	0x18D26849, 0x92A44141, 0x221C91A5, 0x99B52300, 0xF00098B4, 0x4605FE7B, 0x2222460E, 0x99B52300,
	0xF00098B4, 0x4632FE73, 0x4046462E, 0x404D4615, 0x23002227, 0x98B499B5, 0xFE68F000, 0x404D4046,
	0x98B099B1, 0x90009101, 0x9AB29BB3, 0x98B499B5, 0xFE40F000, 0x414D1830, 0x90A295A3, 0x9AAF9BAE,
	0x98A599A4, 0x41421859, 0x91AE92AF, 0x9AA59BA3, 0x98A299A4, 0x415A1808, 0x90A692A7, 0x2300220E,
	0x98AE99AF, 0xFE42F000, 0x460E4605, 0x23002212, 0x98AE99AF, 0xFE3AF000, 0x462E4632, 0x46154046,
	0x2229404D, 0x99AF2300, 0xF00098AE, 0x4046FE2F, 0x99A9404D, 0x183698A8, 0x99AB414D, 0x910198AA,
	0x9BAD9000, 0x99AF9AAC, 0xF00098AE, 0x1833FDEC, 0x1C79414D, 0x4A4300C9, 0x680A1851, 0x46286849,
	0x1899460D, 0x1C7A4168, 0xAB0200D2, 0x6813189A, 0x18C96852, 0x92A54142, 0x221C91A4, 0x99A72300,
	0xF00098A6, 0x4605FE03, 0x2222460E, 0x99A72300, 0xF00098A6, 0x4632FDFB, 0x4046462E, 0x404D4615,
	0x23002227, 0x98A699A7, 0xFDF0F000, 0x404D4046, 0x98B299B3, 0x90009101, 0x9AB49BB5, 0x98A699A7,
	0xFDC8F000, 0x414D1830, 0x90A295A3, 0x9AA59BB0, 0x98A499B1, 0x41511818, 0x90B091B1, 0x9AA49BA2,
	0x98A599A3, 0x414818D2, 0x90A992A8, 0x2300220E, 0x98B099B1, 0xFDCAF000, 0x460E4605, 0x23002212,
	0x98B099B1, 0xFDC2F000, 0x462E4632, 0x46154046, 0x2229404D, 0x99B12300, 0xF00098B0, 0x4046FDB7,
	0x99AB404D, 0x183698AA, 0x99AD414D, 0x910198AC, 0x9BAF9000, 0x99B19AAE, 0xF00098B0, 0x1832FD74,
	0x41484628, 0x00C91CB9, 0x185B4B06, 0x1852CB0A, 0x1CB94158, 0xAB0200C9, 0x680B1859, 0xE0036849,
	0x40002100, 0x00005188, 0x414118D2, 0x91A592A4, 0x2300221C, 0x98A899A9, 0xFD88F000, 0x460E4605,
	0x23002222, 0x98A899A9, 0xFD80F000, 0x462E4632, 0x46154046, 0x2227404D, 0x99A92300, 0xF00098A8,
	0x4046FD75, 0x99B5404D, 0x910198B4, 0x9BA79000, 0x99A99AA6, 0xF00098A8, 0x1830FD4D, 0x95A3414D,
	0x9BB290A2, 0x99A59AB3, 0x181898A4, 0x92B3414A, 0x9BA390B2, 0x99A59AA4, 0x181098A2, 0x91AB4159,
	0x220E90AA, 0x99B32300, 0xF00098B2, 0x4605FD4F, 0x2212460E, 0x99B32300, 0xF00098B2, 0x4632FD47,
	0x4046462E, 0x404D4615, 0x23002229, 0x98B299B3, 0xFD3CF000, 0x404D4046, 0x98AC99AD, 0x414D1836,
	0x98AE99AF, 0x90009101, 0x9AB09BB1, 0x98B299B3, 0xFCF9F000, 0x414D1833, 0x00C91CF9, 0x18524AFE,
	0x4628CA06, 0x41501859, 0x00D21CFA, 0x189BAB02, 0x1889CB0C, 0x91A44158, 0x221C90A5, 0x99AB2300,
	0xF00098AA, 0x4605FD13, 0x2222460E, 0x99AB2300, 0xF00098AA, 0x4632FD0B, 0x4046462E, 0x404D4615,
	0x23002227, 0x98AA99AB, 0xFD00F000, 0x404D4046, 0x98A699A7, 0x90009101, 0x9AA89BA9, 0x98AA99AB,
	0xFCD8F000, 0x414D1830, 0x90A295A3, 0x9AB59BB4, 0x98A599A4, 0x41421859, 0x91B492B5, 0x9AA49BA3,
	0x98A599A2, 0x41581852, 0x90AD92AC, 0x2300220E, 0x98B499B5, 0xFCDAF000, 0x460E4605, 0x23002212,
	0x98B499B5, 0xFCD2F000, 0x462E4632, 0x46154046, 0x2229404D, 0x99B52300, 0xF00098B4, 0x4046FCC7,
	0x99AE404D, 0x187698AF, 0x99B14145, 0x910198B0, 0x9BB39000, 0x99B59AB2, 0xF00098B4, 0x1833FC84,
	0x1D39414D, 0x4AC400C9, 0xCA061852, 0x46154628, 0x4168185A, 0x00C91D39, 0x185BAB02, 0x1852CB0A,
	0x92A44158, 0x221C90A5, 0x99AD2300, 0xF00098AC, 0x4605FC9D, 0x2222460E, 0x99AD2300, 0xF00098AC,
	0x4632FC95, 0x4046462E, 0x404D4615, 0x23002227, 0x98AC99AD, 0xFC8AF000, 0x404D4046, 0x98A899A9,
	0x90009101, 0x9AAA9BAB, 0x98AC99AD, 0xFC62F000, 0x414D1830, 0x90A295A3, 0xC823A8A4, 0x18289AA7,
	0x92A7414A, 0x9DA390A6, 0x9AA49BA5, 0x181198A2, 0x41684618, 0x90AF91AE, 0x2300220E, 0x98A699A7,
	0xFC64F000, 0x460E4605, 0x23002212, 0x98A699A7, 0xFC5CF000, 0x462E4632, 0x46154046, 0x2229404D,
	0x99A72300, 0xF00098A6, 0x4046FC51, 0x99B0404D, 0x187698B1, 0x99B34145, 0x910198B2, 0x9BB59000,
	0x99A79AB4, 0xF00098A6, 0x1832FC0E, 0x41484628, 0x00C91D79, 0x18594B88, 0x6849680B, 0x414818D2,
	0x00C91D79, 0x185BAB02, 0x1852CB0A, 0x92A44158, 0x221C90A5, 0x99AF2300, 0xF00098AE, 0x4605FC27,
	0x2222460E, 0x99AF2300, 0xF00098AE, 0x4632FC1F, 0x4046462E, 0x404D4615, 0x23002227, 0x98AE99AF,
	0xFC14F000, 0x404D4046, 0x98AA99AB, 0x90009101, 0x9AAC9BAD, 0x98AE99AF, 0xFBECF000, 0x414D1830,
	0x90A295A3, 0x9AA49DA8, 0x98A599A9, 0x414118AA, 0x91A992A8, 0x9AA29BA3, 0x98A599A4, 0x4158188A,
	0x90B192B0, 0x2300220E, 0x98A899A9, 0xFBEEF000, 0x460E4605, 0x23002212, 0x98A899A9, 0xFBE6F000,
	0x462E4632, 0x46154046, 0x2229404D, 0x99A92300, 0xF00098A8, 0x4046FBDB, 0x99B2404D, 0x187698B3,
	0x99B54145, 0x910198B4, 0x9BA79000, 0x99A99AA6, 0xF00098A8, 0x1832FB98, 0x41484628, 0x00C91DB9,
	0x18594B4D, 0x6849680B, 0x414818D2, 0x00C91DB9, 0x1859AB02, 0x6849680B, 0x414818D2, 0x90A592A4,
	0x2300221C, 0x98B099B1, 0xFBB0F000, 0x460E4605, 0x23002222, 0x98B099B1, 0xFBA8F000, 0x462E4632,
	0x46154046, 0x2227404D, 0x99B12300, 0xF00098B0, 0x4046FB9D, 0x99AD404D, 0x910198AC, 0x9BAF9000,
	0x99B19AAE, 0xF00098B0, 0x1830FB75, 0x95A3414D, 0x9BAA90A2, 0x99AB9AA5, 0x181898A4, 0x91AB4151,
	0x9BA390AA, 0x99A59AA2, 0x188098A4, 0x91B34159, 0x220E90B2, 0x99AB2300, 0xF00098AA, 0x4605FB77,
	0x2212460E, 0x99AB2300, 0xF00098AA, 0x4632FB6F, 0x4046462E, 0x404D4615, 0x23002229, 0x98AA99AB,
	0xFB64F000, 0x404D4046, 0x98B599B4, 0x41451876, 0x98A699A7, 0x90009101, 0x9AA89BA9, 0x98AA99AB,
	0xFB21F000, 0x414D1833, 0x00C91DF9, 0x18514A12, 0x6849680A, 0x460D4628, 0x41681899, 0x00D21DFA,
	0x189AAB02, 0x68526813, 0x414218C9, 0x91A492A5, 0x2300221C, 0x98B299B3, 0xFB38F000, 0x460E4605,
	0x23002222, 0x98B299B3, 0xFB30F000, 0x462E4632, 0x46154046, 0xE001404D, 0x00005188, 0x23002227,
	0x98B299B3, 0xFB22F000, 0x404D4046, 0x98AE99AF, 0x90009101, 0x9AB09BB1, 0x98B299B3, 0xFAFAF000,
	0x414D1830, 0x90A295A3, 0x9AA49DAC, 0x98AD99A5, 0x414118AA, 0x91AD92AC, 0x9AA59BA3, 0x98A499A2,
	0x415A1840, 0x90B492B5, 0x2F503708, 0xE440DA00, 0x68626825, 0x98B499B5, 0x414A1828, 0x60206062,
	0x68E268A5, 0x98B299B3, 0x414A1828, 0x60A060E2, 0x69626925, 0x98B099B1, 0x414A1828, 0x61206162,
	0x69E269A5, 0x98AE99AF, 0x414A1828, 0x61A061E2, 0x6A626A25, 0x98AC99AD, 0x414A1828, 0x62206262,
	0x6AE26AA5, 0x98AA99AB, 0x414A1828, 0x62A062E2, 0x6B626B25, 0x98A899A9, 0x414A1828, 0x63206362,
	0x6BE26BA5, 0x98A699A7, 0x414A1828, 0x63A063E2, 0x2105BF00, 0xA80201C9, 0xF966F002, 0xB03AB07F,
	0xB570BDF0, 0x46254604, 0x48FB49FA, 0x60686029, 0x48FB49FA, 0x60E860A9, 0x48FB49FA, 0x61686129,
	0x49FB48FA, 0x61A861E9, 0x48FB49FA, 0x62686229, 0x49FB48FA, 0x62A862E9, 0x49FB48FA, 0x63286369,
	0x48FB49FA, 0x63E863A9, 0x64E92100, 0x646964A9, 0x21806429, 0x30504628, 0xF936F002, 0xB570BD70,
	0x46254604, 0x48F449F3, 0x60686029, 0x48F449F3, 0x60E860A9, 0x48F449F3, 0x61686129, 0x49F448F3,
	0x61A861E9, 0x48F449F3, 0x62686229, 0x49F448F3, 0x62A862E9, 0x49F448F3, 0x63286369, 0x48F449F3,
	0x63E863A9, 0x64E92100, 0x646964A9, 0x21806429, 0x30504628, 0xF908F002, 0xB5F7BD70, 0x4607B084,
	0x463C4615, 0x05806C20, 0x90030E40, 0x6C2000E9, 0x00E91840, 0x42886420, 0x6C60D210, 0x64601C40,
	0xD1072800, 0x1C406CA0, 0x280064A0, 0x6CE0D102, 0x64E01C40, 0x6C600F69, 0x64611841, 0x98032180,
	0x90021A08, 0x42859802, 0x4621D31B, 0x9A033150, 0x9A021888, 0xF0029905, 0x4621F86F, 0x46203150,
	0xFB2EF7FF, 0xE0059E02, 0x19819805, 0xF7FF4620, 0x3680FB27, 0x307F4630, 0xD3F542A8, 0x90032000,
	0x2600E000, 0x98051BAA, 0x46201981, 0x9B033050, 0x900118C0, 0xF850F002, 0xBDF0B007, 0xB0A5B5F3,
	0x90249825, 0x46072000, 0x90014604, 0x90039002, 0x9824BF00, 0x46686C04, 0x0A2477C4, 0x0A247784,
	0x0A247744, 0x98247704, 0x46686C44, 0x0A2476C4, 0x0A247684, 0x0A247644, 0x98247604, 0x46686C84,
	0x0A2475C4, 0x0A247584, 0x0A247544, 0x98247504, 0x46686CC4, 0x0A2474C4, 0x0A247484, 0x0A247444,
	0x98247404, 0x05806C00, 0x90030E40, 0x28709803, 0x2170D203, 0x1A089803, 0x21F0E002, 0x1A089803,
	0x49A49002, 0x98249A02, 0xFF67F7FF, 0xA9042210, 0xF7FF9824, 0x2000FF62, 0x90014607, 0x9801E041,
	0x982400C1, 0xC9601841, 0x98261DF9, 0x06325445, 0x43100A28, 0x46051236, 0x98261DB9, 0x06325445,
	0x43100A28, 0x46051236, 0x98261D79, 0x06325445, 0x43100A28, 0x46051236, 0x98261D39, 0x06325445,
	0x43100A28, 0x46051236, 0x98261CF9, 0x06325445, 0x43100A28, 0x46051236, 0x98261CB9, 0x06325445,
	0x43100A28, 0x46051236, 0x98261C79, 0x06325445, 0x43100A28, 0x98264605, 0x980155C5, 0x90011C40,
	0x98013708, 0xDBBA2808, 0x982421D0, 0xF81CF002, 0xBDF0B027, 0xB090B570, 0x460D4604, 0x46694626,
	0xF7FF4630, 0x2230FF5B, 0x46284669, 0xFFA4F001, 0x46682140, 0xF808F002, 0xBD70B010, 0x4604B51F,
	0x23012000, 0x90029001, 0x90039300, 0x46024603, 0xF7FF4621, 0xBD1FF9C5, 0x4604B51F, 0x90002000,
	0x90029001, 0x46024603, 0x90034621, 0xF9B8F7FF, 0xB510BD1F, 0x46212401, 0xF7FF485F, 0xBD10F988,
	0x4604B510, 0x485C4621, 0xF7FF1F00, 0x485AF980, 0xF7FF3808, 0xBD10FFEE, 0x461CB57F, 0x26009D08,
	0x02521C6A, 0x18D24B55, 0x46221B10, 0xF0019900, 0x1C68FF63, 0x49510240, 0x20AB1846, 0xBD7F7030,
	0x461CB57F, 0x1C6A9D08, 0x4B4C0252, 0x1B1118D2, 0x98004622, 0xFF50F001, 0xB57FBD7F, 0x9D08461C,
	0x4B46026A, 0x462218D0, 0xF0019900, 0xBD7FFF45, 0x461CB57F, 0x026A9D08, 0x18D14B40, 0x98004622,
	0xFF3AF001, 0xB5F0BD7F, 0x02664604, 0x19856898, 0xE0052000, 0x18AF5C0E, 0x3F201A3F, 0x1C4077FE,
	0xDBF74290, 0xB5F0BDF0, 0x024E4604, 0x19856898, 0xE0052000, 0x18A75C2E, 0x3F201A3F, 0x1C4077FE,
	0xDBF74290, 0xB510BDF0, 0x1D00482B, 0xF91CF7FF, 0xB530BD10, 0x460B4602, 0x18C44610, 0xE0051E61,
	0x780D7804, 0x700C7005, 0x1E491C40, 0xD3F74288, 0x0000BD30, 0xF3BCC908, 0x6A09E667, 0x84CAA73B,
	0xBB67AE85, 0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A, 0xADE682D1, 0x510E527F, 0x2B3E6C1F,
	0x9B05688C, 0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19, 0xC1059ED8, 0xCBBB9D5D, 0x367CD507,
	0x629A292A, 0x3070DD17, 0x9159015A, 0xF70E5939, 0x152FECD8, 0xFFC00B31, 0x67332667, 0x68581511,
	0x8EB44A87, 0x64F98FA7, 0xDB0C2E0D, 0xBEFA4FA4, 0x47B5481D, 0x00005408, 0x40002108, 0x20008000,
	0xF7FFB510, 0xBF00FF36, 0xF8E1F7FF, 0xD1FB2800, 0xFF99F7FF, 0x40084978, 0xB570BD10, 0x460D4604,
	0x28007820, 0x1E6AD108, 0x46201C61, 0xFE54F001, 0xD1012800, 0xBD702001, 0xE7FC2000, 0xB082B57F,
	0x9E0A461D, 0x24009503, 0x2E00E018, 0x462BD006, 0xA8029400, 0xF7FFC807, 0xE005FF1F, 0x9400462B,
	0xC807A802, 0xFF39F7FF, 0x07092101, 0x40089804, 0xD1022800, 0x19409802, 0x1C649002, 0xD3E42C06,
	0xB0062000, 0xB5F0BD70, 0x4604B41F, 0x9F0B460D, 0x46219E0A, 0x9B024628, 0x9A034019, 0x43E24010,
	0x403243EB, 0x4051403B, 0x405A4602, 0x46114608, 0xBDF0B005, 0xB41FB5F0, 0x40149C00, 0x401D9D01,
	0x98009E0A, 0x9F0B4030, 0x40399901, 0x4621460E, 0x46284041, 0x463D4070, 0x40149C0A, 0x4061401D,
	0x406C4604, 0x46214608, 0xBDF0B005, 0xB41FB5F0, 0x46209C00, 0x46399F01, 0xF0019A02, 0x4605FC0E,
	0x2140460E, 0x1A0A9802, 0x46209C00, 0x46399F01, 0xFBF3F001, 0x43314328, 0xBDF0B005, 0xB083B5F3,
	0x1E809803, 0x980400C1, 0x22131840, 0x68042300, 0x46206841, 0xFFDAF7FF, 0x460D4604, 0x1E809803,
	0x980400C1, 0x680E1841, 0x223D6849, 0x46302300, 0xFFCCF7FF, 0x404D4044, 0x1E809803, 0x980400C1,
	0xC9031841, 0x0980068A, 0x11894310, 0x404D4044, 0x1FC09803, 0x980400C1, 0x68021840, 0x46216840,
	0x188F462C, 0x98034144, 0x00C1380F, 0x18409804, 0x23002201, 0x68416805, 0xF7FF4628, 0x4605FFA7,
	0x9803460E, 0x00C1380F, 0x18409804, 0x2208C803, 0x91012300, 0xF7FF9000, 0x4045FF99, 0x9803404E,
	0x00C1380F, 0x18419804, 0x064AC903, 0x431009C0, 0x404511C9, 0x1979404E, 0x98034174, 0x00C23810,
	0x18829804, 0x1808CA05, 0x99034154, 0x990400CA, 0xC1111889, 0xBDF0B005, 0x0000FFF0, 0x2A014602,
	0x2A03D002, 0xE013D115, 0x60084864, 0x60484864, 0x60884864, 0x60C84864, 0x61084864, 0x61484864,
	0x61882000, 0x300120FF, 0x200061C8, 0xE0026208, 0x2001E001, 0xBF004770, 0xE7FBBF00, 0xB08FB5F0,
	0x460C4605, 0x461F4616, 0x900E2000, 0x900D2004, 0x900C2005, 0x900B2001, 0x900A200A, 0x9009200B,
	0x90082008, 0x90072009, 0x90062006, 0x90052007, 0x68004850, 0xD1052801, 0x90082006, 0x90062008,
	0x90052009, 0x90002000, 0x90029001, 0x463A9003, 0x9B144630, 0xF7FE9915, 0xF7FEFFA3, 0x462BF9FA,
	0x9A156821, 0xF7FF980E, 0x462BFE2E, 0x9A156861, 0xF7FF980D, 0x462BFE28, 0x9A1568A1, 0xF7FF980C,
	0x462BFE22, 0x9A1568E1, 0xF7FF980B, 0x462BFE1C, 0x9A156921, 0xF7FF980A, 0x462BFE16, 0x9A156961,
	0xF7FF9809, 0x4833FE10, 0x28006800, 0x4832D10F, 0x28006800, 0x462BD10B, 0x9A1569A1, 0xF7FF9808,
	0x462BFE02, 0x9A1569E1, 0xF7FF9807, 0xF7FEFDFC, 0x9806F9C0, 0x9808B2C2, 0x980AB2C1, 0x2300B2C0,
	0xF7FE9004, 0x6868FF37, 0xFDA3F7FF, 0x6868E005, 0xFF4DF7FE, 0xD1002800, 0xE7F8E000, 0x6A20BF00,
	0x9004462B, 0x99069A15, 0xFDEDF7FF, 0x462B6A60, 0x9A159004, 0xF7FF9905, 0x2000FDE6, 0xBDF0B00F,
	0xB085B5FF, 0x4615460C, 0x9F0E461E, 0x900369A0, 0x900269E0, 0x200061A5, 0x230061E0, 0x46212222,
	0x96009701, 0xF7FF9805, 0xB2C0FF59, 0x98039004, 0x980261A0, 0x980461E0, 0xBDF0B009, 0x00005488,
	0x000054A8, 0x000054C8, 0x000054E8, 0x00005508, 0x00005528, 0x2000C028, 0x2000C024, 0xB097B5F0,
	0x460E4605, 0x20004614, 0x7208A908, 0x900B482E, 0x900C482E, 0x4628A901, 0xFF10F7FF, 0x98014607,
	0x9802900D, 0x98059010, 0x9806900E, 0x9803900F, 0x98049011, 0x94159012, 0x30484620, 0x2D019016,
	0x2020D109, 0x46322300, 0x9000A90D, 0xF7FFA80A, 0xB017FFA7, 0xBF00BDF0, 0xB5F0E7FB, 0x4605B08F,
	0x9E17460C, 0x90012020, 0x46692000, 0x48167208, 0x48169003, 0x2E019004, 0x4815D10B, 0x48159005,
	0x48159008, 0x48159006, 0x94099007, 0x30484620, 0x9816900A, 0xD1042800, 0x900D4811, 0x900E3048,
	0x480FE004, 0x900D3090, 0x900E3048, 0xD1082E01, 0x23002020, 0xA905462A, 0xA8029000, 0xFF70F7FF,
	0x20004607, 0xBDF0B00F, 0x40002100, 0x20008000, 0x00005488, 0x000054A8, 0x00005508, 0x00005528,
	0x2000C6D4, 0xB08BB5FF, 0x460C4606, 0x2000461F, 0x2001900A, 0x20029009, 0x20039008, 0x20049007,
	0x20059006, 0x46339005, 0x6821463A, 0xF7FF980A, 0x4633FD1A, 0x6921463A, 0xF7FF9806, 0x4633FD14,
	0x6961463A, 0xF7FF9805, 0x4633FD0E, 0x6861463A, 0xF7FF9809, 0x4633FD08, 0x68A1463A, 0xF7FF9808,
	0x4633FD02, 0x68E1463A, 0xF7FF9807, 0x2000FCFC, 0x90019000, 0x46039002, 0x46399003, 0x9A0D2032,
	0xFE5EF7FE, 0xF7FF6870, 0xE005FCA4, 0xF7FE6870, 0x2800FE4E, 0xE000D100, 0xBF00E7F8, 0xF7FF6870,
	0x4605FD02, 0x0FC00568, 0xD10B2800, 0x0FC00628, 0xD1072800, 0x0FC00668, 0xD1032800, 0x0FC006E8,
	0xD0022800, 0xB00F2001, 0x2000BDF0, 0xB5F0E7FB, 0x4605B091, 0x4617460C, 0x2000461E, 0x20019010,
	0x2002900F, 0x2003900E, 0x2004900D, 0x2005900C, 0x2006900B, 0x2007900A, 0x200A9009, 0x200B9008,
	0x200C9007, 0x20089006, 0x20099005, 0xA0AD9004, 0xF0016921, 0xA0AEF9C5, 0xF0016961, 0xA0AFF9C1,
	0xF00169A1, 0xA0B0F9BD, 0xF00168A1, 0xA0B1F9B9, 0xF00168E1, 0xA0B2F9B5, 0xF0016A21, 0xA0B3F9B1,
	0xF0016861, 0xA0B4F9AD, 0xF0016821, 0xA0B5F9A9, 0xF0016AE1, 0xA0B6F9A5, 0xF0016B21, 0xA0B7F9A1,
	0xF0016A61, 0xA0B8F99D, 0xF0016AA1, 0x462BF999, 0x6AE14632, 0xF7FF9805, 0xA0B6FC76, 0xF990F001,
	0x6AE02120, 0xF8CEF7FE, 0x4632462B, 0x98046B21, 0xFC69F7FF, 0xF001A0B1, 0x2120F983, 0xF7FE6B20,
	0x462BF8C1, 0x68214632, 0xF7FF9810, 0xA0ADFC5C, 0xF976F001, 0x68202120, 0xF8B4F7FE, 0x4632462B,
	0x980C6921, 0xFC4FF7FF, 0xF001A0A8, 0x2120F969, 0xF7FE6920, 0x462BF8A7, 0x69614632, 0xF7FF980B,
	0xA0A4FC42, 0xF95CF001, 0x69602120, 0xF89AF7FE, 0x4632462B, 0x980F6861, 0xFC35F7FF, 0xF001A09F,
	0x2120F94F, 0xF7FE6860, 0x462BF88D, 0x68A14632, 0xF7FF980E, 0xA09BFC28, 0xF942F001, 0x68A02120,
	0xF880F7FE, 0x4632462B, 0x980D68E1, 0xFC1BF7FF, 0xF001A096, 0x2120F935, 0xF7FE68E0, 0x462BF873,
	0x6A214632, 0xF7FF9806, 0xA092FC0E, 0xF928F001, 0x6A202120, 0xF866F7FE, 0x4632462B, 0x98086A61,
	0xFC01F7FF, 0xF001A08D, 0x2120F91B, 0xF7FE6A60, 0x462BF859, 0x6AA14632, 0xF7FF9807, 0xA089FBF4,
	0xF90EF001, 0x6AA02120, 0xF84CF7FE, 0x90002000, 0x90029001, 0x463A4603, 0x90034631, 0xF7FE2031,
	0x6868FD4F, 0xFB95F7FF, 0x6868E005, 0xFD3FF7FE, 0xD1002800, 0xE7F8E000, 0x6868BF00, 0x058068C0,
	0xB0110FC0, 0xB5F0BDF0, 0x4605B091, 0x4617460C, 0x2000461E, 0x20019010, 0x2002900F, 0x2003900E,
	0x2004900D, 0x2005900C, 0x2006900B, 0x2007900A, 0x200A9009, 0x200B9008, 0x200C9007, 0x20009006,
	0x462B9005, 0x68214632, 0xF7FF9810, 0x462BFBAC, 0x69214632, 0xF7FF980C, 0x462BFBA6, 0x69614632,
	0xF7FF980B, 0x462BFBA0, 0x68614632, 0xF7FF980F, 0x462BFB9A, 0x68A14632, 0xF7FF980E, 0x462BFB94,
	0x68E14632, 0xF7FF980D, 0x4858FB8E, 0x28006800, 0x462BD10B, 0x69A14632, 0xF7FF980A, 0x462BFB84,
	0x69E14632, 0xF7FF9809, 0x462BFB7E, 0x6A214632, 0xF7FF9806, 0x2000FB78, 0x90019000, 0x46039002,
	0x4631463A, 0x20309003, 0xFCDAF7FE, 0xF7FF6868, 0xE005FB20, 0xF7FE6868, 0x2800FCCA, 0xE000D100,
	0xBF00E7F8, 0x4632462B, 0x99086A60, 0xFB6BF7FF, 0x4632462B, 0x99076AA0, 0xFB65F7FF, 0xB0112000,
	0x0000BDF0, 0x61200A0D, 0x20702520, 0x00000A0D, 0x62200A0D, 0x20702520, 0x00000A0D, 0x64200A0D,
	0x20702520, 0x00000A0D, 0x67200A0D, 0x70252078, 0x000A0D20, 0x67200A0D, 0x70252079, 0x000A0D20,
	0x68200A0D, 0x20702520, 0x00000A0D, 0x6E200A0D, 0x20702520, 0x00000A0D, 0x70200A0D, 0x20702520,
	0x00000A0D, 0x71200A0D, 0x70252078, 0x000A0D20, 0x71200A0D, 0x70252079, 0x000A0D20, 0x72200A0D,
	0x20702520, 0x00000A0D, 0x73200A0D, 0x20702520, 0x00000A0D, 0x51200A0D, 0x000A0D78, 0x51200A0D,
	0x000A0D79, 0x70200A0D, 0x00000A0D, 0x61200A0D, 0x00000A0D, 0x62200A0D, 0x00000A0D, 0x6E200A0D,
	0x00000A0D, 0x47200A0D, 0x000A0D78, 0x47200A0D, 0x000A0D79, 0x68200A0D, 0x00000A0D, 0x72200A0D,
	0x00000A0D, 0x73200A0D, 0x00000A0D, 0x2000C028, 0xB087B5F0, 0x4615460C, 0x9F0C461E, 0x21002004,
	0x23052208, 0x92039302, 0x90059104, 0x4633980D, 0x46294622, 0x90019700, 0xF0002014, 0xB007FF60,
	0xB5F0BDF0, 0x460CB087, 0x461E4615, 0x20059F0C, 0x22062100, 0x93022304, 0x91049203, 0x980D9005,
	0x46224633, 0x97004629, 0x20159001, 0xFF47F000, 0xBDF0B007, 0x4605B5F8, 0xA00C460E, 0x90006800,
	0xF0014628, 0x0847F9B7, 0xE00C2400, 0x19410060, 0x4668780A, 0x78497002, 0x22107041, 0xF0012100,
	0x5530F921, 0x42BC1C64, 0xBDF8DBF0, 0x00003030, 0x4605B570, 0x48B44CB3, 0x19646004, 0x19646044,
	0x19646084, 0x196460C4, 0x19646104, 0x19646144, 0x19646184, 0x196461C4, 0x19646204, 0x19646244,
	0x19646284, 0x196462C4, 0x19646304, 0x20016344, 0x6B4949A5, 0x2D207008, 0x49A3D124, 0x68082220,
	0xF00149A2, 0x49A0F999, 0x68482220, 0xF00149A0, 0x499DF993, 0x68882220, 0xF001499E, 0x499AF98D,
	0x68C82220, 0xF001499C, 0x4997F987, 0x69082220, 0xF001499A, 0x4994F981, 0x69482220, 0xF0014998,
	0xE002F97B, 0xF000A097, 0xBD70FF5B, 0x4605B570, 0x4616460C, 0xF0010023, 0x080DFC1B, 0x241D160F,
	0x5539322B, 0x404E475C, 0x49870063, 0x68084632, 0xF0014629, 0xE057F961, 0x46324983, 0x46296848,
	0xF95AF001, 0x4980E050, 0x68884632, 0xF0014629, 0xE049F953, 0x4632497C, 0x462968C8, 0xF94CF001,
	0x4979E042, 0x69084632, 0xF0014629, 0xE03BF945, 0x46324975, 0x46296948, 0xF93EF001, 0x4972E034,
	0x69884632, 0xF0014629, 0xE02DF937, 0x4632496E, 0x462969C8, 0xF930F001, 0x496BE026, 0x6A084632,
	0xF0014629, 0xE01FF929, 0x46324967, 0x46296A48, 0xF922F001, 0x4964E018, 0x6A884632, 0xF0014629,
	0xE011F91B, 0x46324960, 0x46296AC8, 0xF914F001, 0x495DE00A, 0x6B084632, 0xF0014629, 0xE003F90D,
	0xF000A066, 0xBF00FEED, 0xBD70BF00, 0x4604B570, 0x4616460D, 0xF001002B, 0x080EFBAB, 0x1814100C,
	0x3424201C, 0x28302C38, 0x484F403C, 0x60206800, 0x484DE037, 0x60206840, 0x484BE033, 0x60206880,
	0x4849E02F, 0x602068C0, 0x4847E02B, 0x60206900, 0x4845E027, 0x60206940, 0x4843E023, 0x60206980,
	0x4841E01F, 0x602069C0, 0x483FE01B, 0x60206A00, 0x483DE017, 0x60206A40, 0x483BE013, 0x60206A80,
	0x4839E00F, 0x60206AC0, 0x4837E00B, 0x60206B00, 0x4835E007, 0x60206B40, 0xA040E003, 0xFEA0F000,
	0xBF00BF00, 0xB510BD70, 0x4604B0B0, 0xA9282000, 0x48407508, 0x4840902E, 0x482B902F, 0x90236800,
	0x69004829, 0x48289024, 0x90256940, 0x68404826, 0x48259026, 0x90276880, 0x68C04823, 0x20009028,
	0x902A9029, 0x902BA812, 0x902CA801, 0x9400481E, 0xA9232301, 0xA82D6982, 0xFB82F7FF, 0x4622491A,
	0xA9126AC8, 0xF888F001, 0x46224917, 0xA9016B08, 0xF882F001, 0xBD10B030, 0x4604B53E, 0x46692000,
	0x48247008, 0x48249001, 0x46239002, 0x490E2200, 0xF7FF4668, 0xBD3EFD68, 0x4604B53E, 0x46692000,
	0x481C7008, 0x481C9001, 0x46239002, 0x49062200, 0xF7FF4668, 0xB2C0FC5C, 0x49034605, 0x70086B49,
	0xBD3E4628, 0x2000C1B4, 0x2000C154, 0x00005488, 0x000054A8, 0x000054C8, 0x000054E8, 0x00005508,
	0x00005528, 0x75736E75, 0x726F7070, 0x20646574, 0x73646365, 0x69732061, 0x0000657A, 0x73646365,
	0x65735F61, 0x61705F74, 0x65206172, 0x726F7272, 0x00000000, 0x40002100, 0x20008000, 0x4602B510,
	0x21002000, 0x7B1B4BF6, 0x40232404, 0xE0074618, 0x891B4BF3, 0x4BF2B2D9, 0x24047B1B, 0x46184023,
	0xD0F52804, 0x200CBD10, 0x740849ED, 0x80082087, 0x80882006, 0x47704770, 0x4602B538, 0x23002000,
	0x94002400, 0xE016BF00, 0x7B244CE5, 0x402C2504, 0xE00A4623, 0x7B244CE2, 0x402C2504, 0x9C004623,
	0x94001C64, 0x1C649C00, 0x2B009400, 0x4CDCD0F2, 0x54148924, 0x42881C40, 0xBD38DBE6, 0x49D82000,
	0x07C87B09, 0xE0030FC0, 0x7B0949D5, 0x0FC007C8, 0xD0F92800, 0xB5304770, 0x20004602, 0xBF002300,
	0x4CCFE010, 0x25027B24, 0x4623402C, 0x4CCCE004, 0x25027B24, 0x4623402C, 0xD0F82B00, 0x4DC85C14,
	0x1C40812C, 0xDBEC4288, 0xB5F8BD30, 0x460E4605, 0x4FC42400, 0x46692000, 0xBF007008, 0x1928E004,
	0xF7FF2101, 0x1C64FFA9, 0xDBF842B4, 0xE0022400, 0x55385D28, 0x42B41C64, 0x2001DBFA, 0xB578BDF8,
	0x460E4605, 0x20002400, 0x70084669, 0xE004BF00, 0x21011928, 0xFF90F7FF, 0x42B41C64, 0x2001DBF8,
	0xB570BD78, 0x460C4606, 0x2C114615, 0x462AD104, 0x46302106, 0xFA9EF000, 0xD1082C13, 0xD1032D42,
	0xF0002003, 0xE002FB55, 0xF0002001, 0x2C14FB51, 0x462AD104, 0x4630210F, 0xFA8CF000, 0xD1042C15,
	0x2110462A, 0xF0004630, 0x2C21FA85, 0x462AD104, 0x4630210B, 0xFA7EF000, 0xD1042C22, 0x210C462A,
	0xF0004630, 0x2C18FA77, 0x2D42D108, 0x2003D103, 0xFB45F000, 0x2001E002, 0xFB41F000, 0xBD702001,
	0x4605B570, 0x4616460C, 0xD1042C16, 0x210B4632, 0xF0004628, 0x2C17FAEA, 0x4632D104, 0x4628210C,
	0xFAE3F000, 0xD1042C19, 0x21094632, 0xF0004628, 0x2C20FADC, 0x4632D104, 0x4628210A, 0xFAD5F000,
	0xBD702001, 0x4605B570, 0x4616460C, 0xD1042C48, 0x21084632, 0xF7FF4628, 0x2C49FE29, 0x4632D104,
	0x46282109, 0xFE22F7FF, 0xD1042C52, 0x210A4632, 0xF7FF4628, 0x2C53FE1B, 0x4632D104, 0x4628210B,
	0xFE14F7FF, 0xD1042C57, 0x210D4632, 0xF7FF4628, 0x2001FE0D, 0xB570BD70, 0x460C4606, 0x2C414615,
	0x462AD104, 0x46302106, 0xFD90F7FF, 0xD1042C43, 0x2107462A, 0xF7FF4630, 0x2C45FD89, 0x462AD104,
	0x46302108, 0xFD82F7FF, 0xD1042C46, 0x2109462A, 0xF7FF4630, 0x2C55FD7B, 0x462AD104, 0x4630210C,
	0xFD74F7FF, 0xD1022C47, 0xF7FF4628, 0x2C50FE2C, 0x462AD104, 0x4630210A, 0xFD68F7FF, 0xD1042C51,
	0x210B462A, 0xF7FF4630, 0x2C54FD61, 0x4628D102, 0xFE52F7FF, 0xD1022C58, 0xF7FF4628, 0x2001FE5D,
	0xB570BD70, 0x460C4606, 0x2C834615, 0x462AD106, 0x46302102, 0xF8EAF000, 0x60054843, 0xD1062C88,
	0x2100462A, 0xF0004630, 0x483FF8E1, 0x2C846005, 0x462AD106, 0x46302101, 0xF8D8F000, 0x6005483A,
	0xD0012C85, 0xD1062C86, 0x2103462A, 0xF0004630, 0x4835F8CD, 0x2C946005, 0x4833D103, 0xF0006800,
	0x2C95F91E, 0x4830D103, 0xF0006800, 0x2001F930, 0xB570BD70, 0x460C4605, 0x2C874616, 0x2C89D001,
	0x4632D104, 0x46282104, 0xF8E4F000, 0xBD702001, 0x4605B570, 0x4616460C, 0xDA052C41, 0x46214632,
	0xF7FF4628, 0xE00CFEDE, 0xDB052C81, 0x46214632, 0xF7FF4628, 0xE004FFA6, 0x46214632, 0xF7FF4628,
	0x2001FF5A, 0xB570BD70, 0x460C4605, 0x2C414616, 0x4632DA05, 0x46284621, 0xFF02F7FF, 0x2C81E00C,
	0x4632DB05, 0x46284621, 0xFFC3F7FF, 0x4632E004, 0x46284621, 0xFF16F7FF, 0xBD702001, 0x4605B578,
	0x2400460E, 0x46692000, 0xBF007008, 0x1928E004, 0xF7FF2101, 0x1C64FE60, 0xDBF842B4, 0xBD782001,
	0x40002200, 0x20008000, 0x2000C02C, 0x4605B578, 0x2400460E, 0x46692000, 0xBF007008, 0x1928E004,
	0xF7FF2101, 0x1C64FE19, 0xDBF842B4, 0xBD782001, 0xB093B530, 0x25002400, 0xE002BF00, 0x550CA901,
	0x2C101C64, 0x2105DBFA, 0xF7FFA80A, 0x2105FFDF, 0xF7FFA801, 0xA008FFC3, 0xFBF2F000, 0xA80A2105,
	0xFB30F7FD, 0xF000A009, 0x2105FBEB, 0xF7FDA801, 0xB013FB29, 0x0000BD30, 0x72200A0D, 0x69656365,
	0x20646576, 0x61746164, 0x00000000, 0x73200A0D, 0x20746E65, 0x61746164, 0x00000000, 0x2300B53E,
	0x93019300, 0x92019302, 0x9D029100, 0xC3264603, 0x4601BD3E, 0x4A60485F, 0x18406090, 0x18406190,
	0x184061D0, 0x18406250, 0x47706210, 0x4605B570, 0x4616460C, 0xF0010023, 0x0405F87B, 0x2019120B,
	0x49550027, 0x68884632, 0xF0004629, 0xE01FFDC5, 0x46324951, 0x46296988, 0xFDBEF000, 0x494EE018,
	0x69C84632, 0xF0004629, 0xE011FDB7, 0x4632494A, 0x46296A08, 0xFDB0F000, 0x4947E00A, 0x6A484632,
	0xF0004629, 0xE003FDA9, 0xF000A044, 0xBF00FB89, 0xBD70BF00, 0x4604B570, 0x4616460D, 0xF001002B,
	0x0405F847, 0x14100C08, 0x483B0018, 0x60206880, 0x4839E013, 0x60206980, 0x4837E00F, 0x602069C0,
	0x4835E00B, 0x60206A00, 0x4833E007, 0x60206A40, 0xA037E003, 0xFB64F000, 0xBF00BF00, 0xB530BD70,
	0x4604B085, 0x20002500, 0x72084669, 0x90034835, 0x90044835, 0x6A404828, 0x90009401, 0x68834826,
	0x69C16A02, 0xF7FFA802, 0xB005FB53, 0xB530BD30, 0x4604B085, 0x20002500, 0x72084669, 0x90034829,
	0x90044829, 0x6A40481C, 0x90009401, 0x6883481A, 0x69816A02, 0xF7FFA802, 0xB005FB54, 0xB51FBD30,
	0x340124FF, 0x46224814, 0xA8016881, 0xFF56F7FF, 0x46232000, 0xA8019000, 0xF7FEC807, 0x480EFDCD,
	0x69814622, 0xF7FFA801, 0x2006FF49, 0x90004623, 0xC807A801, 0xFDC0F7FE, 0x46224807, 0xA80169C1,
	0xFF3CF7FF, 0x46232008, 0xA8019000, 0xF7FEC807, 0xBD1FFDB3, 0x2000C1B4, 0x2000C18C, 0x5F617372,
	0x5F746573, 0x61726170, 0x72726520, 0x0000726F, 0x5F617372, 0x5F746567, 0x61726170, 0x72726520,
	0x0000726F, 0x40002100, 0x20008000, 0x48EE4601, 0x60104AEE, 0x60501840, 0x60901840, 0x60D01840,
	0x61101840, 0x61501840, 0x61901840, 0x61D01840, 0x47701840, 0x4605B570, 0x4616460C, 0xF0000023,
	0x1F11FF97, 0x4B40352A, 0x686F6156, 0x140A7E7E, 0x77707E7E, 0x4632007E, 0x48DD4629, 0xFCDCF000,
	0x48DB2101, 0x660130C0, 0x4632E06D, 0x48D84629, 0xF0003048, 0x2101FCD1, 0x30C048D5, 0xE0626601,
	0x463249D2, 0x46296808, 0xFCC6F000, 0x48D02101, 0x660130C0, 0x49CDE057, 0x68484632, 0xF0004629,
	0x2101FCBB, 0x30C048CA, 0xE04C6601, 0x463249C7, 0x46296888, 0xFCB0F000, 0x48C52101, 0x660130C0,
	0x49C2E041, 0x68C84632, 0xF0004629, 0x2101FCA5, 0x30C048BF, 0xE0366601, 0x463249BC, 0x46296908,
	0xFC9AF000, 0x48BA2101, 0x660130C0, 0x49B7E02B, 0x69484632, 0xF0004629, 0x2101FC8F, 0x30C048B4,
	0xE0206601, 0x463249B1, 0x46296988, 0xFC84F000, 0x49AEE019, 0x69C84632, 0xF0004629, 0xE012FC7D,
	0x4632E011, 0x48AA4629, 0xF0003090, 0xE00AFC75, 0x46294632, 0x30D848A6, 0xFC6EF000, 0xA0A5E003,
	0xFA4EF000, 0xBF00BF00, 0xB570BD70, 0x460D4604, 0x46284616, 0x00033809, 0xFF0AF000, 0x05100C08,
	0x14201C08, 0x489A2418, 0xE01F6020, 0x30484898, 0xE01B6020, 0x30204895, 0xE0176020, 0x30684893,
	0xE0136020, 0x30904892, 0xE00F6020, 0x30D84890, 0xE00B6020, 0x3890488E, 0xE0076020, 0x3848488C,
	0xE0036020, 0xF000A091, 0xBF00FA1B, 0xBD70BF00, 0x4604B510, 0x4A864885, 0x46206981, 0xFF4EF7FE,
	0xB510BD10, 0x498F4604, 0xF000A08F, 0x487FFA09, 0x32904A7F, 0x462069C1, 0xFF40F7FE, 0xB510BD10,
	0x4604B094, 0x21202000, 0x9403AA0C, 0x91019200, 0x49769002, 0xAA042320, 0x31FF6988, 0xF7FE31D1,
	0xB014FF5C, 0xB510BD10, 0x4604B094, 0xA07E4980, 0xF9E6F000, 0xF000A07F, 0x496CF9E3, 0x212069C8,
	0xF920F7FD, 0x21202001, 0x9403AA0C, 0x91019200, 0x49669002, 0xAA042320, 0x496569C8, 0xFF3DF7FE,
	0xBD10B014, 0xB099B5F0, 0xA1782220, 0xF7FCA809, 0x2220FFEB, 0xA801A17D, 0xFFE6F7FC, 0x20012400,
	0x27009000, 0x26002500, 0xE0A6BF00, 0xD1022F01, 0x26032542, 0x2520E001, 0x46282601, 0xFEC6F7FF,
	0xE0082400, 0xFFB4F7FC, 0x5508A909, 0xFFB0F7FC, 0x5508A901, 0x42AC1C64, 0xA074DBF4, 0xF9A0F000,
	0xA8094629, 0xF8DEF7FD, 0xF000A073, 0x4629F999, 0xF7FDA801, 0xA073F8D7, 0xF992F000, 0x48432148,
	0xF0003020, 0x2148FC11, 0x30684840, 0xFC0CF000, 0x483F2148, 0xF0003890, 0x2148FC07, 0x3848483C,
	0xFC02F000, 0xA909462A, 0xF7FCA811, 0x462AFF9D, 0xA8112106, 0xFE9EF7FF, 0xF000A067, 0x4933F971,
	0x46296988, 0xF8AEF7FD, 0xF7FFB2F0, 0x462AFF51, 0xA811A901, 0xFF88F7FC, 0x2108462A, 0xF7FFA811,
	0xA03CFE89, 0xF95CF000, 0x69C84928, 0xF7FD2120, 0xA059F899, 0xF954F000, 0x69884924, 0xF7FD2120,
	0xB2F0F891, 0xFF3DF7FF, 0xF7FFB2F0, 0xB2F0FF48, 0xFF59F7FF, 0xF000A055, 0x2120F943, 0x3020481B,
	0xF880F7FD, 0xF000A054, 0x2120F93B, 0x38904818, 0xF878F7FD, 0x21202200, 0x30204814, 0xF9BDF7FD,
	0x46112220, 0x38904812, 0xF9B7F7FD, 0x4910462A, 0x46083990, 0xF0003890, 0x2800FAEF, 0x2000D001,
	0x462A9000, 0x3948490A, 0x38904608, 0xFAE4F000, 0xD0012800, 0x90002000, 0x2F011C7F, 0xE755DA00,
	0xB0199800, 0x0000BDF0, 0x2000C1B4, 0x2000C6B4, 0x2000C7F4, 0x73646365, 0x65735F61, 0x61705F74,
	0x65206172, 0x726F7272, 0x00000000, 0x73646365, 0x65675F61, 0x61705F74, 0x65206172, 0x726F7272,
	0x00000000, 0x00005548, 0x25200A0D, 0x00002073, 0x00005563, 0x45200A0D, 0x5F484443, 0x61726170,
	0x642E736D, 0x68746F5F, 0x00007265, 0x4E654DC6, 0x95DA3C26, 0x9D71DCD6, 0x3B6CFD3C, 0xEA1F2B93,
	0xE2B92160, 0x5C9936AC, 0x3DAE964D, 0xD1E30E3D, 0x3B1FE921, 0xCFAECA63, 0x21E42E99, 0x6D2AEFA5,
	0x936A0B62, 0xE25B9948, 0x40154888, 0x73200A0D, 0x0D20316B, 0x0000000A, 0x73200A0D, 0x0D20326B,
	0x0000000A, 0x45200A0D, 0x46484443, 0x5F6C6C75, 0x74736554, 0x00000031, 0x45200A0D, 0x5F484443,
	0x61726170, 0x642E736D, 0x0000203A, 0x5320794D, 0x65726365, 0x00000074, 0x6568744F, 0x65532072,
	0x74657263, 0x00000000, 0x2300B53E, 0x93019300, 0x92019302, 0x9D029100, 0xC3264603, 0xB5FFBD3E,
	0x4614B085, 0x9E0F461D, 0x22012000, 0x90029000, 0x92014603, 0x46029003, 0x98054631, 0xFCC0F7FD,
	0xD00B2D00, 0x46294632, 0xF7FFA802, 0x9812FFDD, 0x90004633, 0xC807A802, 0xFB0EF7FE, 0x28009806,
	0x4632D00B, 0x9906A802, 0xFFCEF7FF, 0x46339810, 0xA8029000, 0xF7FEC807, 0x4816FAFF, 0x28006800,
	0x2C00D10D, 0x4632D00B, 0xA8024621, 0xFFBCF7FF, 0x46339811, 0xA8029000, 0xF7FEC807, 0xA810FAED,
	0x9A13C80B, 0xFC66F7FD, 0xFB9AF7FE, 0x2F004607, 0x4638D002, 0xBDF0B009, 0xA8024632, 0xF7FF990E,
	0x9813FFA3, 0x90004633, 0xC807A802, 0xFAE8F7FE, 0xE7EF2000, 0x2000C030, 0xB5104770, 0xDB042A20,
	0x3A204601, 0x20004091, 0x4091BD10, 0x1A9C2320, 0x40E34603, 0x40904319, 0xB510BD10, 0xDB062A20,
	0x17CB4608, 0x41103A20, 0x430B17C1, 0x460BE006, 0x41132420, 0x1AA240D0, 0x43084091, 0xBD104619,
	0x4905B40F, 0xAA03B510, 0xF0009802, 0xBC10FBAB, 0xB004BC08, 0x00004718, 0x2000C000, 0x4604B570,
	0x68006985, 0xD50106C1, 0xE0002630, 0x07C02620, 0xBD70D007, 0x46306862, 0x479068A1, 0x1C406A20,
	0x1E6D6220, 0xBD70D5F6, 0x4604B570, 0x78006985, 0xD10707C0, 0x6862BD70, 0x202068A1, 0x6A204790,
	0x62201C40, 0xD5F61E6D, 0xB570BD70, 0x4605460C, 0xD0052A01, 0x06807828, 0x69EAD500, 0xE0022300,
	0xE0052301, 0x42931C5B, 0x5CE0D202, 0xD1F92800, 0x18E669A8, 0x61A81AC0, 0x18C06A28, 0x46286228,
	0xFFBCF7FF, 0x686AE004, 0x68A97820, 0x47901C64, 0xD3F842B4, 0xF7FF4628, 0xBD70FFC7, 0x2500B5F7,
	0x68102975, 0xA6149900, 0x46C0D011, 0x280046C0, 0x4240DA02, 0xE008A611, 0x68099900, 0xD501078A,
	0xE002A60F, 0xD5040749, 0x2501A60E, 0x46C0E001, 0x9F0046C0, 0x37242400, 0xF000E004, 0x3130FB9A,
	0x1C645539, 0xD1F82800, 0x4632462B, 0x98004621, 0xFAB8F000, 0x0000BDFE, 0x00000000, 0x0000002D,
	0x0000002B, 0x00000020, 0x460DB570, 0x05098801, 0x4C1DD502, 0xE002447C, 0x447C4C1B, 0x4603340E,
	0x33242100, 0x0716E005, 0x0F360912, 0x545E5DA6, 0x2A001C49, 0x7802D1F7, 0x07122300, 0x2D70D505,
	0x2900D007, 0x2302D001, 0x46223411, 0xFA8AF000, 0x2301BD70, 0xE7F83410, 0x4604B570, 0x4621460D,
	0x46C06810, 0x460246C0, 0x46204629, 0xFFCCF7FF, 0xB430BD70, 0x24206803, 0x43236812, 0x23086003,
	0xBC3061C3, 0x0000E7C0, 0x00001EA5, 0x4604B5F3, 0xB0812000, 0x46206220, 0x478868E1, 0xD07D2800,
	0xD0022825, 0x68A16862, 0x4F45E083, 0x447F2500, 0x68E14620, 0x28204788, 0xDB084606, 0xD2062E31,
	0x382019B8, 0x28007800, 0x4305D001, 0x07A8E7F0, 0x2004D501, 0x20004385, 0x460761E0, 0x2E2A61A0,
	0x4630D00A, 0xFBD2F000, 0xD0272800, 0x190000B8, 0x90003E30, 0xE0196186, 0x00BA9802, 0xC8021912,
	0x90026191, 0x68E14620, 0x2F014788, 0xD1174606, 0x280069E0, 0x2020DA1F, 0xE01C4385, 0x210A9800,
	0x43486980, 0x19809900, 0x61883830, 0x68E14620, 0x46064788, 0xFBAAF000, 0xD1EF2800, 0xD00A2F01,
	0xD1082E2E, 0x68E14620, 0x46064788, 0x43052020, 0x2F021C7F, 0x69A0DBC3, 0xDA032800, 0x61A04240,
	0x43052001, 0xD00107E8, 0x43852010, 0xD0242E00, 0x38414630, 0xD8032819, 0x02C02001, 0x36204305,
	0x60254620, 0x9A024631, 0xF7FC4615, 0x2800FC77, 0x2801D00C, 0x1DEDD007, 0xE00008E8, 0x00C0E00D,
	0x90023008, 0x1D2DE777, 0xE7749502, 0x46306862, 0x479068A1, 0x1C406A20, 0x6A20E76C, 0x0000BDFE,
	0x00001E33, 0x460FB5F7, 0x2600B082, 0xF0009C02, 0x9000F9C5, 0x90016800, 0x1C647825, 0xD0052D00,
	0xF9B4F000, 0x5D406800, 0xD1F507C0, 0xD0022D2B, 0xD01C2D2D, 0x98001E64, 0x60012100, 0x46204639,
	0xF0009A04, 0x2F00FA33, 0xD0044601, 0x42A06838, 0x9802D101, 0x98006038, 0x28026800, 0x9800D00B,
	0x60029A01, 0xD5060570, 0xB0054248, 0x2001BDF0, 0x43060280, 0x4608E7DF, 0x0000E7F7, 0xB5304A0B,
	0x4C0B4611, 0x460B3160, 0xC10C3BDC, 0xE0062137, 0x008D0C02, 0x515A1812, 0x43504A06, 0x460A1900,
	0x2A001E49, 0xBD30DCF4, 0xE7E72001, 0x2000C994, 0x66D619E1, 0x00010DCD, 0xB5104603, 0x079B430B,
	0x2A04D10F, 0xC808D30D, 0x1F12C910, 0xD0F842A3, 0xBA21BA18, 0xD9014288, 0xBD102001, 0x43C02000,
	0x2A00BD10, 0x07D3D003, 0x1C52D003, 0x2000E007, 0x7803BD10, 0x1C40780C, 0x1B1B1C49, 0x7803D107,
	0x1C40780C, 0x1B1B1C49, 0x1E92D101, 0x4618D1F1, 0x0000BD10, 0x1C44B530, 0x7801E003, 0x29001C40,
	0x0781D00D, 0x4B0BD1F9, 0xC80401DD, 0x43911AD1, 0xD0FA4029, 0x060A1B00, 0x1EC0D003, 0x1B00BD30,
	0x040ABD30, 0x1E80D001, 0x0209BD30, 0x1E40D0FC, 0x0000BD30, 0x01010101, 0x2A04B5F8, 0x0783D32C,
	0x780BD012, 0x70031C49, 0x1E521C40, 0xD00B0783, 0x1C49780B, 0x1C407003, 0x07831E52, 0x780BD004,
	0x70031C49, 0x1E521C40, 0x0F9B078B, 0x1AC9D005, 0x232000DF, 0xC9081BDE, 0xF7FCE00A, 0xBDF8FBE5,
	0xC908461D, 0x461C40FD, 0x432C40B4, 0x1F12C010, 0xD2F52A04, 0x1AC908F3, 0xD4F01E52, 0x1C49780B,
	0x1C407003, 0xD4EA1E52, 0x1C49780B, 0x1C407003, 0xD4E42A01, 0x70017809, 0xB2D2BDF8, 0x0213B510,
	0x0413189A, 0xF000189A, 0xBD10F80E, 0xC004E001, 0x29041F09, 0x078BD2FB, 0x8002D501, 0x07C91C80,
	0x7002D000, 0x29004770, 0x07C3D00B, 0x7002D002, 0x1E491C40, 0xD3042902, 0xD5020783, 0x1C808002,
	0xE7E31E89, 0xE7EE2200, 0xE7DF2200, 0x09032200, 0xD32C428B, 0x428B0A03, 0x2300D311, 0xE04E469C,
	0x430B4603, 0x2200D43C, 0x428B0843, 0x0903D331, 0xD31C428B, 0x428B0A03, 0x4694D301, 0x09C3E03F,
	0xD301428B, 0x1AC001CB, 0x09834152, 0xD301428B, 0x1AC0018B, 0x09434152, 0xD301428B, 0x1AC0014B,
	0x09034152, 0xD301428B, 0x1AC0010B, 0x08C34152, 0xD301428B, 0x1AC000CB, 0x08834152, 0xD301428B,
	0x1AC0008B, 0x08434152, 0xD301428B, 0x1AC0004B, 0x1A414152, 0x4601D200, 0x46104152, 0xE05D4770,
	0xD0000FCA, 0x10034249, 0x4240D300, 0x22004053, 0x0903469C, 0xD32D428B, 0x428B0A03, 0x22FCD312,
	0xBA120189, 0x428B0A03, 0x0189D30C, 0x428B1192, 0x0189D308, 0x428B1192, 0x0189D304, 0x1192D03A,
	0x0989E000, 0x428B09C3, 0x01CBD301, 0x41521AC0, 0x428B0983, 0x018BD301, 0x41521AC0, 0x428B0943,
	0x014BD301, 0x41521AC0, 0x428B0903, 0x010BD301, 0x41521AC0, 0x428B08C3, 0x00CBD301, 0x41521AC0,
	0x428B0883, 0x008BD301, 0x41521AC0, 0x0843D2D9, 0xD301428B, 0x1AC0004B, 0x1A414152, 0x4601D200,
	0x41524663, 0x4610105B, 0x4240D301, 0xD5002B00, 0x47704249, 0x105B4663, 0x4240D300, 0x2000B501,
	0x46C046C0, 0x4770BD02, 0x47704770, 0xF000B510, 0x1D00F8F9, 0xBF00BD10, 0x00000345, 0x47704800,
	0x2000C9FC, 0x4604B5FF, 0xB081460D, 0x90003024, 0x06886821, 0x2210D504, 0x439169E0, 0xE0006021,
	0x42A82001, 0x1B47DD01, 0x2700E000, 0x69A19804, 0x1810197A, 0x61A01A08, 0x06C07820, 0x4620D402,
	0xFCACF7FF, 0xE0082600, 0x68629803, 0x5D8068A1, 0x6A204790, 0x1C761C40, 0x98046220, 0xDBF34286,
	0x06C07820, 0x4620D50A, 0xFC98F7FF, 0x6862E006, 0x203068A1, 0x6A204790, 0x62201C40, 0x1E7F4638,
	0xDCF42800, 0x9800E007, 0x68A16862, 0x47905D40, 0x1C406A20, 0x46286220, 0x28001E6D, 0x4620DCF3,
	0xFC92F7FF, 0x06007820, 0x2002D502, 0xBDF0B005, 0xE7FB2001, 0x6943B510, 0xD0022B00, 0x46C046C0,
	0xF7FFE001, 0x2001FC92, 0x7812BD10, 0x31244601, 0x2200700A, 0x2201704A, 0x6811E7EC, 0x43D22200,
	0x0000E7E8, 0xB5704B08, 0x447B460D, 0xF883F000, 0x46284604, 0xFAD3F7FC, 0xD0022800, 0x43C02000,
	0x4620BD70, 0x0000BD70, 0xFFFFC593, 0x4615B5F7, 0x2700B082, 0x78209C02, 0x97011C64, 0xD0022830,
	0xD0152D00, 0x7820E015, 0x1C642701, 0xD0042878, 0xD0022858, 0xD0092D00, 0x2D00E00B, 0x2D10D001,
	0x7820D107, 0x25102700, 0xE0021C64, 0xE0002508, 0x2600250A, 0xE0109600, 0x27019900, 0x18084369,
	0x43714629, 0xB2800C02, 0x188E9000, 0x42860438, 0x2001D301, 0x78209001, 0x46291C64, 0xF84EF000,
	0xDAE92800, 0x28009803, 0x2F00D005, 0x1E64D001, 0x9C02E000, 0x98016004, 0xD0062800, 0xFF2EF7FF,
	0x60012102, 0xB0051EC8, 0x9900BDF0, 0x43080430, 0x4601E7F9, 0x1A080880, 0x18100902, 0x18100A02,
	0x18100C02, 0x008208C0, 0x00521812, 0xE0011A89, 0x390A1C40, 0xD2FB290A, 0x00004770, 0x47704800,
	0x2000C9FC, 0x47704800, 0x2000CA1C, 0x1C4A6901, 0x78086102, 0xB5004770, 0x9102B08F, 0x91052100,
	0x93014905, 0x91034479, 0x90044611, 0xF7FF4668, 0xB00FFC8D, 0x0000BD00, 0xFFFFFFE5, 0xD200283A,
	0x23203830, 0x439A4602, 0xD3012A41, 0x38374610, 0xD3014288, 0x43C02000, 0x46754770, 0xFFCEF7FF,
	0x000546AE, 0x46534669, 0x00C008C0, 0xB0184685, 0xF7FCB520, 0xBC60F9F1, 0x08492700, 0x260046B6,
	0xC5C0C5C0, 0xC5C0C5C0, 0xC5C0C5C0, 0xC5C0C5C0, 0x00493D40, 0x4770468D, 0x4604B510, 0x46C046C0,
	0xF7FC4620, 0xBD10F97F, 0xB5704602, 0x0792430A, 0x4D1ED12A, 0xC80401EE, 0x1B54C908, 0x40344394,
	0xB2D0D017, 0x1A40B2D9, 0x43010621, 0xB290D110, 0x1A40B299, 0x43010421, 0x0210D10A, 0x0A000219,
	0x1A400A09, 0x43010221, 0x0E10D102, 0x1A400E19, 0x429ABD70, 0xBA10D0DF, 0x4288BA19, 0x2001D901,
	0x2000BD70, 0xBD7043C0, 0x780B7802, 0x1C491C40, 0xD0092A00, 0xD107429A, 0x780B7802, 0x1C491C40,
	0xD0012A00, 0xD0EF429A, 0xBD701AD0, 0x01010101, 0x4674B430, 0x78251E64, 0x42AB1C64, 0x5D63D304,
	0x18E3005B, 0x4718BC30, 0xE7F8461D, 0x280A3830, 0x2001D201, 0x20004770, 0x00004770, 0x2900B510,
	0x7808D00A, 0xD0072800, 0x44784805, 0xFF9CF7FF, 0xD0012800, 0xBD102000, 0x44784802, 0x0000BD10,
	0x000016B2, 0x000016AA, 0x00004010, 0x00020087, 0x0002008C, 0x00020091, 0x0002009D, 0x000200A4,
	0x000200AB, 0x00016300, 0x000200D1, 0x000200B2, 0x0002009F, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x000200D7, 0x000200DB, 0x00020169, 0x00020132, 0x0002013F, 0x00020117, 0x0002011C,
	0x00020121, 0x00020126, 0x00020186, 0x0002018D, 0x000201A5, 0x000201D3, 0x000201D2, 0x00020185,
	0x000201D3, 0x00020185, 0x00020202, 0x0002020D, 0x0002021D, 0x000202D4, 0x000202CE, 0x000202C1,
	0x000202DD, 0x00016300, 0x0002047C, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00020440, 0x00020457, 0x000202F0, 0x0002047A, 0x0002047A, 0x0002047A,
	0x0002047B, 0x0002047B, 0x0002047B, 0x0002047B, 0x0002047B, 0x0002047D, 0x0002047D, 0x0002047D,
	0x00016300, 0x00016300, 0x000201DA, 0x000201D4, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00016300, 0x00010711, 0x0001C100, 0x0001CAB8, 0x00028086, 0x00000040, 0x00000001,
	0x00015FE8, 0x0000C0D8, 0x0001E6D0, 0x0000C8C0, 0x0001CDD0, 0x00014100, 0x0000C0D8, 0x0001E7D0,
	0x0000C8C0, 0x0001CDD0, 0x00014100, 0x000100C0, 0x0000C0D8, 0x000101C8, 0x000102D0, 0x0002A880,
	0x0001E290, 0x00008880, 0x0001E290, 0x0000B890, 0x0001CD90, 0x00000001, 0x00014100, 0x00010042,
	0x00020092, 0x0000C0D8, 0x0001ECD0, 0x0000E8C8, 0x00028086, 0x00014100, 0x0000C0D8, 0x000105C8,
	0x0001E8D0, 0x0000C8C0, 0x000280CE, 0x0001CDD0, 0x00014100, 0x0000C0D8, 0x000105C8, 0x0001E8D0,
	0x0000C842, 0x000280CE, 0x0001CDD0, 0x00014100, 0x000104D8, 0x000105C8, 0x000106D0, 0x0000C0A8,
	0x0001E8B0, 0x0000A042, 0x000280CE, 0x0001CDB0, 0x0001E612, 0x0000A0A8, 0x0000C012, 0x0001E7B0,
	0x0000B0A8, 0x000100A0, 0x000101B0, 0x000102B0, 0x00020880, 0x00020896, 0x0001E6B0, 0x000042B0,
	0x0001E8B0, 0x0000A8B0, 0x0001CDB0, 0x0000C0A0, 0x0001CDB0, 0x000258CF, 0x00000001, 0x00014100,
	0x00016FA8, 0x0001C5B0, 0x00000001, 0x0001FBD0, 0x0000C8C0, 0x00014100, 0x00010200, 0x00016790,
	0x00015388, 0x0000C040, 0x0001E300, 0x00004040, 0x00014100, 0x0000C0D8, 0x000104C0, 0x000105C8,
	0x000106D0, 0x0002A880, 0x0002BC7E, 0x00003120, 0x0001F800, 0x000012A8, 0x0002CC7E, 0x0001E212,
	0x0000B8A0, 0x0001E21B, 0x00001212, 0x00010012, 0x00008007, 0x0001E281, 0x00001B80, 0x00010081,
	0x0000A000, 0x0001E21A, 0x0000B842, 0x0001E41B, 0x0000001A, 0x00000003, 0x000100E0, 0x0001E21B,
	0x0000801B, 0x0003E0F3, 0x0002BC7E, 0x0002CC7E, 0x0001E2B0, 0x0000421B, 0x0001CDB0, 0x00000001,
	0x00014100, 0x00002130, 0x0001F890, 0x000012A8, 0x0001E212, 0x0000B8A0, 0x0001E21B, 0x00001212,
	0x00010012, 0x00008003, 0x0001E281, 0x00001B80, 0x00010081, 0x0000A000, 0x0001E216, 0x0000B888,
	0x0001E21B, 0x00001616, 0x00010016, 0x00008003, 0x0001E281, 0x00001B80, 0x00010081, 0x0000A000,
	0x000200EF, 0x00020880, 0x00010405, 0x00010508, 0x00010604, 0x000200E0, 0x00020880, 0x00010404,
	0x00010506, 0x00010605, 0x000200E0, 0x00020880, 0x0001040C, 0x00010506, 0x0001060B, 0x000200E0,
	0x00020880, 0x0001E77F, 0x0000000B, 0x000340D4, 0x0001040B, 0x00010508, 0x0001061B, 0x000208E0,
	0x0001E77F, 0x00001B0C, 0x000350D4, 0x00014100, 0x0001E70D, 0x00004202, 0x0001EC0A, 0x00000D06,
	0x0001E70E, 0x00004203, 0x0001EC0B, 0x00000E06, 0x0000C002, 0x0001E80C, 0x00000342, 0x0001CD0C,
	0x00014100, 0x0001DF05, 0x0000C003, 0x00020880, 0x00010004, 0x00010142, 0x0001020E, 0x00020896,
	0x00000080, 0x0001CA11, 0x0001040E, 0x0001050B, 0x0001060E, 0x0002BC7E, 0x000208E0, 0x00000080,
	0x0000C002, 0x00020880, 0x00010004, 0x00010142, 0x0001020D, 0x00020896, 0x00000080, 0x0000C002,
	0x00010711, 0x0001CA11, 0x0001040D, 0x0001050A, 0x0001060D, 0x0002BC7E, 0x000208E0, 0x0001E705,
	0x00000E0D, 0x00010005, 0x0001010C, 0x00010205, 0x00020896, 0x00000080, 0x0001FB05, 0x00000503,
	0x0001E605, 0x0000050E, 0x00014100, 0x0000C002, 0x0001E70D, 0x00004202, 0x0000C003, 0x0001E70E,
	0x00004203, 0x0001FB01, 0x00000E0D, 0x0001FB00, 0x00000302, 0x0001000D, 0x0001010E, 0x00010280,
	0x0001EC90, 0x00008880, 0x00010088, 0x00010190, 0x00035175, 0x0000C000, 0x0001E801, 0x00008001,
	0x000280CE, 0x0001CD01, 0x00010401, 0x00010508, 0x00010606, 0x000208B5, 0x00014100, 0x00016300,
	0x00010403, 0x00010506, 0x00010608, 0x00020880, 0x0002BC7E, 0x000208E0, 0x00014100, 0x00010403,
	0x00010505, 0x0001060A, 0x00020880, 0x0002BC7E, 0x000208E0, 0x0000C002, 0x00020880, 0x0001000A,
	0x00010142, 0x0001020A, 0x00020896, 0x000250D4, 0x00010006, 0x0001010A, 0x0001020B, 0x00020896,
	0x0001E60B, 0x00000C0B, 0x0001E80B, 0x0000050B, 0x0001CD0B, 0x000250D4, 0x00014100, 0x0001000A,
	0x000209CB, 0x0001000B, 0x000209CB, 0x0000C002, 0x0000C104, 0x00010707, 0x00020881, 0x0001E80E,
	0x00000B42, 0x0001000C, 0x0001010E, 0x0001020D, 0x00020896, 0x0001000A, 0x0001010E, 0x0001020E,
	0x00020896, 0x0000C000, 0x0000C110, 0x00020880, 0x00010403, 0x0001050D, 0x0001061B, 0x00010108,
	0x0001020E, 0x000208FF, 0x0000C002, 0x0000C104, 0x00010707, 0x0001001B, 0x00010142, 0x0001021B,
	0x00020896, 0x0001E77F, 0x00000A1B, 0x000350D4, 0x00014100, 0x0001E77F, 0x00004080, 0x000250D4,
	0x0001E77F, 0x00000280, 0x000340D4, 0x00000001, 0x00016300, 0x00016300, 0x0001E701, 0x00004200,
	0x0001F90A, 0x00000001, 0x00028086, 0x00014100, 0x0002A880, 0x0001E701, 0x00004200, 0x00010406,
	0x0001050A, 0x00010604, 0x000208E0, 0x0001E77F, 0x00004204, 0x000251F3, 0x00008001, 0x0001E77F,
	0x00000104, 0x000251F3, 0x00010004, 0x00010104, 0x00010204, 0x00020896, 0x0001E77F, 0x00004204,
	0x000251F4, 0x0000A000, 0x0001E77F, 0x00000104, 0x000351F4, 0x00014100, 0x00017300, 0x0001E280,
	0x00001188, 0x0001E281, 0x00001189, 0x00000001, 0x000209F5, 0x0001E282, 0x00001142, 0x00000001,
	0x00020880, 0x0001E233, 0x00001104, 0x00000001, 0x000209FE, 0x0001002E, 0x000101C0, 0x000209FA,
	0x0001012E, 0x00020A0A, 0x000100D0, 0x0002023C, 0x00021313, 0x000263C7, 0x0002F43F, 0x000209FE,
	0x0001002E, 0x000101C0, 0x000209FA, 0x00010025, 0x000101C8, 0x000209F5, 0x0001002E, 0x0001012E,
	0x00010225, 0x00020A1A, 0x000100D0, 0x0002023C, 0x0002134E, 0x000263EA, 0x0002F43F, 0x000209FE,
	0x000104C0, 0x000105C8, 0x00020A23, 0x000100D0, 0x0002023C, 0x00010019, 0x000101A0, 0x000209FA,
	0x00010031, 0x000101A8, 0x00020A49, 0x00003420, 0x0001F800, 0x00001931, 0x0001001C, 0x00010119,
	0x00010219, 0x00020A0A, 0x0000800D, 0x00010380, 0x0001008B, 0x00010198, 0x00020A1A, 0x0000A000,
	0x00020A59, 0x0001002E, 0x0001012E, 0x00021378, 0x00026422, 0x0002F43F, 0x0001028A, 0x00020A51,
	0x00021AF8, 0x00026BA9, 0x0002FC3F, 0x0001E280, 0x00004280, 0x0001E281, 0x00004281, 0x0001CD80,
	0x0001CD81, 0x00000001, 0x00014100, 0x00000008, 0x0001E780, 0x00004288, 0x0001FE80, 0x00000180,
	0x0002BC7E, 0x0000000C, 0x00000001, 0x0001E290, 0x00001190, 0x0001E290, 0x00004290, 0x0001E890,
	0x00009011, 0x000282C0, 0x00000001, 0x0001E213, 0x0000211E, 0x00010013, 0x00010124, 0x00008005,
	0x0001E281, 0x00008880, 0x00010081, 0x0001018B, 0x0000A000, 0x00010218, 0x00020A51, 0x0001E212,
	0x00003018, 0x0001E230, 0x00001718, 0x0001E217, 0x00002D12, 0x0001E22D, 0x00001612, 0x0001E216,
	0x00002A17, 0x0001E22A, 0x00001517, 0x0001E215, 0x00002716, 0x0001E227, 0x00001416, 0x0001E214,
	0x00002415, 0x0001E224, 0x00001315, 0x0001E213, 0x00002114, 0x0001E221, 0x00001E14, 0x0001E41E,
	0x00000013, 0x0001001B, 0x0001011C, 0x00008007, 0x00021AF8, 0x00026BA9, 0x0002FC3F, 0x00010082,
	0x0001018B, 0x0000A000, 0x0001E42E, 0x00000019, 0x0001E42F, 0x0000001A, 0x0001E230, 0x00001142,
	0x0001002E, 0x0002CC7E, 0x00000001, 0x00010019, 0x000101A0, 0x000209FA, 0x00010025, 0x00010190,
	0x00020AC2, 0x000209FA, 0x00020AE1, 0x00010031, 0x000101A8, 0x00020A49, 0x00010032, 0x00010198,
	0x00020A49, 0x00002430, 0x0001F832, 0x00001931, 0x0001001C, 0x00010119, 0x00010219, 0x00020A0A,
	0x00008005, 0x00010380, 0x0001008B, 0x00010198, 0x00020A1A, 0x0000A000, 0x00010028, 0x00010125,
	0x00010225, 0x00020A0A, 0x00008005, 0x00010380, 0x0001008B, 0x00010198, 0x00020A1A, 0x0000A000,
	0x00020A59, 0x0001002E, 0x0001012E, 0x00010221, 0x00020A1A, 0x00021B82, 0x00026C2C, 0x0002FC3F,
	0x000100B0, 0x0002023C, 0x00015700, 0x000101C0, 0x00000008, 0x0001E77F, 0x00000088, 0x00034ACD,
	0x0001E77F, 0x00000089, 0x00034ACC, 0x0000000C, 0x00000001, 0x00014100, 0x00010189, 0x00015B88,
	0x0001E77F, 0x00000001, 0x000252D3, 0x00000001, 0x00014100, 0x00015F01, 0x000209FE, 0x00010104,
	0x00020AC2, 0x00021B8F, 0x00026C39, 0x000252DC, 0x00000001, 0x00014100, 0x00016B89, 0x000209FE,
	0x0001002E, 0x000101C0, 0x000209F5, 0x00021B01, 0x00026BB0, 0x0002FC3F, 0x000350D6, 0x00000001,
	0x00014100, 0x00000008, 0x0000C001, 0x0000C134, 0x00010735, 0x00000001, 0x0000000C, 0x0000C000,
	0x0000C110, 0x00000001, 0x000209FE, 0x0003FAD5, 0x00020ACE, 0x0001002E, 0x00010102, 0x00020AC2,
	0x000209F5, 0x000202E1, 0x0001E213, 0x00008A8A, 0x0001E214, 0x0000138A, 0x0001E280, 0x00001388,
	0x0001E281, 0x00001489, 0x00000001, 0x0001E215, 0x00001105, 0x0001E214, 0x00008080, 0x0001E212,
	0x00003380, 0x0001E214, 0x00008014, 0x0001E213, 0x00008181, 0x0001E614, 0x00001214, 0x0001E614,
	0x00001415, 0x0001E712, 0x00001413, 0x0001CD12, 0x00000001, 0x0001E616, 0x00008989, 0x0001E612,
	0x00008888, 0x0001E213, 0x00008916, 0x00023349, 0x0001E217, 0x00008A8A, 0x0002232C, 0x0001E214,
	0x00008888, 0x0001E217, 0x00001717, 0x0001E212, 0x00001312, 0x0001E217, 0x00003317, 0x0001FA15,
	0x00004414, 0x0001E614, 0x00001715, 0x0001E617, 0x00001212, 0x00020338, 0x0001E614, 0x00001788,
	0x0001E715, 0x00001788, 0x0001E212, 0x00001312, 0x0001E214, 0x00001514, 0x0001E617, 0x00001212,
	0x0001FA14, 0x00004414, 0x0001E213, 0x00001313, 0x0001E215, 0x00001414, 0x0001E613, 0x00001313,
	0x0001E780, 0x00001715, 0x0001E717, 0x00008012, 0x0001E282, 0x00008A16, 0x0001E215, 0x00001714,
	0x0001E781, 0x00001315, 0x00000001, 0x0001E214, 0x00008888, 0x0001E212, 0x00001312, 0x00020334,
	0x0001E612, 0x00009140, 0x00020353, 0x0001E712, 0x00009140, 0x0001E216, 0x00008A8A, 0x0001E213,
	0x00008A12, 0x0001E212, 0x00009016, 0x0001E213, 0x00001613, 0x0001E714, 0x00008812, 0x0001E715,
	0x00008913, 0x0001E212, 0x00001414, 0x0001E217, 0x00001515, 0x0001E213, 0x00001412, 0x0001E216,
	0x00001288, 0x0001E780, 0x00001317, 0x0001E617, 0x00001616, 0x0001E212, 0x00001389, 0x0001E780,
	0x00001780, 0x0001E713, 0x00008016, 0x0001E282, 0x0000148A, 0x0001E216, 0x00001513, 0x0001E781,
	0x00001216, 0x00000001, 0x00020B13, 0x00020B13, 0x00020B13, 0x00020B13, 0x00000003, 0x000102E0,
	0x00037B4E, 0x00027B51, 0x0003E378, 0x00000001, 0x00020B13, 0x00020B13, 0x00020B13, 0x00000003,
	0x000102E0, 0x00037B4E, 0x00027B51, 0x00000003, 0x000102E0, 0x00037B4E, 0x00027B51, 0x0003E382,
	0x00000001, 0x0001E213, 0x00001105, 0x0001E614, 0x00003333, 0x0001E615, 0x00001313, 0x0001E214,
	0x00001414, 0x0001E615, 0x00001315, 0x0001E214, 0x00003314, 0x0001E215, 0x00001515, 0x0001E616,
	0x00001515, 0x0001E614, 0x00001514, 0x0001E615, 0x00001614, 0x0001CD15, 0x00000001, 0x0001E781,
	0x00008140, 0x0001CD81, 0x00000001, 0x0001E213, 0x00008A8A, 0x0001E280, 0x00008A88, 0x0001E281,
	0x00001389, 0x00000001, 0x0001E215, 0x00001105, 0x0001E214, 0x00008080, 0x0001E212, 0x00003380,
	0x0001E214, 0x00008014, 0x0001E212, 0x00008012, 0x0001E213, 0x00008181, 0x0001E216, 0x00008180,
	0x0001E614, 0x00001214, 0x0001E613, 0x00001613, 0x0001E614, 0x00001415, 0x0001E712, 0x00001413,
	0x00000001, 0x0001E212, 0x00008A88, 0x0001E213, 0x00008888, 0x0001E614, 0x00008913, 0x0001E213,
	0x00001313, 0x0001E282, 0x00001212, 0x0001E212, 0x00001412, 0x0001E214, 0x00001414, 0x00022BE4,
	0x00032BE7, 0x0001E614, 0x00001214, 0x0001E680, 0x00001514, 0x0001E612, 0x00001282, 0x0001E213,
	0x00008213, 0x0001E212, 0x00008012, 0x0001E681, 0x00001312, 0x00000001, 0x0001FA15, 0x00000482,
	0x00000001, 0x0001E215, 0x00003382, 0x00000001, 0x00010340, 0x000203ED, 0x00010390, 0x0001E617,
	0x00009198, 0x0001E212, 0x00008A8A, 0x0001E213, 0x00008A90, 0x00022C1A, 0x00032C1D, 0x0001E613,
	0x00008813, 0x0001E614, 0x00008914, 0x0001E215, 0x00008A13, 0x0001E213, 0x00001313, 0x0001E612,
	0x00001512, 0x0001E282, 0x00001515, 0x0001E212, 0x00001213, 0x0001E215, 0x00001514, 0x0001E214,
	0x00001414, 0x0001E612, 0x00001512, 0x0001E213, 0x00009082, 0x0001E216, 0x00008217, 0x0001E680,
	0x00001214, 0x0001E613, 0x00008013, 0x0001E614, 0x00008016, 0x0001E212, 0x00001315, 0x0001E213,
	0x00008214, 0x0001E681, 0x00001312, 0x00000001, 0x0001E214, 0x00001217, 0x00000001, 0x0001E214,
	0x00001217, 0x0001E212, 0x00001233, 0x00000001, 0x00020BC7, 0x00020BC7, 0x00020BC7, 0x00020BC7,
	0x00000003, 0x000102E0, 0x00037BEA, 0x00027BEC, 0x0003E422, 0x00000001, 0x00020BC7, 0x00020BC7,
	0x00020BC7, 0x00000003, 0x000102E0, 0x00037BEA, 0x00027BEC, 0x00000003, 0x000102E0, 0x00037BEA,
	0x00027BEC, 0x0003E42C, 0x00000001, 0x0001E47F, 0x00000005, 0x00000001, 0x0001E681, 0x00008180,
	0x00000001, 0x00016300, 0x000209FE, 0x00010402, 0x00010507, 0x00020A23, 0x00020A3C, 0x00020AE7,
	0x00020881, 0x0001002E, 0x00010142, 0x0001020A, 0x00020896, 0x000258D4, 0x00010006, 0x0001010A,
	0x0001020B, 0x00020896, 0x0001E60B, 0x00000B0C, 0x0001E80B, 0x0000070B, 0x0001CD0B, 0x000250D4,
	0x00014100, 0x00020AE7, 0x00020881, 0x0001010A, 0x0001E77F, 0x00000188, 0x000342CD, 0x0001E77F,
	0x00000189, 0x000342CC, 0x0001E80D, 0x00000B42, 0x0001000C, 0x0001010D, 0x00010231, 0x00020896,
	0x0001000A, 0x00010232, 0x00020896, 0x00020AEC, 0x000209FE, 0x00010208, 0x00010332, 0x00010402,
	0x00010531, 0x0001062E, 0x00020A91, 0x00020AE7, 0x0001002E, 0x00010142, 0x00010212, 0x00020896,
	0x0001E77F, 0x00000A12, 0x000350D4, 0x00014100, 0x00016300, 0x00016300, 0x00016300, 0x00016300,
	0x00016300, 0x00000000, 0xD728AE22, 0x428A2F98, 0x23EF65CD, 0x71374491, 0xEC4D3B2F, 0xB5C0FBCF,
	0x8189DBBC, 0xE9B5DBA5, 0xF348B538, 0x3956C25B, 0xB605D019, 0x59F111F1, 0xAF194F9B, 0x923F82A4,
	0xDA6D8118, 0xAB1C5ED5, 0xA3030242, 0xD807AA98, 0x45706FBE, 0x12835B01, 0x4EE4B28C, 0x243185BE,
	0xD5FFB4E2, 0x550C7DC3, 0xF27B896F, 0x72BE5D74, 0x3B1696B1, 0x80DEB1FE, 0x25C71235, 0x9BDC06A7,
	0xCF692694, 0xC19BF174, 0x9EF14AD2, 0xE49B69C1, 0x384F25E3, 0xEFBE4786, 0x8B8CD5B5, 0x0FC19DC6,
	0x77AC9C65, 0x240CA1CC, 0x592B0275, 0x2DE92C6F, 0x6EA6E483, 0x4A7484AA, 0xBD41FBD4, 0x5CB0A9DC,
	0x831153B5, 0x76F988DA, 0xEE66DFAB, 0x983E5152, 0x2DB43210, 0xA831C66D, 0x98FB213F, 0xB00327C8,
	0xBEEF0EE4, 0xBF597FC7, 0x3DA88FC2, 0xC6E00BF3, 0x930AA725, 0xD5A79147, 0xE003826F, 0x06CA6351,
	0x0A0E6E70, 0x14292967, 0x46D22FFC, 0x27B70A85, 0x5C26C926, 0x2E1B2138, 0x5AC42AED, 0x4D2C6DFC,
	0x9D95B3DF, 0x53380D13, 0x8BAF63DE, 0x650A7354, 0x3C77B2A8, 0x766A0ABB, 0x47EDAEE6, 0x81C2C92E,
	0x1482353B, 0x92722C85, 0x4CF10364, 0xA2BFE8A1, 0xBC423001, 0xA81A664B, 0xD0F89791, 0xC24B8B70,
	0x0654BE30, 0xC76C51A3, 0xD6EF5218, 0xD192E819, 0x5565A910, 0xD6990624, 0x5771202A, 0xF40E3585,
	0x32BBD1B8, 0x106AA070, 0xB8D2D0C8, 0x19A4C116, 0x5141AB53, 0x1E376C08, 0xDF8EEB99, 0x2748774C,
	0xE19B48A8, 0x34B0BCB5, 0xC5C95A63, 0x391C0CB3, 0xE3418ACB, 0x4ED8AA4A, 0x7763E373, 0x5B9CCA4F,
	0xD6B2B8A3, 0x682E6FF3, 0x5DEFB2FC, 0x748F82EE, 0x43172F60, 0x78A5636F, 0xA1F0AB72, 0x84C87814,
	0x1A6439EC, 0x8CC70208, 0x23631E28, 0x90BEFFFA, 0xDE82BDE9, 0xA4506CEB, 0xB2C67915, 0xBEF9A3F7,
	0xE372532B, 0xC67178F2, 0xEA26619C, 0xCA273ECE, 0x21C0C207, 0xD186B8C7, 0xCDE0EB1E, 0xEADA7DD6,
	0xEE6ED178, 0xF57D4F7F, 0x72176FBA, 0x06F067AA, 0xA2C898A6, 0x0A637DC5, 0xBEF90DAE, 0x113F9804,
	0x131C471B, 0x1B710B35, 0x23047D84, 0x28DB77F5, 0x40C72493, 0x32CAAB7B, 0x15C9BEBC, 0x3C9EBE0A,
	0x9C100D4C, 0x431D67C4, 0xCB3E42B6, 0x4CC5D4BE, 0xFC657E2A, 0x597F299C, 0x3AD6FAEC, 0x5FCB6FAB,
	0x4A475817, 0x6C44198C, 0x00000080, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0xFFFFFFFF, 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF,
	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xADFAE6BC, 0x849E17A7,
	0xC2CAB9F3, 0x512563FC, 0xF2D1176B, 0x47422CE1, 0xE5E6BCF8, 0xF240A463, 0x817D0377, 0xA033EB2D,
	0x4539A1F4, 0x96C298D8, 0xE242E34F, 0x9B7F1AFE, 0x4AEBE78E, 0x169E0F7C, 0x5733CE2B, 0xCE5E316B,
	0x6840B6CB, 0xF551BF37, 0xFFFFFFFF, 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF,
	0xFFFFFFFF, 0xFCFFFFFF, 0xD835C65A, 0xE7933AAA, 0x55BDEBB3, 0xBC869876, 0xB0061D65, 0xF6B053CC,
	0x3E3CCE3B, 0x4B60D227, 0x68646365, 0x6B616D5F, 0x75705F65, 0x63696C62, 0x79656B5F, 0x68746F5F,
	0x65007265, 0x5F686463, 0x656B616D, 0x6E69665F, 0x6B5F6C61, 0x6F5F7965, 0x72656874, 0x32313000,
	0x36353433, 0x41393837, 0x45444342, 0x58304046, 0x32313000, 0x36353433, 0x61393837, 0x65646362,
	0x78304066, 0x00000400, 0x00000008, 0x00000000, 0x00010002, 0x00001000, 0x39326539, 0x36373237,
	0x65663335, 0x65303338, 0x39303739, 0x65353430, 0x34326461, 0x34616633, 0x65636134, 0x66653463,
	0x32333762, 0x38343032, 0x63343938, 0x36306434, 0x34383462, 0x38356563, 0x00000000, 0x0000572C,
	0x2000C000, 0x00000034, 0x00000104, 0x00005760, 0x2000C034, 0x00002B2C, 0x00000120, 0x00000110,
	0x00000043, 0xFFFFFFF8, 0x40404000, 0x40404040, 0x41414040, 0x40414141, 0x40404040, 0x40404040,
	0x40404040, 0x40404040, 0x02020540, 0x02020202, 0x02020202, 0x02020202, 0x20202002, 0x20202020,
	0x02202020, 0x02020202, 0x90900202, 0x90909090, 0x10101010, 0x10101010, 0x10101010, 0x10101010,
	0x10101010, 0x02020202, 0x88880202, 0x88888888, 0x08080808, 0x08080808, 0x08080808, 0x08080808,
	0x08080808, 0x02020202, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x32353846, 0x43453830, 0x32374336, 0x39373535, 0x36394134, 0x39324343, 0x46323431, 0x42384139,
	0x38313444, 0x31433345, 0x37364446, 0x42343433, 0x30444330, 0x44393238, 0x32423346, 0x36434542,
	0x33353230, 0x32363931, 0x36433339, 0x44343342, 0x35374633, 0x46323344, 0x44333132, 0x43353444,
	0x33373236, 0x35303544, 0x34464441, 0x44454343, 0x37353031, 0x35374243, 0x32434638, 0x45454136,
	0x34344146, 0x35353231, 0x45344445, 0x31433436, 0x45453939, 0x45353730, 0x36314637, 0x31363436,
	0x44463238, 0x34363442, 0x42393337, 0x42413836, 0x46414435, 0x36453046, 0x35394533, 0x31303235,
	0x34323836, 0x34353046, 0x44344642, 0x43384333, 0x39413039, 0x36424237, 0x35353642, 0x34383233,
	0x32344245, 0x43434639, 0x00000000, 0x65343637, 0x66653061, 0x39356131, 0x39316236, 0x62386536,
	0x36313337, 0x64303665, 0x64653465, 0x61626363, 0x38373865, 0x37653132, 0x35623736, 0x66366630,
	0x35363633, 0x65376536, 0x61326562, 0x00000000, 0x63663738, 0x39396135, 0x34373036, 0x35383161,
	0x33366132, 0x37383538, 0x37616434, 0x37383863, 0x32333935, 0x32313665, 0x31383563, 0x65366535,
	0x33376338, 0x62613637, 0x35363262, 0x63313032, 0x00000000, 0x64343663, 0x65343536, 0x63333632,
	0x35396164, 0x63643664, 0x64393137, 0x64666333, 0x62336336, 0x62323339, 0x61656631, 0x31323036,
	0x32653962, 0x36336361, 0x63353939, 0x36396434, 0x64336561, 0x00000000, 0x00005A68, 0x2000C000,
	0x00000028, 0x00000104, 0x00005A90, 0x2000C028, 0x00002C80, 0x00000120, 0x00000110, 0x00000043,
	0xFFFFFFF8, 0x40404000, 0x40404040, 0x41414040, 0x40414141, 0x40404040, 0x40404040, 0x40404040,
	0x40404040, 0x02020540, 0x02020202, 0x02020202, 0x02020202, 0x20202002, 0x20202020, 0x02202020,
	0x02020202, 0x90900202, 0x90909090, 0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x10101010,
	0x02020202, 0x88880202, 0x88888888, 0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x08080808,
	0x02020202, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x36434542, 0x33353230, 0x32363931, 0x36433339, 0x44343342, 0x35374633, 0x46323344, 0x44333132,
	0x43353444, 0x33373236, 0x35303544, 0x34464441, 0x44454343, 0x37353031, 0x35374243, 0x32434638,
	0x45454136, 0x34344146, 0x35353231, 0x45344445, 0x31433436, 0x45453939, 0x45353730, 0x36314637,
	0x31363436, 0x44463238, 0x34363442, 0x42393337, 0x42413836, 0x46414435, 0x36453046, 0x35394533,
	0x31303235, 0x34323836, 0x34353046, 0x44344642, 0x43384333, 0x39413039, 0x36424237, 0x35353642,
	0x34383233, 0x32344245, 0x43434639, 0x00000000, 0x65343637, 0x66653061, 0x39356131, 0x39316236,
	0x62386536, 0x36313337, 0x64303665, 0x64653465, 0x61626363, 0x38373865, 0x37653132, 0x35623736,
	0x66366630, 0x35363633, 0x65376536, 0x61326562, 0x00000000, 0x63663738, 0x39396135, 0x34373036,
	0x35383161, 0x33366132, 0x37383538, 0x37616434, 0x37383863, 0x32333935, 0x32313665, 0x31383563,
	0x65366535, 0x33376338, 0x62613637, 0x35363262, 0x63313032, 0x00000000, 0x64343663, 0x65343536,
	0x63333632, 0x35396164, 0x63643664, 0x64393137, 0x64666333, 0x62336336, 0x62323339, 0x61656631,
	0x31323036, 0x32653962, 0x36336361, 0x63353939, 0x36396434, 0x64336561, 0x00000000, 0x00005D6C,
	0x2000C000, 0x00000028, 0x00000104, 0x00005D94, 0x2000C028, 0x00002C80, 0x00000120, 0x00000110,
	0x00000043, 0xFFFFFFF8, 0x40404000, 0x40404040, 0x41414040, 0x40414141, 0x40404040, 0x40404040,
	0x40404040, 0x40404040, 0x02020540, 0x02020202, 0x02020202, 0x02020202, 0x20202002, 0x20202020,
	0x02202020, 0x02020202, 0x90900202, 0x90909090, 0x10101010, 0x10101010, 0x10101010, 0x10101010,
	0x10101010, 0x02020202, 0x88880202, 0x88888888, 0x08080808, 0x08080808, 0x08080808, 0x08080808,
	0x08080808, 0x02020202, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x90900202, 0x90909090, 0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x02020202,
	0x88880202, 0x88888888, 0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x02020202,
	0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x39413039, 0x36424237, 0x35353642, 0x34383233, 0x32344245, 0x43434639, 0x00000000, 0x65343637,
	0x66653061, 0x39356131, 0x39316236, 0x62386536, 0x36313337, 0x64303665, 0x64653465, 0x61626363,
	0x38373865, 0x37653132, 0x35623736, 0x66366630, 0x35363633, 0x65376536, 0x61326562, 0x00000000,
	0x63663738, 0x39396135, 0x34373036, 0x35383161, 0x33366132, 0x37383538, 0x37616434, 0x37383863,
	0x32333935, 0x32313665, 0x31383563, 0x65366535, 0x33376338, 0x62613637, 0x35363262, 0x63313032,
	0x00000000, 0x64343663, 0x65343536, 0x63333632, 0x35396164, 0x63643664, 0x64393137, 0x64666333,
	0x62336336, 0x62323339, 0x61656631, 0x31323036, 0x32653962, 0x36336361, 0x63353939, 0x36396434,
	0x64336561, 0x00000000, 0x000060D8, 0x2000C000, 0x00000028, 0x00000104, 0x00006100, 0x2000C028,
	0x00002C80, 0x00000120, 0x00000110, 0x00000043, 0xFFFFFFF8, 0x40404000, 0x40404040, 0x41414040,
	0x40414141, 0x40404040, 0x40404040, 0x40404040, 0x40404040, 0x02020540, 0x02020202, 0x02020202,
	0x02020202, 0x20202002, 0x20202020, 0x02202020, 0x02020202, 0x90900202, 0x90909090, 0x10101010,
	0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x02020202, 0x88880202, 0x88888888, 0x08080808,
	0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x02020202, 0x00000040, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x34373036, 0x35383161, 0x33366132, 0x37383538, 0x37616434, 0x37383863, 0x32333935, 0x32313665,
	0x31383563, 0x65366535, 0x33376338, 0x62613637, 0x35363262, 0x63313032, 0x00000000, 0x64343663,
	0x65343536, 0x63333632, 0x35396164, 0x63643664, 0x64393137, 0x64666333, 0x62336336, 0x62323339,
	0x61656631, 0x31323036, 0x32653962, 0x36336361, 0x63353939, 0x36396434, 0x64336561, 0x00000000,
	0x000062B0, 0x2000C000, 0x00000028, 0x00000104, 0x000062D8, 0x2000C028, 0x00002C80, 0x00000120,
	0x00000110, 0x00000043, 0xFFFFFFF8, 0x40404000, 0x40404040, 0x41414040, 0x40414141, 0x40404040,
	0x40404040, 0x40404040, 0x40404040, 0x02020540, 0x02020202, 0x02020202, 0x02020202, 0x20202002,
	0x20202020, 0x02202020, 0x02020202, 0x90900202, 0x90909090, 0x10101010, 0x10101010, 0x10101010,
	0x10101010, 0x10101010, 0x02020202, 0x88880202, 0x88888888, 0x08080808, 0x08080808, 0x08080808,
	0x08080808, 0x08080808, 0x02020202, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF,
	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x41414040, 0x40414141, 0x40404040, 0x40404040, 0x40404040, 0x40404040, 0x02020540, 0x02020202,
	0x02020202, 0x02020202, 0x20202002, 0x20202020, 0x02202020, 0x02020202, 0x90900202, 0x90909090,
	0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x02020202, 0x88880202, 0x88888888,
	0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x02020202, 0x00000040, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x10101010, 0x10101010, 0x10101010, 0x02020202, 0x88880202, 0x88888888, 0x08080808, 0x08080808,
	0x08080808, 0x08080808, 0x08080808, 0x02020202, 0x00000040, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x34323836, 0x34353046, 0x44344642, 0x43384333, 0x39413039, 0x36424237, 0x35353642, 0x34383233,
	0x32344245, 0x43434639, 0x00000000, 0x65343637, 0x66653061, 0x39356131, 0x39316236, 0x62386536,
	0x36313337, 0x64303665, 0x64653465, 0x61626363, 0x38373865, 0x37653132, 0x35623736, 0x66366630,
	0x35363633, 0x65376536, 0x61326562, 0x00000000, 0x63663738, 0x39396135, 0x34373036, 0x35383161,
	0x33366132, 0x37383538, 0x37616434, 0x37383863, 0x32333935, 0x32313665, 0x31383563, 0x65366535,
	0x33376338, 0x62613637, 0x35363262, 0x63313032, 0x00000000, 0x64343663, 0x65343536, 0x63333632,
	0x35396164, 0x63643664, 0x64393137, 0x64666333, 0x62336336, 0x62323339, 0x61656631, 0x31323036,
	0x32653962, 0x36336361, 0x63353939, 0x36396434, 0x64336561, 0x00000000, 0x00006768, 0x2000C000,
	0x00000034, 0x00000104, 0x0000679C, 0x2000C034, 0x00002C5C, 0x00000120, 0x00000110, 0x00000043,
	0xFFFFFFF8, 0x40404000, 0x40404040, 0x41414040, 0x40414141, 0x40404040, 0x40404040, 0x40404040,
	0x40404040, 0x02020540, 0x02020202, 0x02020202, 0x02020202, 0x20202002, 0x20202020, 0x02202020,
	0x02020202, 0x90900202, 0x90909090, 0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x10101010,
	0x02020202, 0x88880202, 0x88888888, 0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x08080808,
	0x02020202, 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF,
	0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x00020B13, 0x00000003, 0x000102E0, 0x00037B4E, 0x00027B51, 0x0003E378, 0x00000001, 0x00020B13,
	0x00020B13, 0x00020B13, 0x00000003, 0x000102E0, 0x00037B4E, 0x00027B51, 0x00000003, 0x000102E0,
	0x00037B4E, 0x00027B51, 0x0003E382, 0x00000001, 0x0001E213, 0x00001105, 0x0001E614, 0x00003333,
	0x0001E615, 0x00001313, 0x0001E214, 0x00001414, 0x0001E615, 0x00001315, 0x0001E214, 0x00003314,
	0x0001E215, 0x00001515, 0x0001E616, 0x00001515, 0x0001E614, 0x00001514, 0x0001E615, 0x00001614,
	0x0001CD15, 0x00000001, 0x0001E781, 0x00008140, 0x0001CD81, 0x00000001, 0x0001E213, 0x00008A8A,
	0x0001E280, 0x00008A88, 0x0001E281, 0x00001389, 0x00000001, 0x0001E215, 0x00001105, 0x0001E214,
	0x00008080, 0x0001E212, 0x00003380, 0x0001E214, 0x00008014, 0x0001E212, 0x00008012, 0x0001E213,
	0x00008181, 0x0001E216, 0x00008180, 0x0001E614, 0x00001214, 0x0001E613, 0x00001613, 0x0001E614,
	0x00001415, 0x0001E712, 0x00001413, 0x00000001, 0x0001E212, 0x00008A88, 0x0001E213, 0x00008888,
	0x0001E614, 0x00008913, 0x0001E213, 0x00001313, 0x0001E282, 0x00001212, 0x0001E212, 0x00001412,
	0x0001E214, 0x00001414, 0x00022BE4, 0x00032BE7, 0x0001E614, 0x00001214, 0x0001E680, 0x00001514,
	0x0001E612, 0x00001282, 0x0001E213, 0x00008213, 0x0001E212, 0x00008012, 0x0001E681, 0x00001312,
	0x00000001, 0x0001FA15, 0x00000482, 0x00000001, 0x0001E215, 0x00003382, 0x00000001, 0x00010340,
	0x000203ED, 0x00010390, 0x0001E617, 0x00009198, 0x0001E212, 0x00008A8A, 0x0001E213, 0x00008A90,
	0x00022C1A, 0x00032C1D, 0x0001E613, 0x00008813, 0x0001E614, 0x00008914, 0x0001E215, 0x00008A13,
	0x0001E213, 0x00001313, 0x0001E612, 0x00001512, 0x0001E282, 0x00001515, 0x0001E212, 0x00001213,
	0x0001E215, 0x00001514, 0x0001E214, 0x00001414, 0x0001E612, 0x00001512, 0x0001E213, 0x00009082,
	0x0001E216, 0x00008217, 0x0001E680, 0x00001214, 0x0001E613, 0x00008013, 0x0001E614, 0x00008016,
	0x0001E212, 0x00001315, 0x0001E213, 0x00008214, 0x0001E681, 0x00001312, 0x00000001, 0x0001E214,
	0x00001217, 0x00000001, 0x0001E214, 0x00001217, 0x0001E212, 0x00001233, 0x00000001, 0x00020BC7,
	0x00020BC7, 0x00020BC7, 0x00020BC7, 0x00000003, 0x000102E0, 0x00037BEA, 0x00027BEC, 0x0003E422,
	0x00000001, 0x00020BC7, 0x00020BC7, 0x00020BC7, 0x00000003, 0x000102E0, 0x00037BEA, 0x00027BEC,
	0x00000003, 0x000102E0, 0x00037BEA, 0x00027BEC, 0x0003E42C, 0x00000001, 0x0001E47F, 0x00000005,
	0x00000001, 0x0001E681, 0x00008180, 0x00000001, 0x00016300, 0x000209FE, 0x00010402, 0x00010507,
	0x00020A23, 0x00020A3C, 0x00020AE7, 0x00020881, 0x0001002E, 0x00010142, 0x0001020A, 0x00020896,
	0x000258D4, 0x00010006, 0x0001010A, 0x0001020B, 0x00020896, 0x0001E60B, 0x00000B0C, 0x0001E80B,
	0x0000070B, 0x0001CD0B, 0x000250D4, 0x00014100, 0x00020AE7, 0x00020881, 0x0001010A, 0x0001E77F,
	0x00000188, 0x000342CD, 0x0001E77F, 0x00000189, 0x000342CC, 0x0001E80D, 0x00000B42, 0x0001000C,
	0x0001010D, 0x00010231, 0x00020896, 0x0001000A, 0x00010232, 0x00020896, 0x00020AEC, 0x000209FE,
	0x00010208, 0x00010332, 0x00010402, 0x00010531, 0x0001062E, 0x00020A91, 0x00020AE7, 0x0001002E,
	0x00010142, 0x00010212, 0x00020896, 0x0001E77F, 0x00000A12, 0x000350D4, 0x00014100, 0x00016300,
	0x00016300, 0x00016300, 0x00016300, 0x00016300, 0x5F4E5552, 0x00495053, 0xFFFFFFFF, 0x01000000,
	0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000,
	0xFFFFFFFF, 0xFFFFFFFF, 0xADFAE6BC, 0x849E17A7, 0xC2CAB9F3, 0x512563FC, 0xF2D1176B, 0x47422CE1,
	0xE5E6BCF8, 0xF240A463, 0x817D0377, 0xA033EB2D, 0x4539A1F4, 0x96C298D8, 0xE242E34F, 0x9B7F1AFE,
	0x4AEBE78E, 0x169E0F7C, 0x5733CE2B, 0xCE5E316B, 0x6840B6CB, 0xF551BF37, 0xFFFFFFFF, 0x01000000,
	0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFCFFFFFF, 0xD835C65A, 0xE7933AAA,
	0x55BDEBB3, 0xBC869876, 0xB0061D65, 0xF6B053CC, 0x3E3CCE3B, 0x4B60D227, 0x5F746567, 0x5F617372,
	0x61726170, 0x6574656D, 0x65730072, 0x61705F74, 0x656D6172, 0x73726574, 0x74656700, 0x7261705F,
	0x74656D61, 0x00737265, 0x5F746567, 0x5F617372, 0x61726170, 0x64636500, 0x616D5F68, 0x705F656B,
	0x696C6275, 0x656B5F63, 0x746F5F79, 0x00726568, 0x68646365, 0x6B616D5F, 0x69665F65, 0x5F6C616E,
	0x5F79656B, 0x6568746F, 0x31300072, 0x35343332, 0x39383736, 0x44434241, 0x30404645, 0x31300058,
	0x35343332, 0x39383736, 0x64636261, 0x30406665, 0x00040078, 0x00000800, 0x00000000, 0x01000200,
	0x00100000, 0x39326539, 0x36373237, 0x65663335, 0x65303338, 0x39303739, 0x65353430, 0x34326461,
	0x34616633, 0x65636134, 0x66653463, 0x32333762, 0x38343032, 0x63343938, 0x36306434, 0x34383462,
	0x38356563, 0x00000000, 0x2A2A0A0D, 0x2A2A2A2A, 0x2A2A2A2A, 0x6547092A, 0x6E615274, 0x286D6F64,
	0x646E6152, 0x66667542, 0x732C7265, 0x29657A69, 0x2A09093B, 0x2A2A2A2A, 0x646E692A, 0x25207865,
	0x2A2A2A64, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A,
	0x2A2A2A2A, 0x00000000, 0x2A2A0A0D, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A,
	0x6E692A2A, 0x20786564, 0x2A2A6425, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A,
	0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x0000002A, 0x2A2A0A0D, 0x2A2A2A2A, 0x2A2A2A2A, 0x4443452A,
	0x35325048, 0x59454B36, 0x2A4E4547, 0x2A2A2A2A, 0x646E692A, 0x25207865, 0x2A2A2A64, 0x2A2A2A2A,
	0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x2A2A2A2A, 0x00000000,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030,
	0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x31303030, 0x31303030,
	0x00000000, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x30303030, 0x62376630,
	0x34353535, 0x62616639, 0x63333735, 0x31363330, 0x32333862, 0x62306461, 0x64633865, 0x39666565,
	0x36356231, 0x00000000, 0x42363530, 0x31323430, 0x35454636, 0x34353346, 0x37374341, 0x41303532,
	0x42364234, 0x35384330, 0x38413532, 0x39354335, 0x44423042, 0x35433038, 0x30353436, 0x44323241,
	0x33344635, 0x39354538, 0x33334136, 0x38414133, 0x32453537, 0x44443139, 0x34463334, 0x38424338,
	0x44394238, 0x30434635, 0x39393444, 0x43463946, 0x33433144, 0x39463739, 0x30434641, 0x44433037,
	0x39334539, 0x44384338, 0x36453931, 0x37424431, 0x31343743, 0x42364130, 0x35373632, 0x46424644,
	0x34334435, 0x30384235, 0x30324434, 0x44444131, 0x44323035, 0x32454335, 0x42434644, 0x43313930,
	0x39393945, 0x45424237, 0x37354542, 0x46363033, 0x45333833, 0x38354434, 0x33303138, 0x36333046,
	0x38453746, 0x39314435, 0x31443433, 0x33413235, 0x34453332, 0x42443841, 0x44313534, 0x41344636,
	0x42314235, 0x30314630, 0x31434332, 0x30453035, 0x45454632, 0x38423245, 0x41454438, 0x34444134,
	0x41423143, 0x32424343, 0x34384434, 0x44323730, 0x31453431, 0x41343244, 0x31373736, 0x30343746,
	0x33454538, 0x34363530, 0x36384246, 0x39333444, 0x34334133, 0x30464342, 0x38383742, 0x44313035,
	0x33333931, 0x31463330, 0x32324133, 0x30423438, 0x30463130, 0x39343646, 0x37464145, 0x38323339,
	0x43413444, 0x33344335, 0x34424130, 0x39343134, 0x39413032, 0x45303634, 0x37423144, 0x30344342,
	0x35364345, 0x37384533, 0x39304436, 0x35434241, 0x45413930, 0x35423534, 0x39313532, 0x36313130,
	0x32433041, 0x31303136, 0x32383438, 0x30353839, 0x43314339, 0x33464233, 0x33383441, 0x37323745,
	0x34353034, 0x45353145, 0x37303739, 0x36333035, 0x39383945, 0x39303646, 0x30383233, 0x32354237,
	0x35373735, 0x39374531, 0x00000000, 0x32356266, 0x66626636, 0x30316561, 0x30613264, 0x61663864,
	0x34643462, 0x63636462, 0x62333838, 0x64616662, 0x61326565, 0x61653337, 0x31613636, 0x65663161,
	0x63363138, 0x64323832, 0x39656332, 0x00000000, 0x3D3D0A0D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D,
	0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x45203D3D, 0x50484443, 0x4B363532, 0x45475945, 0x3D3D204E,
	0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x00003D3D, 0x3D3D0A0D,
	0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x203D3D3D, 0x6425206A, 0x20692020,
	0x3D206425, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x003D3D3D,
	0x3D200A0D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x45543D3D, 0x455F5453,
	0x41534443, 0x59454B5F, 0x44414F4C, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D, 0x3D3D3D3D,
	0x3D3D3D3D, 0x3D3D3D3D, 0x0000003D, 0x41393030, 0x35464645, 0x36343634, 0x30354532, 0x43454642,
	0x31434431, 0x35443139, 0x45433044, 0x30393534, 0x35373936, 0x33334636, 0x41353336, 0x33323644,
	0x46463731, 0x38393341, 0x42324431, 0x45343736, 0x38453644, 0x37343533, 0x39373445, 0x30394143,
	0x31464543, 0x34374245, 0x38414243, 0x30363346, 0x37463430, 0x37344233, 0x35314237, 0x46344239,
	0x33463445, 0x44423542, 0x45353041, 0x37443135, 0x36433843, 0x32433437, 0x44423942, 0x30363032,
	0x37353943, 0x36364534, 0x31313331, 0x44413446, 0x43464637, 0x33304334, 0x31463337, 0x37383944,
	0x44353035, 0x34333445, 0x44323341, 0x38393842, 0x31443042, 0x31443736, 0x42453838, 0x35343639,
	0x44393132, 0x32323235, 0x30314245, 0x46374137, 0x34454141, 0x30373133, 0x41314535, 0x38434433,
	0x43373446, 0x36333944, 0x41363942, 0x39443230, 0x39453135, 0x39313739, 0x35333639, 0x42393445,
	0x46333235, 0x45313044, 0x43344431, 0x42433030, 0x31353544, 0x35393346, 0x46323032, 0x30313737,
	0x30353730, 0x44314535, 0x42383444, 0x34304237, 0x42323841, 0x46323938, 0x38323745, 0x30393145,
	0x45313742, 0x31344436, 0x37353832, 0x42394331, 0x39314445, 0x31363043, 0x42443332, 0x41454533,
	0x45344131, 0x35343643, 0x46393134, 0x39373843, 0x46383942, 0x36423238, 0x42333635, 0x43324137,
	0x30383236, 0x42394244, 0x34333430, 0x36353741, 0x33323035, 0x30453630, 0x34343242, 0x44393534,
	0x32313044, 0x31374143, 0x36413839, 0x30303033, 0x32313835, 0x30374531, 0x42373139, 0x36463934,
	0x45323034, 0x38333745, 0x36433641, 0x45464230, 0x43334442, 0x30333144, 0x42464443, 0x39333131,
	0x37424132, 0x39414433, 0x41433841, 0x00000000, 0x41393131, 0x35464645, 0x36343634, 0x30354532,
	0x43454642, 0x31434431, 0x35443139, 0x45433044, 0x30393534, 0x35373936, 0x33334636, 0x41353336,
	0x33323644, 0x46463731, 0x38393341, 0x42324431, 0x45343736, 0x38453644, 0x37343533, 0x39373445,
	0x30394143, 0x31464543, 0x34374245, 0x38414243, 0x30363346, 0x37463430, 0x37344233, 0x35314237,
	0x46344239, 0x33463445, 0x44423542, 0x45353041, 0x37443135, 0x36433843, 0x32433437, 0x44423942,
	0x30363032, 0x37353943, 0x36364534, 0x31313331, 0x44413446, 0x43464637, 0x33304334, 0x31463337,
	0x37383944, 0x44353035, 0x34333445, 0x44323341, 0x38393842, 0x31443042, 0x31443736, 0x42453838,
	0x35343639, 0x44393132, 0x32323235, 0x30314245, 0x46374137, 0x34454141, 0x30373133, 0x41314535,
	0x38434433, 0x43373446, 0x36333944, 0x41363942, 0x39443230, 0x39453135, 0x39313739, 0x35333639,
	0x42393445, 0x46333235, 0x45313044, 0x43344431, 0x42433030, 0x31353544, 0x35393346, 0x46323032,
	0x30313737, 0x30353730, 0x44314535, 0x42383444, 0x34304237, 0x42323841, 0x46323938, 0x38323745,
	0x30393145, 0x45313742, 0x31344436, 0x37353832, 0x42394331, 0x39314445, 0x31363043, 0x42443332,
	0x41454533, 0x45344131, 0x35343643, 0x46393134, 0x39373843, 0x46383942, 0x36423238, 0x42333635,
	0x43324137, 0x30383236, 0x42394244, 0x34333430, 0x36353741, 0x33323035, 0x30453630, 0x34343242,
	0x44393534, 0x32313044, 0x31374143, 0x36413839, 0x30303033, 0x32313835, 0x30374531, 0x42373139,
	0x36463934, 0x45323034, 0x38333745, 0x36433641, 0x45464230, 0x43334442, 0x30333144, 0x42464443,
	0x39333131, 0x37424132, 0x39414433, 0x41433841, 0x00000000, 0x35344541, 0x36354445, 0x45433130,
	0x38423643, 0x35304343, 0x33303846, 0x43353339, 0x44343736, 0x30454244, 0x43353744, 0x39304334,
	0x39374446, 0x43463135, 0x43304236, 0x33434541, 0x38413331, 0x39334644, 0x43303739, 0x42383135,
	0x41424646, 0x36444535, 0x46334638, 0x46374430, 0x34413232, 0x44393230, 0x46333134, 0x30454131,
	0x45344537, 0x45394542, 0x37373134, 0x33324543, 0x35463745, 0x42343034, 0x45393635, 0x31454534,
	0x46434442, 0x46314333, 0x45333042, 0x33313146, 0x44323038, 0x35384634, 0x39424535, 0x33313542,
	0x41354234, 0x30384337, 0x44413538, 0x36454143, 0x46324146, 0x31343141, 0x33434537, 0x42333637,
	0x31373145, 0x36433042, 0x36374232, 0x45444530, 0x31433332, 0x39444132, 0x38394232, 0x34383830,
	0x31343643, 0x38413546, 0x32434146, 0x41444236, 0x30413444, 0x31383333, 0x46323241, 0x37423145,
	0x38383435, 0x34393035, 0x35323843, 0x34443630, 0x41393130, 0x41353335, 0x41363832, 0x32424546,
	0x42423137, 0x35414239, 0x45443239, 0x43443831, 0x30303646, 0x45413243, 0x35454145, 0x32304536,
	0x46433746, 0x43463937, 0x46433431, 0x43444233, 0x38444337, 0x42454634, 0x39464242, 0x41433035,
	0x30333039, 0x32324234, 0x37413931, 0x36304141, 0x46454133, 0x33433241, 0x38393143, 0x36354530,
	0x36444330, 0x45464134, 0x35393737, 0x36423538, 0x36373031, 0x39423735, 0x35383735, 0x44464537,
	0x31303645, 0x38383930, 0x44374241, 0x37313445, 0x38384346, 0x33463844, 0x34433438, 0x37453645,
	0x46334332, 0x45333439, 0x31334330, 0x34433043, 0x43433541, 0x38463633, 0x38443937, 0x43413341,
	0x44374439, 0x36383935, 0x41414530, 0x42364144, 0x42423338, 0x00000000, 0x41453335, 0x30434435,
	0x32444338, 0x42463036, 0x35384233, 0x37363538, 0x46373832, 0x35313941, 0x33433235, 0x46324230,
	0x42464245, 0x33313241, 0x45413046, 0x30373738, 0x36304432, 0x39314438, 0x30424142, 0x35454637,
	0x32353437, 0x42464433, 0x33313234, 0x38364439, 0x35433343, 0x45454641, 0x46423045, 0x42433445,
	0x39363937, 0x33464243, 0x38423238, 0x36443430, 0x33313645, 0x34313639, 0x44324534, 0x30364530,
	0x46313437, 0x33393938, 0x31303343, 0x38354234, 0x31423942, 0x41373539, 0x42414238, 0x33324443,
	0x35384641, 0x43344634, 0x46363533, 0x36363142, 0x37414132, 0x43464232, 0x35453743, 0x35353638,
	0x34434439, 0x44303832, 0x43303631, 0x37363231, 0x37413538, 0x42453332, 0x45424545, 0x31374646,
	0x35313146, 0x34343439, 0x45414130, 0x44373846, 0x39373031, 0x37384133, 0x32413437, 0x34443933,
	0x43343041, 0x45463738, 0x37363431, 0x41443942, 0x32353846, 0x43453830, 0x32374336, 0x39373535,
	0x36394134, 0x39324343, 0x46323431, 0x42384139, 0x38313444, 0x31433345, 0x37364446, 0x42343433,
	0x30444330, 0x44393238, 0x32423346, 0x36434542, 0x33353230, 0x32363931, 0x36433339, 0x44343342,
	0x35374633, 0x46323344, 0x44333132, 0x43353444, 0x33373236, 0x35303544, 0x34464441, 0x44454343,
	0x37353031, 0x35374243, 0x32434638, 0x45454136, 0x34344146, 0x35353231, 0x45344445, 0x31433436,
	0x45453939, 0x45353730, 0x36314637, 0x31363436, 0x44463238, 0x34363442, 0x42393337, 0x42413836,
	0x46414435, 0x36453046, 0x35394533, 0x31303235, 0x34323836, 0x34353046, 0x44344642, 0x43384333,
	0x39413039, 0x36424237, 0x35353642, 0x34383233, 0x32344245, 0x43434639, 0x00000000, 0x65343637,
	0x66653061, 0x39356131, 0x39316236, 0x62386536, 0x36313337, 0x64303665, 0x64653465, 0x61626363,
	0x38373865, 0x37653132, 0x35623736, 0x66366630, 0x35363633, 0x65376536, 0x61326562, 0x00000000,
	0x63663738, 0x39396135, 0x34373036, 0x35383161, 0x33366132, 0x37383538, 0x37616434, 0x37383863,
	0x32333935, 0x32313665, 0x31383563, 0x65366535, 0x33376338, 0x62613637, 0x35363262, 0x63313032,
	0x00000000, 0x64343663, 0x65343536, 0x63333632, 0x35396164, 0x63643664, 0x64393137, 0x64666333,
	0x62336336, 0x62323339, 0x61656631, 0x31323036, 0x32653962, 0x36336361, 0x63353939, 0x36396434,
	0x64336561, 0x00000000, 0x00007DF8, 0x2000C000, 0x00000034, 0x00000104, 0x00007E2C, 0x2000C034,
	0x00002C5C, 0x00000120, 0x00000110, 0x00000043, 0xFFFFFFF8, 0x40404000, 0x40404040, 0x41414040,
	0x40414141, 0x40404040, 0x40404040, 0x40404040, 0x40404040, 0x02020540, 0x02020202, 0x02020202,
	0x02020202, 0x20202002, 0x20202020, 0x02202020, 0x02020202, 0x90900202, 0x90909090, 0x10101010,
	0x10101010, 0x10101010, 0x10101010, 0x10101010, 0x02020202, 0x88880202, 0x88888888, 0x08080808,
	0x08080808, 0x08080808, 0x08080808, 0x08080808, 0x02020202, 0x00000040, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x01234567, 0x02345678, 0x03456789, 0x0456789A, 0x056789A1, 0x06789A12, 0x0789A123, 0x089A1234,
	0x09A12345, 0x0A123456, 0x0B234567, 0x0C234567, 0x0D234567, 0x0E234567, 0x0F234567, 0x01234567,
	0x01234567, 0x02345678, 0x03456789, 0x0456789A, 0x056789A1, 0x06789A12, 0x0789A123, 0x089A1234,
	0x09A12345, 0x0A123456, 0x0B234567, 0x0C234567, 0x0D234567, 0x0E234567, 0x0F234567, 0x01234567,
	0x12345678, 0x12345678, 0x12345678, 0x00008103, 0x00000000, 0x00000000, 0x00008105, 0x00008107,
	0x000080DD, 0x000080E1, 0x000080E9, 0x000080ED, 0x000080F1, 0x000080F5, 0x000080F9, 0x00008109,
	0x00008109, 0x00008109, 0x00008109, 0x00000000, 0x00008109, 0x00008109, 0x00008109, 0x00008109,
	0x00008109, 0x00008109, 0x00008109, 0x00008109, 0x00008109, 0x00008109, 0x00008109, 0x00008109
	
	};		
	unsigned int i;
	unsigned int j;
	unsigned int *pCM0Code = &arr[0][0];
	unsigned char Buffer[64];
	unsigned int addr = 0;	
	int msb;
	int lsb;
	for(i = 0; i < CM0CODECNT*8; i += 16 )
	{
		for( j = 0; j < 16; j++ )
		{
			Buffer[j*4 + 0] =  pCM0Code[i+j] & 0xFF;
			Buffer[j*4 + 1] = (pCM0Code[i+j] >> 8) & 0xFF;
			Buffer[j*4 + 2] = (pCM0Code[i+j] >> 16) & 0xFF;
			Buffer[j*4 + 3] = (pCM0Code[i+j] >> 24) & 0xFF;
		}
		msb = (addr>>8) & 0xFF;
		lsb = addr & 0xFF;
		if(eep_page_write(msb, lsb,Buffer, 1) == 0){
			printf("\n FAIL now exit function");
			break;
		}
		addr += 64;
	}	

}
#endif 
unsigned char ShaBitSize(long long x,unsigned char *bitsize)
{
	int i;
	long long data_size;
	unsigned char hex_size[8];
	data_size = x*8;

	hex_size[0] = ((unsigned char) (data_size >> 56)) & 0xff;
	hex_size[1] = ((unsigned char) (data_size >> 48)) & 0xff;
	hex_size[2] = ((unsigned char) (data_size >> 40)) & 0xff;
	hex_size[3] = ((unsigned char) (data_size >> 32)) & 0xff;
	hex_size[4] = ((unsigned char) (data_size >> 24)) & 0xff;
	hex_size[5] = ((unsigned char) (data_size >> 16)) & 0xff;
	hex_size[6] = ((unsigned char) (data_size >>  8)) & 0xff;
	hex_size[7] = ((unsigned char) (data_size >>  0)) & 0xff;

	for( i=0; i<8; i++)
	{
		bitsize[i] = hex_size[i];
	}
	return 0;
}


long long ShaMultiFrameFrame(unsigned char *txdata, long long ByteNo)
{
	int success =  1;
	unsigned char tx_data[64];
	unsigned char rx_data[64];

	long long i;
	long long j;
	long long temp_cnt = 0; 
	//multi_frame data array
	long long array_no=0, array_cnt=0; 
	unsigned int frame_cnt = 0;
	unsigned char frame_buffer[64];
	tx_data[0] = 2;
	tspi_interface(cs, ADDR_NOR_W,RG_SHA_CTRL				   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
	tx_data[0] = 0x6;
	tspi_interface(cs, ADDR_NOR_W,RG_ST0_OPMODE					, NULL, NULL, NULL, NULL, tx_data, rx_data, 1); 
	tx_data[0] = 0x4;
	tspi_interface(cs, ADDR_NOR_W,RG_ST1_STDSPI_OPMODE 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	

	frame_cnt = (ByteNo/64); // sha operation counter

	for( i=0; i<frame_cnt; i++)
	{
		array_cnt = (i+1) * 64;

		for( array_no=0; array_no<64; array_no++)
		{
			temp_cnt = (array_cnt-64) + array_no;
			frame_buffer[array_no] = txdata[temp_cnt];
		}
#ifdef DEBUG_SHA
		printf("\r\n frame_buffer %d line %d  ShaMultiFrameFrame",gFrameNumber++, __LINE__);
		printbyte(frame_buffer,64);
#endif
		reversebuffer(tx_data, frame_buffer, 64);
		tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 64);	
		Delay_us(10);
	}

	return temp_cnt+1;
}


unsigned char ShaSingleFrame(unsigned char *txdata, long long temp_cnt, long long ByteNo, unsigned char frame_type)
{
	int success =  1;
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	int i, j;
	long long last_cnt;
	long long mod55 = 0;
	unsigned char frame_buffer[64] = { 0x00, };
	unsigned char bitsize[8];

	last_cnt = ByteNo % 64;			
	ShaBitSize(ByteNo,bitsize);


	for( j=0; j<64; j++)
	{
		frame_buffer[j] = 0x00;
	}

	//last frame input user write last txdata_Bytes
	for( j=0; j<last_cnt; j++)
	{

		frame_buffer[j] = txdata[j]; 
	}
	//txdata last Byte index : write data = 0x80;

	frame_buffer[last_cnt] = 0x80;

	if ( last_cnt <= 55 )
	{

		tx_data[0] =0;
		tspi_interface(cs, ADDR_NOR_W,RG_SHA_CTRL				   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);
		tx_data[0] = 0x6;
		tspi_interface(cs, ADDR_NOR_W,RG_ST0_OPMODE 				, NULL, NULL, NULL, NULL, tx_data, rx_data, 1); 
		tx_data[0] = 0x4;
		tspi_interface(cs, ADDR_NOR_W,RG_ST1_STDSPI_OPMODE				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
		for( j=(last_cnt+1); j<64; j++)
		{
			frame_buffer[j] = 0x00;
		}

		for( j=0; j<8; j++) frame_buffer[j+56] = bitsize[j];

		reversebuffer(tx_data, frame_buffer, 64);
#ifdef DEBUG_SHA
		printf("\r\n frame_buffer %d line %d ShaSingleFrame <55",gFrameNumber++, __LINE__);
		printbyte(frame_buffer,64);	
#endif
		tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 64);

	}

	if ( last_cnt >= 56 )
	{

		reversebuffer(tx_data, frame_buffer, 64);
#ifdef DEBUG_SHA
		printf("\r\n frame_buffer %d line %d",gFrameNumber++, __LINE__);
		printbyte(frame_buffer,64);
#endif
		tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 64);	
		Delay_us(10);		

		for( j=0; j<64; j++)
		{
			frame_buffer[j] = 0x00;
		}

		for( j=0; j<8; j++) frame_buffer[j+56] = bitsize[j];
		tx_data[0] = 3;
		tspi_interface(cs, ADDR_NOR_W,RG_SHA_CTRL				   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

#ifdef DEBUG_SHA
		printf("\r\n frame_buffer %d line %d",gFrameNumber++, __LINE__);

		printf("\r\n frame_buffer %d",gFrameNumber++);
#endif
		printbyte(frame_buffer,64);		
		tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 64);	
		Delay_us(10);		
	}



	return 0;
}


unsigned char LastMultiFrame(unsigned char *txdata, long long temp_cnt, long long ByteNo, unsigned char frame_type)
{
	int i, j;
	long long last_cnt;
	long long mod55 = 0;
	unsigned char frame_buffer[64] = { 0x00, };
	unsigned char bitsize[8];
	unsigned char tx_data[64];
	unsigned char rx_data[64];

	last_cnt = ByteNo % 64;			
	ShaBitSize(ByteNo,bitsize);

#ifdef DEBUG_SHA
	printf("\r\n last_cnt %d",last_cnt);
	printf("\r\n temp_cnt %d",temp_cnt);
#endif

	//last frame input user write last txdata_Bytes
	for( j=0; j<last_cnt; j++)
	{
		frame_buffer[j] = txdata[(temp_cnt+j)]; // only single frame operation

	}
	//txdata last Byte index : write data = 0x80;
	frame_buffer[last_cnt] = 0x80;






	if ( last_cnt <= 55 )
	{
		for( j=(last_cnt+1); j<64; j++)
		{
			frame_buffer[j] = 0x00;
		}

		for( j=0; j<8; j++) frame_buffer[j+56] = bitsize[j];


		tx_data[0] = 3;
		tspi_interface(cs, ADDR_NOR_W,RG_SHA_CTRL				   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

		reversebuffer(tx_data, frame_buffer, 64);
		tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 64);	
		Delay_us(10);		
#ifdef DEBUG_SHA		
		printf("\r\n frame_buffer %d line %d",gFrameNumber++, __LINE__);
		printbyte(frame_buffer,64);	
#endif
	}


	if ( last_cnt >= 56 )
	{

		reversebuffer(tx_data, frame_buffer, 64);
#ifdef DEBUG_SHA		
		printf("\r\n frame_buffer %d line %d",gFrameNumber++, __LINE__);

		printbyte(frame_buffer,64);
#endif
		tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 64);	
		Delay_us(10);		

		for( j=0; j<64; j++)
		{
			frame_buffer[j] = 0x00;
		}

		for( j=0; j<8; j++) frame_buffer[j+56] = bitsize[j];
		tx_data[0] = 3;
		tspi_interface(cs, ADDR_NOR_W,RG_SHA_CTRL				   , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);

		reversebuffer(tx_data, frame_buffer, 64);
#ifdef DEBUG_SHA
		printf("\r\n frame_buffer %d line %d",gFrameNumber++, __LINE__);

		printbyte(frame_buffer,64);		
#endif
		tspi_interface(cs, ADDR_NOR_W,RG_EEBUF300 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 64);	
		Delay_us(10);		
	}

	return 0;
}


unsigned char _STANDARD_SHA_MODE(unsigned char *txdata, unsigned char *rxdata, long long ByteNo)
{
	long long i;
	long long temp_cnt;
	unsigned char frame_type;
	unsigned char tx_data[64];
	unsigned char rx_data[64];


	//gene_wake_up();

	if(ByteNo > 55)
	{
		frame_type = 1; // multi-frame set
	}
	else
	{
		frame_type = 0; // single-frame set
	}
#ifdef DEBUG_SHA
	printf("\r\n ByteNo %d",ByteNo);
#endif
	if( !frame_type )
	{
#ifdef DEBUG_SHA
		printf("\r\n SingleFrame");
#endif
		temp_cnt = 0;		
		ShaSingleFrame(txdata,temp_cnt,ByteNo,frame_type);		

	}
	else
	{
#ifdef DEBUG_SHA
		printf("\r\n MultiFrame");
#endif
		temp_cnt = ShaMultiFrameFrame(txdata, ByteNo);

		//multi frame last single frame make	
		if(temp_cnt == 1)
			temp_cnt = 0;
		LastMultiFrame(txdata,temp_cnt,ByteNo,frame_type);
	}

	tspi_interface(cs, ADDR_NOR_R,RG_EEBUF400 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 32);	
	reversebuffer(rxdata,rx_data,32);

	tx_data[0] = 1;
	tspi_interface(cs, ADDR_NOR_W,RG_ST1_STDSPI_OPMODE 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 1;
	tspi_interface(cs, ADDR_NOR_W,RG_ST0_OPMODE 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	tx_data[0] = 0;
	tspi_interface(cs, ADDR_NOR_W,RG_ACCESS 				  , NULL, NULL, NULL, NULL, tx_data, rx_data, 1);	
	endOP();

}


int SHA_1Frame_TEST()
{
	int success =  1;

	unsigned char buf_1FRMANS[64];
	unsigned char buf_1FRHW[64];	
	unsigned char buf_1_Frame[] = {0x61,0x62,0x63};
	int i = 0;
	int j = 0;

	printf("\r\n[NOTE] ----  , SHA_1Frame_TEST --------\r\n");

	hexstr2bytes("ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",buf_1FRMANS);
	STANDARD_SHA_MODE(buf_1_Frame, buf_1FRHW, 3);
	if(memcmp(buf_1FRHW,buf_1FRMANS,32) == 0 )
		printf("\r\n PASS");
	else
		printf("\r\n FAIL");
}
#if 1
void AES_ARIA_OPERATION_MODE_TEST()
{
	//AES TEST
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char SOURCE[16*10];
	unsigned char RESULT[16*10];
	unsigned char IV[16];
	unsigned char KEY[32];	
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	unsigned char CT[16];
	unsigned char PT[16];	
	unsigned char AES128KEY[16];
	unsigned char AES128CT[16];
	unsigned char AES128PT[16];
	unsigned char AES256KEY[32];
	unsigned char AES256CT[16];
	unsigned char AES256PT[16];

	unsigned char ARIA128KEY[16];
	unsigned char ARIA128CT[16];
	unsigned char ARIA128PT[16];
	unsigned char ARIA256KEY[32];
	unsigned char ARIA256CT[16];
	unsigned char ARIA256PT[16];

	unsigned char *pKEY;
	unsigned char *pPT;
	unsigned char *pCT;
	unsigned char KEYBUFFER[64];
	memset(KEYBUFFER,0,64);
#if 1	
	
	hexstr2bytes("000102030405060708090a0b0c0d0e0f",AES128KEY);
	hexstr2bytes("69c4e0d86a7b0430d8cdb78070b4c55a",AES128CT);	
	hexstr2bytes("00112233445566778899aabbccddeeff",AES128PT);		

	hexstr2bytes("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",AES256KEY);
	hexstr2bytes("8ea2b7ca516745bfeafc49904b496089",AES256CT);	
	hexstr2bytes("00112233445566778899aabbccddeeff",AES256PT);	

	

	
	printf("\r\n . AES MODE_ECB 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AES128KEY,16,NULL,CT,AES128PT,16,MODE_ECB,LAST);
	if(memcmp(CT,AES128CT,16) == 0)
	   printf(" PASS");
	printf("\r\n . AES MODE_ECB 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AES128KEY,16,NULL,PT,AES128CT,16,MODE_ECB,LAST);
	if(memcmp(PT,AES128PT,16) == 0)
	   printf(" PASS");
	
	printf("\r\n . AES MODE_ECB 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AES256KEY,32,NULL,CT,AES256PT,16,MODE_ECB,LAST);
	if(memcmp(CT,AES256CT,16) == 0)
	   printf(" PASS");
	printf("\r\n . AES MODE_ECB 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AES256KEY,32,NULL,PT,AES256CT,16,MODE_ECB,LAST);
	if(memcmp(PT,AES256PT,16) == 0)
	   printf(" PASS");


#endif
	{
	unsigned char AESCBC128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	unsigned char AESCBC128IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCBC128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCBC128CT[] = { 0x76,0x49,0xab,0xac,0x81,0x19,0xb2,0x46,0xce,0xe9,0x8e,0x9b,0x12,0xe9,0x19,0x7d,0x50,0x86,0xcb,0x9b,0x50,0x72,0x19,0xee,0x95,0xdb,0x11,0x3a,0x91,0x76,0x78,0xb2,0x73,0xbe,0xd6,0xb8,0xe3,0xc1,0x74,0x3b,0x71,0x16,0xe6,0x9e,0x22,0x22,0x95,0x16,0x3f,0xf1,0xca,0xa1,0x68,0x1f,0xac,0x09,0x12,0x0e,0xca,0x30,0x75,0x86,0xe1,0xa7};
	printf("\r\n . AES MODE_CBC 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCBC128KEY,16,AESCBC128IV,CT,AESCBC128PT,16,MODE_CBC,0);
	if(memcmp(CT,AESCBC128CT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC128CT");
		printbyte(AESCBC128CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCBC128PT[16*1],16,MODE_CBC,0);
	if(memcmp(CT,&AESCBC128CT[16*1],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC128CT");
		printbyte(&AESCBC128CT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCBC128PT[16*2],16,MODE_CBC,0);
	if(memcmp(CT,&AESCBC128CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC128CT");
		printbyte(&AESCBC128CT[16*2],16);	
	}
	
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCBC128PT[16*3],16,MODE_CBC,LAST);
	if(memcmp(CT,&AESCBC128CT[16*3],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC128CT");
		printbyte(AESCBC128CT[16*3],16);	
	}
		
	printf("\r\n . AES MODE_CBC 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCBC128KEY,16,AESCBC128IV,PT,AESCBC128CT,16,MODE_CBC,0);
	if(memcmp(PT,AESCBC128PT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC128PT");
		printbyte(AESCBC128PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCBC128CT[16*1],16,MODE_CBC,0);
	if(memcmp(PT,&AESCBC128PT[16*1],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC128PT");
		printbyte(&AESCBC128PT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCBC128CT[16*2],16,MODE_CBC,0);
	if(memcmp(PT,&AESCBC128PT[16*2],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC128PT");
		printbyte(&AESCBC128PT[16*2],16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCBC128CT[16*3],16,MODE_CBC,LAST);
	if(memcmp(PT,&AESCBC128PT[16*3],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC128PT");
		printbyte(&AESCBC128CT[16*3],16);	
	}
	

}
	{
	unsigned char AESCBC256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
	unsigned char AESCBC256IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCBC256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCBC256CT[] = { 0xf5,0x8c,0x4c,0x04,0xd6,0xe5,0xf1,0xba,0x77,0x9e,0xab,0xfb,0x5f,0x7b,0xfb,0xd6,0x9c,0xfc,0x4e,0x96,0x7e,0xdb,0x80,0x8d,0x67,0x9f,0x77,0x7b,0xc6,0x70,0x2c,0x7d,0x39,0xf2,0x33,0x69,0xa9,0xd9,0xba,0xcf,0xa5,0x30,0xe2,0x63,0x04,0x23,0x14,0x61,0xb2,0xeb,0x05,0xe2,0xc3,0x9b,0xe9,0xfc,0xda,0x6c,0x19,0x07,0x8c,0x6a,0x9d,0x1b};
	printf("\r\n . AES MODE_CBC 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCBC256KEY,32,AESCBC256IV,CT,AESCBC256PT,16,MODE_CBC,0);
	if(memcmp(CT,AESCBC256CT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC256CT");
		printbyte(AESCBC256CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCBC256PT[16*1],16,MODE_CBC,0);
	if(memcmp(CT,&AESCBC256CT[16*1],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC256CT");
		printbyte(&AESCBC256CT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCBC256PT[16*2],16,MODE_CBC,0);
	if(memcmp(CT,&AESCBC256CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC256CT");
		printbyte(&AESCBC256CT[16*2],16);	
	}
	
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCBC256PT[16*3],16,MODE_CBC,LAST);
	if(memcmp(CT,&AESCBC256CT[16*3],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC256CT");
		printbyte(AESCBC256CT[16*3],16);	
	}
		
	printf("\r\n . AES MODE_CBC 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCBC256KEY,32,AESCBC256IV,PT,AESCBC256CT,16,MODE_CBC,0);
	if(memcmp(PT,AESCBC256PT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC256PT");
		printbyte(AESCBC256PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCBC256CT[16*1],16,MODE_CBC,0);
	if(memcmp(PT,&AESCBC256PT[16*1],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC256PT");
		printbyte(&AESCBC256PT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCBC256CT[16*2],16,MODE_CBC,0);
	if(memcmp(PT,&AESCBC256PT[16*2],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC256PT");
		printbyte(&AESCBC256PT[16*2],16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCBC256CT[16*3],16,MODE_CBC,LAST);
	if(memcmp(PT,&AESCBC256PT[16*3],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC256PT");
		printbyte(&AESCBC256CT[16*3],16);	
	}
	

}

	{
	unsigned char AESCFB128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	unsigned char AESCFB128IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCFB128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCFB128CT[] = { 0x3b,0x3f,0xd9,0x2e,0xb7,0x2d,0xad,0x20,0x33,0x34,0x49,0xf8,0xe8,0x3c,0xfb,0x4a,0xc8,0xa6,0x45,0x37,0xa0,0xb3,0xa9,0x3f,0xcd,0xe3,0xcd,0xad,0x9f,0x1c,0xe5,0x8b,0x26,0x75,0x1f,0x67,0xa3,0xcb,0xb1,0x40,0xb1,0x80,0x8c,0xf1,0x87,0xa4,0xf4,0xdf,0xc0,0x4b,0x05,0x35,0x7c,0x5d,0x1c,0x0e,0xea,0xc4,0xc6,0x6f,0x9f,0xf7,0xf2,0xe6};
	printf("\r\n . AES MODE_CFB 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCFB128KEY,16,AESCFB128IV,CT,AESCFB128PT,16,MODE_CFB,0);
	if(memcmp(CT,AESCFB128CT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB128CT");
		printbyte(AESCFB128CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCFB128PT[16*1],16,MODE_CFB,0);
	if(memcmp(CT,&AESCFB128CT[16*1],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB128CT");
		printbyte(&AESCFB128CT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCFB128PT[16*2],16,MODE_CFB,0);
	if(memcmp(CT,&AESCFB128CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB128CT");
		printbyte(&AESCFB128CT[16*2],16);	
	}
	
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCFB128PT[16*3],16,MODE_CFB,LAST);
	if(memcmp(CT,&AESCFB128CT[16*3],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB128CT");
		printbyte(AESCFB128CT[16*3],16);	
	}
		
	printf("\r\n . AES MODE_CFB 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCFB128KEY,16,AESCFB128IV,PT,AESCFB128CT,16,MODE_CFB,0);
	if(memcmp(PT,AESCFB128PT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB128PT");
		printbyte(AESCFB128PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCFB128CT[16*1],16,MODE_CFB,0);
	if(memcmp(PT,&AESCFB128PT[16*1],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB128PT");
		printbyte(&AESCFB128PT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCFB128CT[16*2],16,MODE_CFB,0);
	if(memcmp(PT,&AESCFB128PT[16*2],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB128PT");
		printbyte(&AESCFB128PT[16*2],16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCFB128CT[16*3],16,MODE_CFB,LAST);
	if(memcmp(PT,&AESCFB128PT[16*3],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB128PT");
		printbyte(&AESCFB128CT[16*3],16);	
	}
	

}
	{
	unsigned char AESCFB256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
	unsigned char AESCFB256IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCFB256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCFB256CT[] = { 0xdc,0x7e,0x84,0xbf,0xda,0x79,0x16,0x4b,0x7e,0xcd,0x84,0x86,0x98,0x5d,0x38,0x60,0x39,0xff,0xed,0x14,0x3b,0x28,0xb1,0xc8,0x32,0x11,0x3c,0x63,0x31,0xe5,0x40,0x7b,0xdf,0x10,0x13,0x24,0x15,0xe5,0x4b,0x92,0xa1,0x3e,0xd0,0xa8,0x26,0x7a,0xe2,0xf9,0x75,0xa3,0x85,0x74,0x1a,0xb9,0xce,0xf8,0x20,0x31,0x62,0x3d,0x55,0xb1,0xe4,0x71};
	printf("\r\n . AES MODE_CFB 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCFB256KEY,32,AESCFB256IV,CT,AESCFB256PT,16,MODE_CFB,0);
	if(memcmp(CT,AESCFB256CT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB256CT");
		printbyte(AESCFB256CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCFB256PT[16*1],16,MODE_CFB,0);
	if(memcmp(CT,&AESCFB256CT[16*1],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB256CT");
		printbyte(&AESCFB256CT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCFB256PT[16*2],16,MODE_CFB,0);
	if(memcmp(CT,&AESCFB256CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB256CT");
		printbyte(&AESCFB256CT[16*2],16);	
	}
	
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCFB256PT[16*3],16,MODE_CFB,LAST);
	if(memcmp(CT,&AESCFB256CT[16*3],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB256CT");
		printbyte(AESCFB256CT[16*3],16);	
	}
		
	printf("\r\n . AES MODE_CFB 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCFB256KEY,32,AESCFB256IV,PT,AESCFB256CT,16,MODE_CFB,0);
	if(memcmp(PT,AESCFB256PT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB256PT");
		printbyte(AESCFB256PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCFB256CT[16*1],16,MODE_CFB,0);
	if(memcmp(PT,&AESCFB256PT[16*1],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB256PT");
		printbyte(&AESCFB256PT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCFB256CT[16*2],16,MODE_CFB,0);
	if(memcmp(PT,&AESCFB256PT[16*2],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB256PT");
		printbyte(&AESCFB256PT[16*2],16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCFB256CT[16*3],16,MODE_CFB,LAST);
	if(memcmp(PT,&AESCFB256PT[16*3],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB256PT");
		printbyte(&AESCFB256CT[16*3],16);	
	}
	

}
	{
	unsigned char AESOFB128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	unsigned char AESOFB128IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESOFB128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESOFB128CT[] = { 0x3b,0x3f,0xd9,0x2e,0xb7,0x2d,0xad,0x20,0x33,0x34,0x49,0xf8,0xe8,0x3c,0xfb,0x4a,0x77,0x89,0x50,0x8d,0x16,0x91,0x8f,0x03,0xf5,0x3c,0x52,0xda,0xc5,0x4e,0xd8,0x25,0x97,0x40,0x05,0x1e,0x9c,0x5f,0xec,0xf6,0x43,0x44,0xf7,0xa8,0x22,0x60,0xed,0xcc,0x30,0x4c,0x65,0x28,0xf6,0x59,0xc7,0x78,0x66,0xa5,0x10,0xd9,0xc1,0xd6,0xae,0x5e};
	printf("\r\n . AES MODE_OFB 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESOFB128KEY,16,AESOFB128IV,CT,AESOFB128PT,16,MODE_OFB,0);
	if(memcmp(CT,AESOFB128CT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB128CT");
		printbyte(AESOFB128CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESOFB128PT[16*1],16,MODE_OFB,0);
	if(memcmp(CT,&AESOFB128CT[16*1],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB128CT");
		printbyte(&AESOFB128CT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESOFB128PT[16*2],16,MODE_OFB,0);
	if(memcmp(CT,&AESOFB128CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB128CT");
		printbyte(&AESOFB128CT[16*2],16);	
	}
	
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESOFB128PT[16*3],16,MODE_OFB,LAST);
	if(memcmp(CT,&AESOFB128CT[16*3],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB128CT");
		printbyte(AESOFB128CT[16*3],16);	
	}
		
	printf("\r\n . AES MODE_OFB 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESOFB128KEY,16,AESOFB128IV,PT,AESOFB128CT,16,MODE_OFB,0);
	if(memcmp(PT,AESOFB128PT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB128PT");
		printbyte(AESOFB128PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESOFB128CT[16*1],16,MODE_OFB,0);
	if(memcmp(PT,&AESOFB128PT[16*1],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB128PT");
		printbyte(&AESOFB128PT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESOFB128CT[16*2],16,MODE_OFB,0);
	if(memcmp(PT,&AESOFB128PT[16*2],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB128PT");
		printbyte(&AESOFB128PT[16*2],16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESOFB128CT[16*3],16,MODE_OFB,LAST);
	if(memcmp(PT,&AESOFB128PT[16*3],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB128PT");
		printbyte(&AESOFB128CT[16*3],16);	
	}
	

}
	{
	unsigned char AESOFB256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
	unsigned char AESOFB256IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESOFB256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESOFB256CT[] = { 0xdc,0x7e,0x84,0xbf,0xda,0x79,0x16,0x4b,0x7e,0xcd,0x84,0x86,0x98,0x5d,0x38,0x60,0x4f,0xeb,0xdc,0x67,0x40,0xd2,0x0b,0x3a,0xc8,0x8f,0x6a,0xd8,0x2a,0x4f,0xb0,0x8d,0x71,0xab,0x47,0xa0,0x86,0xe8,0x6e,0xed,0xf3,0x9d,0x1c,0x5b,0xba,0x97,0xc4,0x08,0x01,0x26,0x14,0x1d,0x67,0xf3,0x7b,0xe8,0x53,0x8f,0x5a,0x8b,0xe7,0x40,0xe4,0x84};
	printf("\r\n . AES MODE_OFB 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESOFB256KEY,32,AESOFB256IV,CT,AESOFB256PT,16,MODE_OFB,0);
	if(memcmp(CT,AESOFB256CT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB256CT");
		printbyte(AESOFB256CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESOFB256PT[16*1],16,MODE_OFB,0);
	if(memcmp(CT,&AESOFB256CT[16*1],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB256CT");
		printbyte(&AESOFB256CT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESOFB256PT[16*2],16,MODE_OFB,0);
	if(memcmp(CT,&AESOFB256CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB256CT");
		printbyte(&AESOFB256CT[16*2],16);	
	}
	
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESOFB256PT[16*3],16,MODE_OFB,LAST);
	if(memcmp(CT,&AESOFB256CT[16*3],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB256CT");
		printbyte(&AESOFB256CT[16*3],16);	
	}
		
	printf("\r\n . AES MODE_OFB 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESOFB256KEY,32,AESOFB256IV,PT,AESOFB256CT,16,MODE_OFB,0);
	if(memcmp(PT,AESOFB256PT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB256PT");
		printbyte(AESOFB256PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESOFB256CT[16*1],16,MODE_OFB,0);
	if(memcmp(PT,&AESOFB256PT[16*1],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB256PT");
		printbyte(&AESOFB256PT[16*1],16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESOFB256CT[16*2],16,MODE_OFB,0);
	if(memcmp(PT,&AESOFB256PT[16*2],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB256PT");
		printbyte(&AESOFB256PT[16*2],16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESOFB256CT[16*3],16,MODE_OFB,LAST);
	if(memcmp(PT,&AESOFB256PT[16*3],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB256PT");
		printbyte(&AESOFB256CT[16*3],16);	
	}
	

}

		{
		unsigned char AESCTR128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
		unsigned char AESCTR128IV[] = {0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff};
		unsigned char AESCTR128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
		unsigned char AESCTR128CT[] = { 0x87,0x4d,0x61,0x91,0xb6,0x20,0xe3,0x26,0x1b,0xef,0x68,0x64,0x99,0x0d,0xb6,0xce,0x98,0x06,0xf6,0x6b,0x79,0x70,0xfd,0xff,0x86,0x17,0x18,0x7b,0xb9,0xff,0xfd,0xff,0x5a,0xe4,0xdf,0x3e,0xdb,0xd5,0xd3,0x5e,0x5b,0x4f,0x09,0x02,0x0d,0xb0,0x3e,0xab,0x1e,0x03,0x1d,0xda,0x2f,0xbe,0x03,0xd1,0x79,0x21,0x70,0xa0,0xf3,0x00,0x9c,0xee};
		printf("\r\n . AES MODE_CTR 128 ENC TEST");
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCTR128KEY,16,AESCTR128IV,CT,AESCTR128PT,16,MODE_CTR,0);
		if(memcmp(CT,AESCTR128CT,16) == 0)
		   printf(" PASS");
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR128CT");
			printbyte(AESCTR128CT,16);	
		}
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCTR128PT[16*1],16,MODE_CTR,0);
		if(memcmp(CT,&AESCTR128CT[16*1],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR128CT");
			printbyte(&AESCTR128CT[16*1],16);	
		}
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCTR128PT[16*2],16,MODE_CTR,0);
		if(memcmp(CT,&AESCTR128CT[16*2],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR128CT");
			printbyte(&AESCTR128CT[16*2],16);	
		}
		
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCTR128PT[16*3],16,MODE_CTR,LAST);
		if(memcmp(CT,&AESCTR128CT[16*3],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR128CT");
			printbyte(AESCTR128CT[16*3],16);	
		}
			
		printf("\r\n . AES MODE_CTR 128 DEC TEST");
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCTR128KEY,16,AESCTR128IV,PT,AESCTR128CT,16,MODE_CTR,0);
		if(memcmp(PT,AESCTR128PT,16) == 0)
		   printf(" PASS");
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR128PT");
			printbyte(AESCTR128PT,16);	
		}
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCTR128CT[16*1],16,MODE_CTR,0);
		if(memcmp(PT,&AESCTR128PT[16*1],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR128PT");
			printbyte(&AESCTR128PT[16*1],16);	
		}
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCTR128CT[16*2],16,MODE_CTR,0);
		if(memcmp(PT,&AESCTR128PT[16*2],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR128PT");
			printbyte(&AESCTR128PT[16*2],16);	
		}
	
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCTR128CT[16*3],16,MODE_CTR,LAST);
		if(memcmp(PT,&AESCTR128PT[16*3],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR128PT");
			printbyte(&AESCTR128CT[16*3],16);	
		}
		
	
	}
		{
		unsigned char AESCTR256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
		unsigned char AESCTR256IV[] = {0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff};
		unsigned char AESCTR256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
		unsigned char AESCTR256CT[] = { 0x60,0x1e,0xc3,0x13,0x77,0x57,0x89,0xa5,0xb7,0xa7,0xf5,0x04,0xbb,0xf3,0xd2,0x28,0xf4,0x43,0xe3,0xca,0x4d,0x62,0xb5,0x9a,0xca,0x84,0xe9,0x90,0xca,0xca,0xf5,0xc5,0x2b,0x09,0x30,0xda,0xa2,0x3d,0xe9,0x4c,0xe8,0x70,0x17,0xba,0x2d,0x84,0x98,0x8d,0xdf,0xc9,0xc5,0x8d,0xb6,0x7a,0xad,0xa6,0x13,0xc2,0xdd,0x08,0x45,0x79,0x41,0xa6};
		printf("\r\n . AES MODE_CTR 256 ENC TEST");
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCTR256KEY,32,AESCTR256IV,CT,AESCTR256PT,16,MODE_CTR,0);
		if(memcmp(CT,AESCTR256CT,16) == 0)
		   printf(" PASS");
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR256CT");
			printbyte(AESCTR256CT,16);	
		}
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCTR256PT[16*1],16,MODE_CTR,0);
		if(memcmp(CT,&AESCTR256CT[16*1],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR256CT");
			printbyte(&AESCTR256CT[16*1],16);	
		}
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCTR256PT[16*2],16,MODE_CTR,0);
		if(memcmp(CT,&AESCTR256CT[16*2],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR256CT");
			printbyte(&AESCTR256CT[16*2],16);	
		}
		
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCTR256PT[16*3],16,MODE_CTR,LAST);
		if(memcmp(CT,&AESCTR256CT[16*3],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR256CT");
			printbyte(AESCTR256CT[16*3],16);	
		}
			
		printf("\r\n . AES MODE_CTR 256 DEC TEST");
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCTR256KEY,32,AESCTR256IV,PT,AESCTR256CT,16,MODE_CTR,0);
		if(memcmp(PT,AESCTR256PT,16) == 0)
		   printf(" PASS");
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR256PT");
			printbyte(AESCTR256PT,16);	
		}
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCTR256CT[16*1],16,MODE_CTR,0);
		if(memcmp(PT,&AESCTR256PT[16*1],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR256PT");
			printbyte(&AESCTR256PT[16*1],16);	
		}
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCTR256CT[16*2],16,MODE_CTR,0);
		if(memcmp(PT,&AESCTR256PT[16*2],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR256PT");
			printbyte(&AESCTR256PT[16*2],16);	
		}
	
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCTR256CT[16*3],16,MODE_CTR,LAST);
		if(memcmp(PT,&AESCTR256PT[16*3],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR256PT");
			printbyte(&AESCTR256CT[16*3],16);	
		}
		
	
	}

	hexstr2bytes("00112233445566778899aabbccddeeff",ARIA128KEY);
	hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb",ARIA128PT);	
	hexstr2bytes("c6ecd08e22c30abdb215cf74e2075e6e",ARIA128CT);		

	hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",ARIA256KEY);
	hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb",ARIA256PT);	
	hexstr2bytes("58a875e6044ad7fffa4f58420f7f442d",ARIA256CT);	

	printf("\r\n . ARIA MODE_ECB 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,ARIA128KEY,16,NULL,CT,ARIA128PT,16,MODE_ECB,LAST);
	if(memcmp(CT,ARIA128CT,16) == 0)
	   printf(" PASS");
	printf("\r\n . ARIA MODE_ECB 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,ARIA128KEY,16,NULL,PT,ARIA128CT,16,MODE_ECB,LAST);
	if(memcmp(PT,ARIA128PT,16) == 0)
	   printf(" PASS");
	printf("\r\n . ARIA MODE_ECB 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,ARIA256KEY,32,NULL,CT,ARIA256PT,16,MODE_ECB,LAST);
	if(memcmp(CT,ARIA256CT,16) == 0)
	   printf(" PASS");
	printf("\r\n . ARIA MODE_ECB 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,ARIA256KEY,32,NULL,PT,ARIA256CT,16,MODE_ECB,LAST);
	if(memcmp(PT,ARIA256PT,16) == 0)
	   printf(" PASS");

	{

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("49d61860b14909109cef0d22a9268134fadf9fb23151e9645fba75018bdb1538b53334634bbf7d4cd4b5377033060c155fe3948ca75de1031e1d85619e0ad61eb419a866b3c2dbfd10a4ed18b22149f75897f0b8668b0c1c542c687778835fb7cd46e45f85eaa7072437dd9fa6793d6f8d4ccefc4eb1ac641ac1bd30b18c6d64c49bca137eb21c2e04da62712ca2b4f540c57112c38791852cfac7a5d19ed83a",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);
			hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);	
			printf("\r\n . ARIA MODE_CBC 128 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],16,MODE_CBC,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_CBC,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CBC 128 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],16,MODE_CBC,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_CBC,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("523a8a806ae621f155fdd28dbc34e1ab7b9b42432ad8b2efb96e23b13f0a6e52f36185d50ad002c5f601bee5493f118b243ee2e313642bffc3902e7b2efd9a12fa682edd2d23c8b9c5f043c18b17c1ec4b5867918270fbec1027c19ed6af833da5d620994668ca22f599791d292dd6273b2959082aafb7a996167cce1eec5f0cfd15f610d87e2dda9ba68ce1260ca54b222491418374294e7909b1e8551cd8de",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);			
			printf("\r\n. ARIA MODE_CBC 256 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],16,MODE_CBC,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_CBC,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CBC 256 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],16,MODE_CBC,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_CBC,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a200c07c21e6370f413a5d132500a68285017c61b434c7b7ca9685a51071861e4d4bb873b599b479e2d573dddeafba89f812ac6a9e44d554078eb3be94839db4b33da3f59c063123a7ef6f20e10579fa4fd239100ca73b52d4fcafeadee73f139f78f9b7614c2b3b9dbe010f87db06a89a9435f79ce8121431371f4e87b984e0230c22a6dacb32fc42dcc6accef33285bf11",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);	
			hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);
			printf("\r\n. ARIA MODE_CFB 128 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],16,MODE_CFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_CFB,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CFB 128 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],16,MODE_CFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_CFB,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f09009635f28bb93d8c31f870ec1e0bdb082b66fa402dd9c202be300c4517d196b14d4ce11dce97f7aaba54341b0d872cc9b63753a3e8556a14be6f7b3e27e3cfc39caf80f2a355aa50dc83c09c7b11828694f8e4aa726c528976b53f2c877f4991a3a8d28adb63bd751846ffb2350265e179d4990753ae8485ff9b4133ddad5875b84a90cbcfa62a045d726df71b6bda0eeca0be",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);			
			printf("\r\n. ARIA MODE_CFB 256 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],16,MODE_CFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_CFB,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CFB 256 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],16,MODE_CFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_CFB,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a2000063063f0560083483faeb041c8adecef30cf80cefb002a0d280759168ec01db3d49f61aced260bd43eec0a2731730eec6fa4f2304319cf8ccac2d7be7833e4f8ae6ce967012c1c6badc5d28e7e4144f6bf5cebe01253ee202afce4bc61f28dec069a6f16f6c8a7dd2afae44148f6ff4d0029d5c607b5fa6b8c8a6301cde5c7033565cd0b8f0974ab490b236197ba04a",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

			hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);
			printf("\r\n . ARIA MODE_OFB 128 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],16,MODE_OFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_OFB,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_OFB 128 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],16,MODE_OFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_OFB,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f0900963584c256815c4292b59f8d3f966a75b52345b4f5f98c785d3f368a8d5ff89b7f950ceab3cd63773c2621d652b8ef98b4196afb2c2b30496bc5b7d9e7f9084f9d855f63a511751c8909e7a6deadbe0a67a4fb89383ca5d209c6f66f793fc471195c476fb9c1eab2ac91e680e454b4f3ed9a67fb52f09c29b965b23cfa6f3f6bbb2a86c6cdbaa2857bf2486f543231892a52",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);	
			printf("\r\n . ARIA MODE_OFB 256 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],16,MODE_OFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_OFB,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_OFB 256 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],16,MODE_OFB,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_OFB,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("ac5d7de805a0bf1c57c854501af60fa11497e2a34519dea1569e91e5b5ccae2ff3bfa1bf975f4571f48be191613546c3911163c085f871f0e7ae5f2a085b81851c2a3ddf20ecb8fa51901aec8ee4ba32a35dab67bb72cd9140ad188a967ac0fbbdfa94ea6cce47dcf8525ab5a814cfeb2bb60ee2b126e2d9d847c1a9e96f9019e3e6a7fe40d3829afb73db1cc245646addb62d9b907baaafbe46a73dbc131d3d",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);
			memset(IV,0,16);

			printf("\r\n . ARIA MODE_CTR 128 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],16,MODE_CTR,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],16,MODE_CTR,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CTR 128 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],16,MODE_CTR,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],16,MODE_CTR,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("30026c329666141721178b99c0a1f1b2f06940253f7b3089e2a30ea86aa3c88f5940f05ad7ee41d71347bb7261e348f18360473fdf7d4e7723bffb4411cc13f6cdd89f3bc7b9c768145022c7a74f14d7c305cd012a10f16050c23f1ae5c23f45998d13fbaa041e51619577e0772764896a5d4516d8ffceb3bf7e05f613edd9a60cdcedaff9cfcaf4e00d445a54334f73ab2cad944e51d266548e61c6eb0aa1cd",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);	
			printf("\r\n . ARIA MODE_CTR 256 ENC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],16,MODE_CTR,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],16,MODE_CTR,0);

				if(memcmp(CT,&RESULT[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CTR 256 DEC TEST");	
			for(i = 0; i < 10; i++ ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],16,MODE_CTR,0);
				}	
				else if( 9 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],16,MODE_CTR,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}
  }
#if 0			
			printf(". ARIA MODE_CBC 128 DEC TEST");				
			
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("523a8a806ae621f155fdd28dbc34e1ab7b9b42432ad8b2efb96e23b13f0a6e52f36185d50ad002c5f601bee5493f118b243ee2e313642bffc3902e7b2efd9a12fa682edd2d23c8b9c5f043c18b17c1ec4b5867918270fbec1027c19ed6af833da5d620994668ca22f599791d292dd6273b2959082aafb7a996167cce1eec5f0cfd15f610d87e2dda9ba68ce1260ca54b222491418374294e7909b1e8551cd8de",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
			printf(". ARIA MODE_CBC 256 ENC TEST");
			printf(". ARIA MODE_CBC 256 DEC TEST");			


	}
	if(Mode == MODE_CFB) {
		if(RG256 == RG_128_256){

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f09009635f28bb93d8c31f870ec1e0bdb082b66fa402dd9c202be300c4517d196b14d4ce11dce97f7aaba54341b0d872cc9b63753a3e8556a14be6f7b3e27e3cfc39caf80f2a355aa50dc83c09c7b11828694f8e4aa726c528976b53f2c877f4991a3a8d28adb63bd751846ffb2350265e179d4990753ae8485ff9b4133ddad5875b84a90cbcfa62a045d726df71b6bda0eeca0be",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
		}
		else
		{
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a200c07c21e6370f413a5d132500a68285017c61b434c7b7ca9685a51071861e4d4bb873b599b479e2d573dddeafba89f812ac6a9e44d554078eb3be94839db4b33da3f59c063123a7ef6f20e10579fa4fd239100ca73b52d4fcafeadee73f139f78f9b7614c2b3b9dbe010f87db06a89a9435f79ce8121431371f4e87b984e0230c22a6dacb32fc42dcc6accef33285bf11",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

		}
		hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);	

	}
	if(Mode == MODE_OFB) {
		if(RG256 == RG_128_256){

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f0900963584c256815c4292b59f8d3f966a75b52345b4f5f98c785d3f368a8d5ff89b7f950ceab3cd63773c2621d652b8ef98b4196afb2c2b30496bc5b7d9e7f9084f9d855f63a511751c8909e7a6deadbe0a67a4fb89383ca5d209c6f66f793fc471195c476fb9c1eab2ac91e680e454b4f3ed9a67fb52f09c29b965b23cfa6f3f6bbb2a86c6cdbaa2857bf2486f543231892a52",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
		}
		else
		{
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a2000063063f0560083483faeb041c8adecef30cf80cefb002a0d280759168ec01db3d49f61aced260bd43eec0a2731730eec6fa4f2304319cf8ccac2d7be7833e4f8ae6ce967012c1c6badc5d28e7e4144f6bf5cebe01253ee202afce4bc61f28dec069a6f16f6c8a7dd2afae44148f6ff4d0029d5c607b5fa6b8c8a6301cde5c7033565cd0b8f0974ab490b236197ba04a",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

		}
		hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);	

	}	
	if(Mode == MODE_CTR) {
		if(RG256 == RG_128_256){

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("30026c329666141721178b99c0a1f1b2f06940253f7b3089e2a30ea86aa3c88f5940f05ad7ee41d71347bb7261e348f18360473fdf7d4e7723bffb4411cc13f6cdd89f3bc7b9c768145022c7a74f14d7c305cd012a10f16050c23f1ae5c23f45998d13fbaa041e51619577e0772764896a5d4516d8ffceb3bf7e05f613edd9a60cdcedaff9cfcaf4e00d445a54334f73ab2cad944e51d266548e61c6eb0aa1cd",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
		}
		else
		{
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("ac5d7de805a0bf1c57c854501af60fa11497e2a34519dea1569e91e5b5ccae2ff3bfa1bf975f4571f48be191613546c3911163c085f871f0e7ae5f2a085b81851c2a3ddf20ecb8fa51901aec8ee4ba32a35dab67bb72cd9140ad188a967ac0fbbdfa94ea6cce47dcf8525ab5a814cfeb2bb60ee2b126e2d9d847c1a9e96f9019e3e6a7fe40d3829afb73db1cc245646addb62d9b907baaafbe46a73dbc131d3d",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

		}
		memset(IV,0,16);


	}
#endif
    

}
#define TWO_LEN 64
void AES_ARIA_OPERATION_MODE_TEST32()
{
	//AES TEST
	int i;
	int j;
	unsigned int inst = 0;
	//unsigned char addr[2];
	unsigned char SOURCE[16*10];
	unsigned char RESULT[16*10];
	unsigned char IV[16];
	unsigned char KEY[32];	
	unsigned char tx_data[64];
	unsigned char rx_data[64];
	unsigned char CT[32];
	unsigned char PT[32];	
	unsigned char AES128KEY[16];
	unsigned char AES128CT[TWO_LEN];
	unsigned char AES128PT[TWO_LEN];
	unsigned char AES256KEY[32];
	unsigned char AES256CT[TWO_LEN];
	unsigned char AES256PT[TWO_LEN];

	unsigned char ARIA128KEY[16];
	unsigned char ARIA128CT[TWO_LEN];
	unsigned char ARIA128PT[TWO_LEN];
	unsigned char ARIA256KEY[32];
	unsigned char ARIA256CT[TWO_LEN];
	unsigned char ARIA256PT[TWO_LEN];

	unsigned char *pKEY;
	unsigned char *pPT;
	unsigned char *pCT;
	unsigned char KEYBUFFER[64];
	memset(KEYBUFFER,0,64);
#if 1	
	
	hexstr2bytes("000102030405060708090a0b0c0d0e0f",AES128KEY);
	hexstr2bytes("69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a69c4e0d86a7b0430d8cdb78070b4c55a",AES128CT);	
	hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",AES128PT);		

	hexstr2bytes("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",AES256KEY);
	hexstr2bytes("8ea2b7ca516745bfeafc49904b4960898ea2b7ca516745bfeafc49904b4960898ea2b7ca516745bfeafc49904b4960898ea2b7ca516745bfeafc49904b496089",AES256CT);	
	hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",AES256PT);	

	printf("\r\n . AES MODE_ECB 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AES128KEY,16,NULL,PT,AES128CT,32,MODE_ECB,0);
	if(memcmp(PT,AES128PT,32) == 0)
	   printf(" PASS");
	else {
		printf("\r\n PT");
		printbyte(PT,32);
		printf("\r\n AES128PT");
		printbyte(AES128PT,32);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,AES128CT+32,32,MODE_ECB,LAST);
	if(memcmp(PT,AES128PT+32,32) == 0)
	   printf(" PASS");
	else {
		printf("\r\n PT");
		printbyte(PT,32);
		printf("\r\n AES128PT");
		printbyte(AES128PT+32,32);	
	}
	

	
	printf("\r\n . AES MODE_ECB 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AES128KEY,16,NULL,CT,AES128PT,32,MODE_ECB,0);
	if(memcmp(CT,AES128CT,32) == 0)
	   printf(" PASS");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,AES128PT+32,32,MODE_ECB,LAST);
	if(memcmp(CT,AES128CT+32,32) == 0)
	   printf(" PASS");	
	
	

	printf("\r\n . AES MODE_ECB 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AES256KEY,32,NULL,CT,AES256PT,32,MODE_ECB,0);
	if(memcmp(CT,AES256CT,32) == 0)
	   printf(" PASS");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,AES256PT+32,32,MODE_ECB,LAST);
	if(memcmp(CT,AES256CT+32,32) == 0)
	   printf(" PASS");
	
	printf("\r\n . AES MODE_ECB 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AES256KEY,32,NULL,PT,AES256CT,32,MODE_ECB,0);
	if(memcmp(PT,AES256PT,32) == 0)
	   printf(" PASS");
	else {
		printf("\r\n PT");
		printbyte(PT,32);
		printf("\r\n AES256PT");
		printbyte(AES256PT,32);	
	}	

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,AES256CT,32,MODE_ECB,LAST);
	if(memcmp(PT,AES256PT,32) == 0)
	   printf(" PASS");
	else {
		printf("\r\n PT");
		printbyte(PT,32);
		printf("\r\n AES256PT");
		printbyte(AES256PT,32);	
	}	


#endif
	{
	unsigned char AESCBC128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	unsigned char AESCBC128IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCBC128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCBC128CT[] = { 0x76,0x49,0xab,0xac,0x81,0x19,0xb2,0x46,0xce,0xe9,0x8e,0x9b,0x12,0xe9,0x19,0x7d,0x50,0x86,0xcb,0x9b,0x50,0x72,0x19,0xee,0x95,0xdb,0x11,0x3a,0x91,0x76,0x78,0xb2,0x73,0xbe,0xd6,0xb8,0xe3,0xc1,0x74,0x3b,0x71,0x16,0xe6,0x9e,0x22,0x22,0x95,0x16,0x3f,0xf1,0xca,0xa1,0x68,0x1f,0xac,0x09,0x12,0x0e,0xca,0x30,0x75,0x86,0xe1,0xa7};
	printf("\r\n . AES MODE_CBC 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCBC128KEY,16,AESCBC128IV,CT,AESCBC128PT,32,MODE_CBC,0);
	if(memcmp(CT,AESCBC128CT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,32);
	
		printf("\r\n AESCBC128CT");
		printbyte(AESCBC128CT,32);	
	}


	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCBC128PT[16*2],32,MODE_CBC,LAST);
	if(memcmp(CT,&AESCBC128CT[16*2],32) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC128CT");
		printbyte(&AESCBC128CT[16*2],16);	
	}
	

		
	printf("\r\n . AES MODE_CBC 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCBC128KEY,16,AESCBC128IV,PT,AESCBC128CT,32,MODE_CBC,0);
	if(memcmp(PT,AESCBC128PT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC128PT");
		printbyte(AESCBC128PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCBC128CT[16*2],32,MODE_CBC,LAST);
	if(memcmp(PT,&AESCBC128PT[16*2],32) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC128PT");
		printbyte(&AESCBC128PT[16*2],16);	
	}
	

}
	{
	unsigned char AESCBC256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
	unsigned char AESCBC256IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCBC256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCBC256CT[] = { 0xf5,0x8c,0x4c,0x04,0xd6,0xe5,0xf1,0xba,0x77,0x9e,0xab,0xfb,0x5f,0x7b,0xfb,0xd6,0x9c,0xfc,0x4e,0x96,0x7e,0xdb,0x80,0x8d,0x67,0x9f,0x77,0x7b,0xc6,0x70,0x2c,0x7d,0x39,0xf2,0x33,0x69,0xa9,0xd9,0xba,0xcf,0xa5,0x30,0xe2,0x63,0x04,0x23,0x14,0x61,0xb2,0xeb,0x05,0xe2,0xc3,0x9b,0xe9,0xfc,0xda,0x6c,0x19,0x07,0x8c,0x6a,0x9d,0x1b};
	printf("\r\n . AES MODE_CBC 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCBC256KEY,32,AESCBC256IV,CT,AESCBC256PT,32,MODE_CBC,0);
	if(memcmp(CT,AESCBC256CT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC256CT");
		printbyte(AESCBC256CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCBC256PT[16*2],32,MODE_CBC,LAST);
	if(memcmp(CT,&AESCBC256CT[16*2],32) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCBC256CT");
		printbyte(&AESCBC256CT[16*2],16);	
	}
	
		
	printf("\r\n . AES MODE_CBC 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCBC256KEY,32,AESCBC256IV,PT,AESCBC256CT,32,MODE_CBC,0);
	if(memcmp(PT,AESCBC256PT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC256PT");
		printbyte(AESCBC256PT,16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCBC256CT[16*2],32,MODE_CBC,LAST);
	if(memcmp(PT,&AESCBC256PT[16*2],32) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCBC256PT");
		printbyte(&AESCBC256PT[16*2],16);	
	}

	

}

	{
	unsigned char AESCFB128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	unsigned char AESCFB128IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCFB128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCFB128CT[] = { 0x3b,0x3f,0xd9,0x2e,0xb7,0x2d,0xad,0x20,0x33,0x34,0x49,0xf8,0xe8,0x3c,0xfb,0x4a,0xc8,0xa6,0x45,0x37,0xa0,0xb3,0xa9,0x3f,0xcd,0xe3,0xcd,0xad,0x9f,0x1c,0xe5,0x8b,0x26,0x75,0x1f,0x67,0xa3,0xcb,0xb1,0x40,0xb1,0x80,0x8c,0xf1,0x87,0xa4,0xf4,0xdf,0xc0,0x4b,0x05,0x35,0x7c,0x5d,0x1c,0x0e,0xea,0xc4,0xc6,0x6f,0x9f,0xf7,0xf2,0xe6};
	printf("\r\n . AES MODE_CFB 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCFB128KEY,16,AESCFB128IV,CT,AESCFB128PT,32,MODE_CFB,0);
	if(memcmp(CT,AESCFB128CT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB128CT");
		printbyte(AESCFB128CT,16);	
	}

	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCFB128PT[16*2],32,MODE_CFB,LAST);
	if(memcmp(CT,&AESCFB128CT[16*2],32) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB128CT");
		printbyte(&AESCFB128CT[16*2],16);	
	}
	
		
	printf("\r\n . AES MODE_CFB 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCFB128KEY,16,AESCFB128IV,PT,AESCFB128CT,32,MODE_CFB,0);
	if(memcmp(PT,AESCFB128PT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB128PT");
		printbyte(AESCFB128PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCFB128CT[16*2],32,MODE_CFB,LAST);
	if(memcmp(PT,&AESCFB128PT[16*2],32) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB128PT");
		printbyte(&AESCFB128PT[16*2],16);	
	}

	

}
	{
	unsigned char AESCFB256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
	unsigned char AESCFB256IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESCFB256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESCFB256CT[] = { 0xdc,0x7e,0x84,0xbf,0xda,0x79,0x16,0x4b,0x7e,0xcd,0x84,0x86,0x98,0x5d,0x38,0x60,0x39,0xff,0xed,0x14,0x3b,0x28,0xb1,0xc8,0x32,0x11,0x3c,0x63,0x31,0xe5,0x40,0x7b,0xdf,0x10,0x13,0x24,0x15,0xe5,0x4b,0x92,0xa1,0x3e,0xd0,0xa8,0x26,0x7a,0xe2,0xf9,0x75,0xa3,0x85,0x74,0x1a,0xb9,0xce,0xf8,0x20,0x31,0x62,0x3d,0x55,0xb1,0xe4,0x71};
	printf("\r\n . AES MODE_CFB 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCFB256KEY,32,AESCFB256IV,CT,AESCFB256PT,32,MODE_CFB,0);
	if(memcmp(CT,AESCFB256CT,16) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB256CT");
		printbyte(AESCFB256CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCFB256PT[16*2],32,MODE_CFB,LAST);
	if(memcmp(CT,&AESCFB256CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESCFB256CT");
		printbyte(&AESCFB256CT[16*2],16);	
	}
	
		
	printf("\r\n . AES MODE_CFB 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCFB256KEY,32,AESCFB256IV,PT,AESCFB256CT,32,MODE_CFB,0);
	if(memcmp(PT,AESCFB256PT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB256PT");
		printbyte(AESCFB256PT,16);	
	}

	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCFB256CT[16*2],32,MODE_CFB,LAST);
	if(memcmp(PT,&AESCFB256PT[16*2],32) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESCFB256PT");
		printbyte(&AESCFB256PT[16*2],16);	
	}

	

}
	{
	unsigned char AESOFB128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	unsigned char AESOFB128IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESOFB128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESOFB128CT[] = { 0x3b,0x3f,0xd9,0x2e,0xb7,0x2d,0xad,0x20,0x33,0x34,0x49,0xf8,0xe8,0x3c,0xfb,0x4a,0x77,0x89,0x50,0x8d,0x16,0x91,0x8f,0x03,0xf5,0x3c,0x52,0xda,0xc5,0x4e,0xd8,0x25,0x97,0x40,0x05,0x1e,0x9c,0x5f,0xec,0xf6,0x43,0x44,0xf7,0xa8,0x22,0x60,0xed,0xcc,0x30,0x4c,0x65,0x28,0xf6,0x59,0xc7,0x78,0x66,0xa5,0x10,0xd9,0xc1,0xd6,0xae,0x5e};
	printf("\r\n . AES MODE_OFB 128 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESOFB128KEY,16,AESOFB128IV,CT,AESOFB128PT,32,MODE_OFB,0);
	if(memcmp(CT,AESOFB128CT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB128CT");
		printbyte(AESOFB128CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESOFB128PT[16*2],32,MODE_OFB,LAST);
	if(memcmp(CT,&AESOFB128CT[16*2],32) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB128CT");
		printbyte(&AESOFB128CT[16*2],16);	
	}
	
		
	printf("\r\n . AES MODE_OFB 128 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESOFB128KEY,16,AESOFB128IV,PT,AESOFB128CT,32,MODE_OFB,0);
	if(memcmp(PT,AESOFB128PT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB128PT");
		printbyte(AESOFB128PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESOFB128CT[16*2],32,MODE_OFB,LAST);
	if(memcmp(PT,&AESOFB128PT[16*2],32) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB128PT");
		printbyte(&AESOFB128PT[16*2],16);	
	}

	

}
	{
	unsigned char AESOFB256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
	unsigned char AESOFB256IV[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};
	unsigned char AESOFB256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	unsigned char AESOFB256CT[] = { 0xdc,0x7e,0x84,0xbf,0xda,0x79,0x16,0x4b,0x7e,0xcd,0x84,0x86,0x98,0x5d,0x38,0x60,0x4f,0xeb,0xdc,0x67,0x40,0xd2,0x0b,0x3a,0xc8,0x8f,0x6a,0xd8,0x2a,0x4f,0xb0,0x8d,0x71,0xab,0x47,0xa0,0x86,0xe8,0x6e,0xed,0xf3,0x9d,0x1c,0x5b,0xba,0x97,0xc4,0x08,0x01,0x26,0x14,0x1d,0x67,0xf3,0x7b,0xe8,0x53,0x8f,0x5a,0x8b,0xe7,0x40,0xe4,0x84};
	printf("\r\n . AES MODE_OFB 256 ENC TEST");
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESOFB256KEY,32,AESOFB256IV,CT,AESOFB256PT,32,MODE_OFB,0);
	if(memcmp(CT,AESOFB256CT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB256CT");
		printbyte(AESOFB256CT,16);	
	}
	dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESOFB256PT[16*2],32,MODE_OFB,LAST);
	if(memcmp(CT,&AESOFB256CT[16*2],16) == 0)
	   printf(" PASS");	
	else{
		printf("\r\n CT");
		printbyte(CT,16);
	
		printf("\r\n AESOFB256CT");
		printbyte(&AESOFB256CT[16*2],16);	
	}
	
		
	printf("\r\n . AES MODE_OFB 256 DEC TEST");
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESOFB256KEY,32,AESOFB256IV,PT,AESOFB256CT,32,MODE_OFB,0);
	if(memcmp(PT,AESOFB256PT,32) == 0)
	   printf(" PASS");
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB256PT");
		printbyte(AESOFB256PT,16);	
	}
	dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESOFB256CT[16*2],32,MODE_OFB,LAST);
	if(memcmp(PT,&AESOFB256PT[16*2],16) == 0)
	   printf(" PASS"); 
	else{
		printf("\r\n PT");
		printbyte(PT,16);

		printf("\r\n AESOFB256PT");
		printbyte(&AESOFB256PT[16*2],16);	
	}

	

}

		{
		unsigned char AESCTR128KEY[] = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
		unsigned char AESCTR128IV[] = {0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff};
		unsigned char AESCTR128PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
		unsigned char AESCTR128CT[] = { 0x87,0x4d,0x61,0x91,0xb6,0x20,0xe3,0x26,0x1b,0xef,0x68,0x64,0x99,0x0d,0xb6,0xce,0x98,0x06,0xf6,0x6b,0x79,0x70,0xfd,0xff,0x86,0x17,0x18,0x7b,0xb9,0xff,0xfd,0xff,0x5a,0xe4,0xdf,0x3e,0xdb,0xd5,0xd3,0x5e,0x5b,0x4f,0x09,0x02,0x0d,0xb0,0x3e,0xab,0x1e,0x03,0x1d,0xda,0x2f,0xbe,0x03,0xd1,0x79,0x21,0x70,0xa0,0xf3,0x00,0x9c,0xee};
		printf("\r\n . AES MODE_CTR 128 ENC TEST");
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCTR128KEY,16,AESCTR128IV,CT,AESCTR128PT,32,MODE_CTR,0);
		if(memcmp(CT,AESCTR128CT,32) == 0)
		   printf(" PASS");
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR128CT");
			printbyte(AESCTR128CT,16);	
		}
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,16,NULL,CT,&AESCTR128PT[16*2],32,MODE_CTR,LAST);
		if(memcmp(CT,&AESCTR128CT[16*2],32) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR128CT");
			printbyte(&AESCTR128CT[16*2],16);	
		}
		
			
		printf("\r\n . AES MODE_CTR 128 DEC TEST");
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCTR128KEY,16,AESCTR128IV,PT,AESCTR128CT,32,MODE_CTR,0);
		if(memcmp(PT,AESCTR128PT,32) == 0)
		   printf(" PASS");
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR128PT");
			printbyte(AESCTR128PT,16);	
		}
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,16,NULL,PT,&AESCTR128CT[16*2],32,MODE_CTR,LAST);
		if(memcmp(PT,&AESCTR128PT[16*2],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR128PT");
			printbyte(&AESCTR128PT[16*2],16);	
		}
	
	
	}
		{
		unsigned char AESCTR256KEY[] = {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
		unsigned char AESCTR256IV[] = {0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff};
		unsigned char AESCTR256PT[] = { 0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
		unsigned char AESCTR256CT[] = { 0x60,0x1e,0xc3,0x13,0x77,0x57,0x89,0xa5,0xb7,0xa7,0xf5,0x04,0xbb,0xf3,0xd2,0x28,0xf4,0x43,0xe3,0xca,0x4d,0x62,0xb5,0x9a,0xca,0x84,0xe9,0x90,0xca,0xca,0xf5,0xc5,0x2b,0x09,0x30,0xda,0xa2,0x3d,0xe9,0x4c,0xe8,0x70,0x17,0xba,0x2d,0x84,0x98,0x8d,0xdf,0xc9,0xc5,0x8d,0xb6,0x7a,0xad,0xa6,0x13,0xc2,0xdd,0x08,0x45,0x79,0x41,0xa6};
		printf("\r\n . AES MODE_CTR 256 ENC TEST");
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,AESCTR256KEY,32,AESCTR256IV,CT,AESCTR256PT,32,MODE_CTR,0);
		if(memcmp(CT,AESCTR256CT,16) == 0)
		   printf(" PASS");
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR256CT");
			printbyte(AESCTR256CT,16);	
		}
		dorca3_cipher_decipher(RG_ENC,1 /*AES*/,NULL,32,NULL,CT,&AESCTR256PT[16*2],32,MODE_CTR,LAST);
		if(memcmp(CT,&AESCTR256CT[16*2],16) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n CT");
			printbyte(CT,16);
		
			printf("\r\n AESCTR256CT");
			printbyte(&AESCTR256CT[16*2],16);	
		}
		
		printf("\r\n . AES MODE_CTR 256 DEC TEST");
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,AESCTR256KEY,32,AESCTR256IV,PT,AESCTR256CT,32,MODE_CTR,0);
		if(memcmp(PT,AESCTR256PT,32) == 0)
		   printf(" PASS");
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR256PT");
			printbyte(AESCTR256PT,16);	
		}
		dorca3_cipher_decipher(RG_DEC,1 /*AES*/,NULL,32,NULL,PT,&AESCTR256CT[16*2],32,MODE_CTR,LAST);
		if(memcmp(PT,&AESCTR256PT[16*2],32) == 0)
		   printf(" PASS"); 
		else{
			printf("\r\n PT");
			printbyte(PT,16);
	
			printf("\r\n AESCTR256PT");
			printbyte(&AESCTR256PT[16*2],16);	
		}
	
		
	
	}

	hexstr2bytes("00112233445566778899aabbccddeeff",ARIA128KEY);
	hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111aaaaaaaa11111111bbbbbbbb11111111aaaaaaaa11111111bbbbbbbb11111111aaaaaaaa11111111bbbbbbbb",ARIA128PT);	
	hexstr2bytes("c6ecd08e22c30abdb215cf74e2075e6ec6ecd08e22c30abdb215cf74e2075e6ec6ecd08e22c30abdb215cf74e2075e6ec6ecd08e22c30abdb215cf74e2075e6e",ARIA128CT);		

	hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",ARIA256KEY);
	hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111aaaaaaaa11111111bbbbbbbb11111111aaaaaaaa11111111bbbbbbbb11111111aaaaaaaa11111111bbbbbbbb",ARIA256PT);	
	hexstr2bytes("58a875e6044ad7fffa4f58420f7f442d58a875e6044ad7fffa4f58420f7f442d58a875e6044ad7fffa4f58420f7f442d58a875e6044ad7fffa4f58420f7f442d",ARIA256CT);	

	printf("\r\n . ARIA MODE_ECB 128 ENC TEST");                                           
	dorca3_cipher_decipher(RG_ENC,2/*ARIA*/,ARIA128KEY,16,NULL,CT,ARIA128PT,32,MODE_ECB,0); 
	if(memcmp(CT,ARIA128CT,32) == 0)                                                       
	   printf(" PASS");                                                                   
	dorca3_cipher_decipher(RG_ENC,2/*ARIA*/,NULL,16,NULL,CT,ARIA128PT+32,32,MODE_ECB,LAST);
	if(memcmp(CT,ARIA128CT+32,32) == 0)                                                    
	   printf(" PASS");	                                                                  
	                                                                                      
	printf("\r\n . ARIA MODE_ECB 128 DEC TEST");                                           
	dorca3_cipher_decipher(RG_DEC,2/*ARIA*/,ARIA128KEY,16,NULL,PT,ARIA128CT,32,MODE_ECB,0); 
	if(memcmp(PT,ARIA128PT,32) == 0)                                                       
	   printf(" PASS");                                                                   
	else {                                                                                
		printf("\r\n PT");                                                                  
		printbyte(PT,32);                                                                   
		printf("\r\n ARIA128PT");                                                            
		printbyte(ARIA128PT,32);	                                                            
	}                                                                                     
	dorca3_cipher_decipher(RG_DEC,2/*ARIA*/,NULL,16,NULL,PT,ARIA128CT+32,32,MODE_ECB,LAST);
	if(memcmp(PT,ARIA128PT+32,32) == 0)                                                    
	   printf(" PASS");                                                                   
	else {                                                                                
		printf("\r\n PT");                                                                  
		printbyte(PT,32);                                                                   
		printf("\r\n ARIA128PT");                                                            
		printbyte(ARIA128PT+32,32);	                                                        
	}                                                                                     
	                                                                                      
                                                                                        
	printf("\r\n . ARIA MODE_ECB 256 ENC TEST");                                           
	dorca3_cipher_decipher(RG_ENC,2/*ARIA*/,ARIA256KEY,32,NULL,CT,ARIA256PT,32,MODE_ECB,0); 
	if(memcmp(CT,ARIA256CT,32) == 0)                                                       
	   printf(" PASS");                                                                   
	dorca3_cipher_decipher(RG_ENC,2/*ARIA*/,NULL,32,NULL,CT,ARIA256PT+32,32,MODE_ECB,LAST);
	if(memcmp(CT,ARIA256CT+32,32) == 0)                                                    
	   printf(" PASS");                                                                   
	                                                                                      
	printf("\r\n . ARIA MODE_ECB 256 DEC TEST");                                           
	dorca3_cipher_decipher(RG_DEC,2/*ARIA*/,ARIA256KEY,32,NULL,PT,ARIA256CT,32,MODE_ECB,0); 
	if(memcmp(PT,ARIA256PT,32) == 0)                                                       
	   printf(" PASS");                                                                   
	else {                                                                                
		printf("\r\n PT");                                                                  
		printbyte(PT,32);                                                                   
		printf("\r\n ARIA256PT");                                                            
		printbyte(ARIA256PT,32);	                                                            
	}	                                                                            
                                                                                
	dorca3_cipher_decipher(RG_DEC,2/*ARIA*/,NULL,32,NULL,PT,ARIA256CT,32,MODE_ECB,LAST); 
	if(memcmp(PT,ARIA256PT,32) == 0)                                               
	   printf(" PASS");                                                           
	else {                                                                        
		printf("\r\n PT");                                                          
		printbyte(PT,32);                                                           
		printf("\r\n ARIA256PT");                                                    
		printbyte(ARIA256PT,32);	                                                    
		}                      



	

	{

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("49d61860b14909109cef0d22a9268134fadf9fb23151e9645fba75018bdb1538b53334634bbf7d4cd4b5377033060c155fe3948ca75de1031e1d85619e0ad61eb419a866b3c2dbfd10a4ed18b22149f75897f0b8668b0c1c542c687778835fb7cd46e45f85eaa7072437dd9fa6793d6f8d4ccefc4eb1ac641ac1bd30b18c6d64c49bca137eb21c2e04da62712ca2b4f540c57112c38791852cfac7a5d19ed83a",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);
			hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);	
			printf("\r\n . ARIA MODE_CBC 128 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],32,MODE_CBC,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_CBC,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CBC 128 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],32,MODE_CBC,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_CBC,0);

				if(memcmp(PT,&SOURCE[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("523a8a806ae621f155fdd28dbc34e1ab7b9b42432ad8b2efb96e23b13f0a6e52f36185d50ad002c5f601bee5493f118b243ee2e313642bffc3902e7b2efd9a12fa682edd2d23c8b9c5f043c18b17c1ec4b5867918270fbec1027c19ed6af833da5d620994668ca22f599791d292dd6273b2959082aafb7a996167cce1eec5f0cfd15f610d87e2dda9ba68ce1260ca54b222491418374294e7909b1e8551cd8de",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);			
			printf("\r\n. ARIA MODE_CBC 256 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],32,MODE_CBC,0);
				}	
				else if( 8  == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_CBC,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CBC 256 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],32,MODE_CBC,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_CBC,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_CBC,0);

				if(memcmp(PT,&SOURCE[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a200c07c21e6370f413a5d132500a68285017c61b434c7b7ca9685a51071861e4d4bb873b599b479e2d573dddeafba89f812ac6a9e44d554078eb3be94839db4b33da3f59c063123a7ef6f20e10579fa4fd239100ca73b52d4fcafeadee73f139f78f9b7614c2b3b9dbe010f87db06a89a9435f79ce8121431371f4e87b984e0230c22a6dacb32fc42dcc6accef33285bf11",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);	
			hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);
			printf("\r\n. ARIA MODE_CFB 128 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],32,MODE_CFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_CFB,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CFB 128 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],32,MODE_CFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_CFB,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f09009635f28bb93d8c31f870ec1e0bdb082b66fa402dd9c202be300c4517d196b14d4ce11dce97f7aaba54341b0d872cc9b63753a3e8556a14be6f7b3e27e3cfc39caf80f2a355aa50dc83c09c7b11828694f8e4aa726c528976b53f2c877f4991a3a8d28adb63bd751846ffb2350265e179d4990753ae8485ff9b4133ddad5875b84a90cbcfa62a045d726df71b6bda0eeca0be",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);			
			printf("\r\n. ARIA MODE_CFB 256 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],32,MODE_CFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_CFB,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CFB 256 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],32,MODE_CFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_CFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_CFB,0);

				if(memcmp(PT,&SOURCE[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a2000063063f0560083483faeb041c8adecef30cf80cefb002a0d280759168ec01db3d49f61aced260bd43eec0a2731730eec6fa4f2304319cf8ccac2d7be7833e4f8ae6ce967012c1c6badc5d28e7e4144f6bf5cebe01253ee202afce4bc61f28dec069a6f16f6c8a7dd2afae44148f6ff4d0029d5c607b5fa6b8c8a6301cde5c7033565cd0b8f0974ab490b236197ba04a",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

			hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);
			printf("\r\n . ARIA MODE_OFB 128 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],32,MODE_OFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_OFB,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_OFB 128 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],32,MODE_OFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_OFB,0);

				if(memcmp(PT,&SOURCE[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f0900963584c256815c4292b59f8d3f966a75b52345b4f5f98c785d3f368a8d5ff89b7f950ceab3cd63773c2621d652b8ef98b4196afb2c2b30496bc5b7d9e7f9084f9d855f63a511751c8909e7a6deadbe0a67a4fb89383ca5d209c6f66f793fc471195c476fb9c1eab2ac91e680e454b4f3ed9a67fb52f09c29b965b23cfa6f3f6bbb2a86c6cdbaa2857bf2486f543231892a52",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);	
			printf("\r\n . ARIA MODE_OFB 256 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],32,MODE_OFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_OFB,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_OFB 256 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],32,MODE_OFB,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_OFB,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_OFB,0);

				if(memcmp(PT,&SOURCE[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("ac5d7de805a0bf1c57c854501af60fa11497e2a34519dea1569e91e5b5ccae2ff3bfa1bf975f4571f48be191613546c3911163c085f871f0e7ae5f2a085b81851c2a3ddf20ecb8fa51901aec8ee4ba32a35dab67bb72cd9140ad188a967ac0fbbdfa94ea6cce47dcf8525ab5a814cfeb2bb60ee2b126e2d9d847c1a9e96f9019e3e6a7fe40d3829afb73db1cc245646addb62d9b907baaafbe46a73dbc131d3d",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);
			memset(IV,0,16);

			printf("\r\n . ARIA MODE_CTR 128 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,16,IV,CT,&SOURCE[16*i],32,MODE_CTR,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,16,NULL,CT,&SOURCE[16*i],32,MODE_CTR,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CTR 128 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,16,IV,PT,&RESULT[16*i],32,MODE_CTR,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,16,NULL,PT,&RESULT[16*i],32,MODE_CTR,0);

				if(memcmp(PT,&SOURCE[16*i],16) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}


			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("30026c329666141721178b99c0a1f1b2f06940253f7b3089e2a30ea86aa3c88f5940f05ad7ee41d71347bb7261e348f18360473fdf7d4e7723bffb4411cc13f6cdd89f3bc7b9c768145022c7a74f14d7c305cd012a10f16050c23f1ae5c23f45998d13fbaa041e51619577e0772764896a5d4516d8ffceb3bf7e05f613edd9a60cdcedaff9cfcaf4e00d445a54334f73ab2cad944e51d266548e61c6eb0aa1cd",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);	
			printf("\r\n . ARIA MODE_CTR 256 ENC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,KEY,32,IV,CT,&SOURCE[16*i],32,MODE_CTR,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_ENC,2 /*ARIA*/,NULL,32,NULL,CT,&SOURCE[16*i],32,MODE_CTR,0);

				if(memcmp(CT,&RESULT[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n CT");
					printbyte(CT,16);
			
					printf("\r\n &RESULT");
					printbyte(&RESULT[16*i],16);	
				}
			}

			printf("\r\n . ARIA MODE_CTR 256 DEC TEST");	
			for(i = 0; i < 10; i += 2 ){
				
				if(0 == i){
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,KEY,32,IV,PT,&RESULT[16*i],32,MODE_CTR,0);
				}	
				else if( 8 == i)
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_CTR,LAST);
				else
					dorca3_cipher_decipher(RG_DEC,2 /*ARIA*/,NULL,32,NULL,PT,&RESULT[16*i],32,MODE_CTR,0);

				if(memcmp(PT,&SOURCE[16*i],32) == 0)
				   printf(" PASS"); 
				else{
					printf("\r\n PT");
					printbyte(PT,16);
			
					printf("\r\n &RESULT");
					printbyte(&SOURCE,16);	
				}
			}
  }
#if 0			
			printf(". ARIA MODE_CBC 128 DEC TEST");				
			
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("523a8a806ae621f155fdd28dbc34e1ab7b9b42432ad8b2efb96e23b13f0a6e52f36185d50ad002c5f601bee5493f118b243ee2e313642bffc3902e7b2efd9a12fa682edd2d23c8b9c5f043c18b17c1ec4b5867918270fbec1027c19ed6af833da5d620994668ca22f599791d292dd6273b2959082aafb7a996167cce1eec5f0cfd15f610d87e2dda9ba68ce1260ca54b222491418374294e7909b1e8551cd8de",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
			printf(". ARIA MODE_CBC 256 ENC TEST");
			printf(". ARIA MODE_CBC 256 DEC TEST");			


	}
	if(Mode == MODE_CFB) {
		if(RG256 == RG_128_256){

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f09009635f28bb93d8c31f870ec1e0bdb082b66fa402dd9c202be300c4517d196b14d4ce11dce97f7aaba54341b0d872cc9b63753a3e8556a14be6f7b3e27e3cfc39caf80f2a355aa50dc83c09c7b11828694f8e4aa726c528976b53f2c877f4991a3a8d28adb63bd751846ffb2350265e179d4990753ae8485ff9b4133ddad5875b84a90cbcfa62a045d726df71b6bda0eeca0be",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
		}
		else
		{
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a200c07c21e6370f413a5d132500a68285017c61b434c7b7ca9685a51071861e4d4bb873b599b479e2d573dddeafba89f812ac6a9e44d554078eb3be94839db4b33da3f59c063123a7ef6f20e10579fa4fd239100ca73b52d4fcafeadee73f139f78f9b7614c2b3b9dbe010f87db06a89a9435f79ce8121431371f4e87b984e0230c22a6dacb32fc42dcc6accef33285bf11",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

		}
		hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);	

	}
	if(Mode == MODE_OFB) {
		if(RG256 == RG_128_256){

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("26834705b0f2c0e2588d4a7f0900963584c256815c4292b59f8d3f966a75b52345b4f5f98c785d3f368a8d5ff89b7f950ceab3cd63773c2621d652b8ef98b4196afb2c2b30496bc5b7d9e7f9084f9d855f63a511751c8909e7a6deadbe0a67a4fb89383ca5d209c6f66f793fc471195c476fb9c1eab2ac91e680e454b4f3ed9a67fb52f09c29b965b23cfa6f3f6bbb2a86c6cdbaa2857bf2486f543231892a52",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
		}
		else
		{
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("3720e53ba7d615383406b09f0a05a2000063063f0560083483faeb041c8adecef30cf80cefb002a0d280759168ec01db3d49f61aced260bd43eec0a2731730eec6fa4f2304319cf8ccac2d7be7833e4f8ae6ce967012c1c6badc5d28e7e4144f6bf5cebe01253ee202afce4bc61f28dec069a6f16f6c8a7dd2afae44148f6ff4d0029d5c607b5fa6b8c8a6301cde5c7033565cd0b8f0974ab490b236197ba04a",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

		}
		hexstr2bytes("0f1e2d3c4b5a69788796a5b4c3d2e1f0",IV);	

	}	
	if(Mode == MODE_CTR) {
		if(RG256 == RG_128_256){

			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("30026c329666141721178b99c0a1f1b2f06940253f7b3089e2a30ea86aa3c88f5940f05ad7ee41d71347bb7261e348f18360473fdf7d4e7723bffb4411cc13f6cdd89f3bc7b9c768145022c7a74f14d7c305cd012a10f16050c23f1ae5c23f45998d13fbaa041e51619577e0772764896a5d4516d8ffceb3bf7e05f613edd9a60cdcedaff9cfcaf4e00d445a54334f73ab2cad944e51d266548e61c6eb0aa1cd",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff",KEY);
		}
		else
		{
			hexstr2bytes("11111111aaaaaaaa11111111bbbbbbbb11111111cccccccc11111111dddddddd22222222aaaaaaaa22222222bbbbbbbb22222222cccccccc22222222dddddddd33333333aaaaaaaa33333333bbbbbbbb33333333cccccccc33333333dddddddd44444444aaaaaaaa44444444bbbbbbbb44444444cccccccc44444444dddddddd55555555aaaaaaaa55555555bbbbbbbb55555555cccccccc55555555dddddddd",SOURCE);
			hexstr2bytes("ac5d7de805a0bf1c57c854501af60fa11497e2a34519dea1569e91e5b5ccae2ff3bfa1bf975f4571f48be191613546c3911163c085f871f0e7ae5f2a085b81851c2a3ddf20ecb8fa51901aec8ee4ba32a35dab67bb72cd9140ad188a967ac0fbbdfa94ea6cce47dcf8525ab5a814cfeb2bb60ee2b126e2d9d847c1a9e96f9019e3e6a7fe40d3829afb73db1cc245646addb62d9b907baaafbe46a73dbc131d3d",RESULT);
			hexstr2bytes("00112233445566778899aabbccddeeff",KEY);

		}
		memset(IV,0,16);


	}
#endif
    

}
#endif